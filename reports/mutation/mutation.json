{"files":{"src/lib/database.ts":{"language":"typescript","mutants":[{"id":"4","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":75},"start":{"column":9,"line":24}}},{"id":"5","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":65,"line":26},"start":{"column":26,"line":26}}},{"id":"6","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":38},"start":{"column":26,"line":29}}},{"id":"7","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":45},"start":{"column":26,"line":41}}},{"id":"8","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":52},"start":{"column":26,"line":48}}},{"id":"9","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":58},"start":{"column":26,"line":54}}},{"id":"10","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":64},"start":{"column":26,"line":60}}},{"id":"11","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":70},"start":{"column":26,"line":66}}},{"id":"12","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":71,"line":73},"start":{"column":9,"line":73}}},{"id":"13","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":77},"start":{"column":15,"line":75}}},{"id":"27","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":105},"start":{"column":9,"line":90}}},{"id":"28","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":63,"line":91},"start":{"column":29,"line":91}}},{"id":"29","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":58,"line":91},"start":{"column":55,"line":91}}},{"id":"30","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":102},"start":{"column":9,"line":94}}},{"id":"31","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":59,"line":103},"start":{"column":9,"line":103}}},{"id":"32","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":107},"start":{"column":15,"line":105}}},{"id":"37","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":123},"start":{"column":9,"line":114}}},{"id":"38","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":33,"line":115},"start":{"column":26,"line":115}}},{"id":"39","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":119},"start":{"column":35,"line":117}}},{"id":"40","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":34,"line":121},"start":{"column":26,"line":121}}},{"id":"41","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":55,"line":122},"start":{"column":19,"line":122}}},{"id":"42","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":126},"start":{"column":21,"line":123}}},{"id":"43","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":36,"line":124},"start":{"column":26,"line":124}}},{"id":"44","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":128},"start":{"column":15,"line":126}}},{"id":"51","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":245},"start":{"column":9,"line":150}}},{"id":"52","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":62,"line":151},"start":{"column":29,"line":151}}},{"id":"53","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":57,"line":151},"start":{"column":54,"line":151}}},{"id":"54","mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":27,"line":153},"start":{"column":25,"line":153}}},{"id":"55","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":36,"line":154},"start":{"column":29,"line":154}}},{"id":"56","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":60,"line":158},"start":{"column":11,"line":158}}},{"id":"57","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":60,"line":158},"start":{"column":11,"line":158}}},{"id":"58","mutatorName":"LogicalOperator","replacement":"options.fileTypes || options.fileTypes.length > 0","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":60,"line":158},"start":{"column":11,"line":158}}},{"id":"59","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":60,"line":158},"start":{"column":32,"line":158}}},{"id":"60","mutatorName":"EqualityOperator","replacement":"options.fileTypes.length >= 0","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":60,"line":158},"start":{"column":32,"line":158}}},{"id":"61","mutatorName":"EqualityOperator","replacement":"options.fileTypes.length <= 0","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":60,"line":158},"start":{"column":32,"line":158}}},{"id":"62","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":162},"start":{"column":62,"line":158}}},{"id":"63","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":75,"line":159},"start":{"column":24,"line":159}}},{"id":"64","mutatorName":"UpdateOperator","replacement":"paramIndex--","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":21,"line":161},"start":{"column":9,"line":161}}},{"id":"65","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":50,"line":165},"start":{"column":11,"line":165}}},{"id":"66","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":50,"line":165},"start":{"column":11,"line":165}}},{"id":"67","mutatorName":"LogicalOperator","replacement":"options.tags || options.tags.length > 0","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":50,"line":165},"start":{"column":11,"line":165}}},{"id":"68","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":50,"line":165},"start":{"column":27,"line":165}}},{"id":"69","mutatorName":"EqualityOperator","replacement":"options.tags.length >= 0","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":50,"line":165},"start":{"column":27,"line":165}}},{"id":"70","mutatorName":"EqualityOperator","replacement":"options.tags.length <= 0","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":50,"line":165},"start":{"column":27,"line":165}}},{"id":"71","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":170},"start":{"column":52,"line":165}}},{"id":"72","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":45,"line":166},"start":{"column":38,"line":166}}},{"id":"73","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":57,"line":166},"start":{"column":48,"line":166}}},{"id":"74","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":82,"line":167},"start":{"column":24,"line":167}}},{"id":"75","mutatorName":"UpdateOperator","replacement":"paramIndex--","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":21,"line":169},"start":{"column":9,"line":169}}},{"id":"76","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":56,"line":173},"start":{"column":11,"line":173}}},{"id":"77","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":56,"line":173},"start":{"column":11,"line":173}}},{"id":"78","mutatorName":"LogicalOperator","replacement":"options.folders || options.folders.length > 0","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":56,"line":173},"start":{"column":11,"line":173}}},{"id":"79","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":56,"line":173},"start":{"column":30,"line":173}}},{"id":"80","mutatorName":"EqualityOperator","replacement":"options.folders.length >= 0","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":56,"line":173},"start":{"column":30,"line":173}}},{"id":"81","mutatorName":"EqualityOperator","replacement":"options.folders.length <= 0","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":56,"line":173},"start":{"column":30,"line":173}}},{"id":"82","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":187},"start":{"column":58,"line":173}}},{"id":"83","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":45,"line":174},"start":{"column":38,"line":174}}},{"id":"84","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":57,"line":174},"start":{"column":48,"line":174}}},{"id":"85","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":37,"line":175},"start":{"column":24,"line":175}}},{"id":"86","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":10,"line":179},"start":{"column":64,"line":176}}},{"id":"87","mutatorName":"ArithmeticOperator","replacement":"paramIndex - i","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":46,"line":177},"start":{"column":32,"line":177}}},{"id":"88","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":75,"line":178},"start":{"column":18,"line":178}}},{"id":"89","mutatorName":"AssignmentOperator","replacement":"whereClause -= folderConditions.join(\" OR \")","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":53,"line":180},"start":{"column":9,"line":180}}},{"id":"90","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":52,"line":180},"start":{"column":46,"line":180}}},{"id":"91","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":27,"line":181},"start":{"column":24,"line":181}}},{"id":"92","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":10,"line":185},"start":{"column":45,"line":183}}},{"id":"93","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":36,"line":184},"start":{"column":23,"line":184}}},{"id":"94","mutatorName":"AssignmentOperator","replacement":"paramIndex -= options.folders.length","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":45,"line":186},"start":{"column":9,"line":186}}},{"id":"95","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":45,"line":190},"start":{"column":11,"line":190}}},{"id":"96","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":45,"line":190},"start":{"column":11,"line":190}}},{"id":"97","mutatorName":"EqualityOperator","replacement":"options.hasWikilinks === undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":45,"line":190},"start":{"column":11,"line":190}}},{"id":"98","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":197},"start":{"column":47,"line":190}}},{"id":"99","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":45,"line":191},"start":{"column":38,"line":191}}},{"id":"100","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":57,"line":191},"start":{"column":48,"line":191}}},{"id":"101","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":33,"line":192},"start":{"column":13,"line":192}}},{"id":"102","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":33,"line":192},"start":{"column":13,"line":192}}},{"id":"103","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":10,"line":194},"start":{"column":35,"line":192}}},{"id":"104","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":95,"line":193},"start":{"column":26,"line":193}}},{"id":"105","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":10,"line":196},"start":{"column":16,"line":194}}},{"id":"106","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":142,"line":195},"start":{"column":26,"line":195}}},{"id":"107","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":200},"start":{"column":11,"line":200}}},{"id":"108","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":200},"start":{"column":11,"line":200}}},{"id":"109","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":213},"start":{"column":30,"line":200}}},{"id":"110","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":36,"line":201},"start":{"column":13,"line":201}}},{"id":"111","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":36,"line":201},"start":{"column":13,"line":201}}},{"id":"112","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":10,"line":206},"start":{"column":38,"line":201}}},{"id":"113","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":47,"line":202},"start":{"column":40,"line":202}}},{"id":"114","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":59,"line":202},"start":{"column":50,"line":202}}},{"id":"115","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":87,"line":203},"start":{"column":26,"line":203}}},{"id":"116","mutatorName":"UpdateOperator","replacement":"paramIndex--","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":23,"line":205},"start":{"column":11,"line":205}}},{"id":"117","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":34,"line":207},"start":{"column":13,"line":207}}},{"id":"118","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":34,"line":207},"start":{"column":13,"line":207}}},{"id":"119","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":10,"line":212},"start":{"column":36,"line":207}}},{"id":"120","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":47,"line":208},"start":{"column":40,"line":208}}},{"id":"121","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":59,"line":208},"start":{"column":50,"line":208}}},{"id":"122","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":87,"line":209},"start":{"column":26,"line":209}}},{"id":"123","mutatorName":"UpdateOperator","replacement":"paramIndex--","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":23,"line":211},"start":{"column":11,"line":211}}},{"id":"124","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":225},"start":{"column":21,"line":215}}},{"id":"125","mutatorName":"ArrowFunction","replacement":"() => undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":9,"line":235},"start":{"column":37,"line":229}}},{"id":"126","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":235},"start":{"column":54,"line":229}}},{"id":"127","mutatorName":"ArithmeticOperator","replacement":"index - 1","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":234},"start":{"column":15,"line":234}}},{"id":"128","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":32,"line":238},"start":{"column":11,"line":238}}},{"id":"129","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":32,"line":238},"start":{"column":11,"line":238}}},{"id":"130","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":242},"start":{"column":34,"line":238}}},{"id":"131","mutatorName":"MethodExpression","replacement":"results","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":10,"line":241},"start":{"column":19,"line":239}}},{"id":"132","mutatorName":"ArrowFunction","replacement":"() => undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":62,"line":240},"start":{"column":11,"line":240}}},{"id":"133","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":62,"line":240},"start":{"column":18,"line":240}}},{"id":"134","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":62,"line":240},"start":{"column":18,"line":240}}},{"id":"135","mutatorName":"EqualityOperator","replacement":"r.cosineSimilarity > options.minSimilarity!","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":62,"line":240},"start":{"column":18,"line":240}}},{"id":"136","mutatorName":"EqualityOperator","replacement":"r.cosineSimilarity < options.minSimilarity!","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":62,"line":240},"start":{"column":18,"line":240}}},{"id":"137","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":247},"start":{"column":15,"line":245}}},{"id":"139","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":268},"start":{"column":9,"line":252}}},{"id":"140","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":256},"start":{"column":9,"line":254}}},{"id":"141","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":13,"line":257},"start":{"column":9,"line":257}}},{"id":"142","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":35,"line":260},"start":{"column":11,"line":260}}},{"id":"143","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":35,"line":260},"start":{"column":11,"line":260}}},{"id":"144","mutatorName":"EqualityOperator","replacement":"result.rows.length !== 0","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":35,"line":260},"start":{"column":11,"line":260}}},{"id":"145","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":267},"start":{"column":14,"line":263}}},{"id":"146","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":270},"start":{"column":15,"line":268}}},{"id":"148","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":291},"start":{"column":9,"line":275}}},{"id":"149","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":10,"line":282},"start":{"column":9,"line":277}}},{"id":"150","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":19,"line":283},"start":{"column":9,"line":283}}},{"id":"151","mutatorName":"ArrowFunction","replacement":"() => undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":9,"line":290},"start":{"column":30,"line":286}}},{"id":"152","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":290},"start":{"column":40,"line":286}}},{"id":"153","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":293},"start":{"column":15,"line":291}}},{"id":"154","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":365},"start":{"column":6,"line":301}}},{"id":"155","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":362},"start":{"column":9,"line":303}}},{"id":"156","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":58,"line":306},"start":{"column":9,"line":306}}},{"id":"157","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":314},"start":{"column":45,"line":310}}},{"id":"158","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":327},"start":{"column":47,"line":317}}},{"id":"159","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":339},"start":{"column":44,"line":330}}},{"id":"160","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":344},"start":{"column":40,"line":342}}},{"id":"161","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":349},"start":{"column":42,"line":347}}},{"id":"162","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":354},"start":{"column":39,"line":352}}},{"id":"163","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":361},"start":{"column":14,"line":356}}},{"id":"164","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":364},"start":{"column":15,"line":362}}},{"id":"165","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":375},"start":{"column":35,"line":367}}},{"id":"166","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":372},"start":{"column":9,"line":369}}},{"id":"167","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":57,"line":370},"start":{"column":26,"line":370}}},{"id":"168","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":65,"line":371},"start":{"column":19,"line":371}}},{"id":"169","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":374},"start":{"column":15,"line":372}}},{"id":"171","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":391},"start":{"column":9,"line":379}}},{"id":"172","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":10,"line":384},"start":{"column":9,"line":381}}},{"id":"173","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":19,"line":385},"start":{"column":9,"line":385}}},{"id":"174","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":71,"line":389},"start":{"column":9,"line":389}}},{"id":"175","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":393},"start":{"column":15,"line":391}}},{"id":"1","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'end')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["32"],"coveredBy":["32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52"],"location":{"end":{"column":4,"line":20},"start":{"column":41,"line":13}}},{"id":"0","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to be 'obsidian_chunks' // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["33"],"coveredBy":["32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52"],"location":{"end":{"column":49,"line":10},"start":{"column":32,"line":10}}},{"id":"3","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":21,"coveredBy":["32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52"],"location":{"end":{"column":4,"line":78},"start":{"column":37,"line":22}}},{"id":"2","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected 'batch-2' to be 'search-1' // Object.is equality","status":"Killed","static":false,"testsCompleted":13,"killedBy":["44"],"coveredBy":["32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52"],"location":{"end":{"column":6,"line":19},"start":{"column":26,"line":14}}},{"id":"14","mutatorName":"BlockStatement","replacement":"{}","statusReason":"promise resolved \"undefined\" instead of rejecting","status":"Killed","static":false,"testsCompleted":3,"killedBy":["40"],"coveredBy":["38","39","40","41","44","45","46","47","48","49"],"location":{"end":{"column":4,"line":108},"start":{"column":58,"line":80}}},{"id":"15","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Embedding dimension mismatch: expected 768, got 768","status":"Killed","static":false,"testsCompleted":1,"killedBy":["38"],"coveredBy":["38","39","40","41","44","45","46","47","48","49"],"location":{"end":{"column":70,"line":81},"start":{"column":9,"line":81}}},{"id":"16","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected [Function] to throw error including 'Embedding dimension mismatch' but got 'role \"postgres\" does not exist'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["40"],"coveredBy":["38","39","40","41","44","45","46","47","48","49"],"location":{"end":{"column":70,"line":81},"start":{"column":9,"line":81}}},{"id":"17","mutatorName":"LogicalOperator","replacement":"!chunk.embedding && chunk.embedding.length !== this.dimension","statusReason":"expected [Function] to throw error including 'Embedding dimension mismatch' but got 'role \"postgres\" does not exist'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["40"],"coveredBy":["38","39","40","41","44","45","46","47","48","49"],"location":{"end":{"column":70,"line":81},"start":{"column":9,"line":81}}},{"id":"18","mutatorName":"BooleanLiteral","replacement":"chunk.embedding","statusReason":"Embedding dimension mismatch: expected 768, got 768","status":"Killed","static":false,"testsCompleted":1,"killedBy":["38"],"coveredBy":["38","39","40","41","44","45","46","47","48","49"],"location":{"end":{"column":25,"line":81},"start":{"column":9,"line":81}}},{"id":"19","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected [Function] to throw error including 'Embedding dimension mismatch' but got 'role \"postgres\" does not exist'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["40"],"coveredBy":["38","39","40","44","45","46","47","48","49"],"location":{"end":{"column":70,"line":81},"start":{"column":29,"line":81}}},{"id":"20","mutatorName":"EqualityOperator","replacement":"chunk.embedding.length === this.dimension","statusReason":"Embedding dimension mismatch: expected 768, got 768","status":"Killed","static":false,"testsCompleted":1,"killedBy":["38"],"coveredBy":["38","39","40","44","45","46","47","48","49"],"location":{"end":{"column":70,"line":81},"start":{"column":29,"line":81}}},{"id":"21","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected [Function] to throw error including 'Embedding dimension mismatch' but got 'role \"postgres\" does not exist'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40","41"],"location":{"end":{"column":6,"line":87},"start":{"column":72,"line":81}}},{"id":"22","mutatorName":"StringLiteral","replacement":"``","statusReason":"expected [Function] to throw error including 'Embedding dimension mismatch' but got ''","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40","41"],"location":{"end":{"column":11,"line":85},"start":{"column":9,"line":83}}},{"id":"23","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["40","41"],"location":{"end":{"column":39,"line":84},"start":{"column":11,"line":84}}},{"id":"24","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["40","41"],"location":{"end":{"column":39,"line":84},"start":{"column":11,"line":84}}},{"id":"25","mutatorName":"LogicalOperator","replacement":"chunk.embedding?.length && 0","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["40","41"],"location":{"end":{"column":39,"line":84},"start":{"column":11,"line":84}}},{"id":"26","mutatorName":"OptionalChaining","replacement":"chunk.embedding.length","statusReason":"expected [Function] to throw error including 'Embedding dimension mismatch' but got 'Cannot read properties of null (readi…'","status":"Killed","static":false,"testsCompleted":2,"killedBy":["41"],"coveredBy":["40","41"],"location":{"end":{"column":34,"line":84},"start":{"column":11,"line":84}}},{"id":"33","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["42","43"],"location":{"end":{"column":4,"line":129},"start":{"column":67,"line":110}}},{"id":"34","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["42","43"],"location":{"end":{"column":28,"line":111},"start":{"column":9,"line":111}}},{"id":"35","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"promise rejected \"error: role \"postgres\" does not exist { …(15) }\" instead of resolving","status":"Killed","static":false,"testsCompleted":2,"killedBy":["43"],"coveredBy":["42","43"],"location":{"end":{"column":28,"line":111},"start":{"column":9,"line":111}}},{"id":"36","mutatorName":"EqualityOperator","replacement":"chunks.length !== 0","statusReason":"promise rejected \"error: role \"postgres\" does not exist { …(15) }\" instead of resolving","status":"Killed","static":false,"testsCompleted":2,"killedBy":["43"],"coveredBy":["42","43"],"location":{"end":{"column":28,"line":111},"start":{"column":9,"line":111}}},{"id":"45","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'length')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49"],"location":{"end":{"column":4,"line":248},"start":{"column":30,"line":142}}},{"id":"46","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Query embedding dimension mismatch: expected 768, got 768","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49"],"location":{"end":{"column":49,"line":143},"start":{"column":9,"line":143}}},{"id":"47","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected [Function] to throw error including 'Query embedding dimension mismatch' but got 'role \"postgres\" does not exist'","status":"Killed","static":false,"testsCompleted":6,"killedBy":["49"],"coveredBy":["44","45","46","47","48","49"],"location":{"end":{"column":49,"line":143},"start":{"column":9,"line":143}}},{"id":"48","mutatorName":"EqualityOperator","replacement":"queryEmbedding.length === this.dimension","statusReason":"Query embedding dimension mismatch: expected 768, got 768","status":"Killed","static":false,"testsCompleted":1,"killedBy":["44"],"coveredBy":["44","45","46","47","48","49"],"location":{"end":{"column":49,"line":143},"start":{"column":9,"line":143}}},{"id":"49","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected [Function] to throw error including 'Query embedding dimension mismatch' but got 'role \"postgres\" does not exist'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["49"],"coveredBy":["49"],"location":{"end":{"column":6,"line":147},"start":{"column":51,"line":143}}},{"id":"50","mutatorName":"StringLiteral","replacement":"``","statusReason":"expected [Function] to throw error including 'Query embedding dimension mismatch' but got ''","status":"Killed","static":false,"testsCompleted":1,"killedBy":["49"],"coveredBy":["49"],"location":{"end":{"column":103,"line":145},"start":{"column":9,"line":145}}},{"id":"138","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to be null","status":"Killed","static":false,"testsCompleted":1,"killedBy":["50"],"coveredBy":["50"],"location":{"end":{"column":4,"line":271},"start":{"column":65,"line":250}}},{"id":"147","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to deeply equal []","status":"Killed","static":false,"testsCompleted":1,"killedBy":["51"],"coveredBy":["51"],"location":{"end":{"column":4,"line":294},"start":{"column":69,"line":273}}},{"id":"170","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["52"],"location":{"end":{"column":4,"line":394},"start":{"column":61,"line":377}}},{"id":"176","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":21,"coveredBy":["32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","49","50","51","52"],"location":{"end":{"column":4,"line":398},"start":{"column":32,"line":396}}}],"source":"import { Pool, Client } from \"pg\";\nimport {\n  DocumentChunk,\n  SearchResult,\n  DocumentMetadata,\n} from \"../types/index.js\";\n\nexport class ObsidianDatabase {\n  private pool: Pool;\n  private readonly tableName = \"obsidian_chunks\";\n  private readonly dimension = 768;\n\n  constructor(connectionString: string) {\n    this.pool = new Pool({\n      connectionString,\n      max: 10,\n      idleTimeoutMillis: 30000,\n      connectionTimeoutMillis: 2000,\n    });\n  }\n\n  async initialize(): Promise<void> {\n    const client = await this.pool.connect();\n    try {\n      // Enable pgvector extension\n      await client.query(\"CREATE EXTENSION IF NOT EXISTS vector\");\n\n      // Create table with exact dimension pinned\n      await client.query(`\n        CREATE TABLE IF NOT EXISTS ${this.tableName} (\n          id TEXT PRIMARY KEY,\n          text TEXT NOT NULL,\n          meta JSONB NOT NULL,\n          v VECTOR(${this.dimension}),\n          created_at TIMESTAMP DEFAULT NOW(),\n          updated_at TIMESTAMP DEFAULT NOW()\n        )\n      `);\n\n      // Create HNSW index for fast ANN search\n      await client.query(`\n        CREATE INDEX IF NOT EXISTS ${this.tableName}_hnsw_idx \n        ON ${this.tableName} \n        USING hnsw (v vector_cosine_ops)\n      `);\n\n      // Create indexes on Obsidian-specific metadata\n      await client.query(`\n        CREATE INDEX IF NOT EXISTS ${this.tableName}_file_name_idx \n        ON ${this.tableName} \n        USING BTREE ((meta->'obsidianFile'->>'fileName'))\n      `);\n\n      await client.query(`\n        CREATE INDEX IF NOT EXISTS ${this.tableName}_content_type_idx \n        ON ${this.tableName} \n        USING BTREE ((meta->>'contentType'))\n      `);\n\n      await client.query(`\n        CREATE INDEX IF NOT EXISTS ${this.tableName}_tags_idx \n        ON ${this.tableName} \n        USING GIN ((meta->'obsidianFile'->'tags'))\n      `);\n\n      await client.query(`\n        CREATE INDEX IF NOT EXISTS ${this.tableName}_updated_at_idx \n        ON ${this.tableName} \n        USING BTREE ((meta->>'updatedAt'))\n      `);\n\n      console.log(\n        `✅ Obsidian database initialized with table ${this.tableName}`\n      );\n    } finally {\n      client.release();\n    }\n  }\n\n  async upsertChunk(chunk: DocumentChunk): Promise<void> {\n    if (!chunk.embedding || chunk.embedding.length !== this.dimension) {\n      throw new Error(\n        `Embedding dimension mismatch: expected ${this.dimension}, got ${\n          chunk.embedding?.length || 0\n        }`\n      );\n    }\n\n    const client = await this.pool.connect();\n    try {\n      const vectorLiteral = `'[${chunk.embedding.join(\",\")}]'`;\n\n      await client.query(\n        `\n        INSERT INTO ${this.tableName} (id, text, meta, v, updated_at)\n        VALUES ($1, $2, $3::jsonb, ${vectorLiteral}::vector, NOW())\n        ON CONFLICT (id) DO UPDATE SET \n          text = EXCLUDED.text,\n          meta = EXCLUDED.meta,\n          v = EXCLUDED.v,\n          updated_at = NOW()\n      `,\n        [chunk.id, chunk.text, JSON.stringify(chunk.meta)]\n      );\n    } finally {\n      client.release();\n    }\n  }\n\n  async batchUpsertChunks(chunks: DocumentChunk[]): Promise<void> {\n    if (chunks.length === 0) return;\n\n    const client = await this.pool.connect();\n    try {\n      await client.query(\"BEGIN\");\n\n      for (const chunk of chunks) {\n        await this.upsertChunk(chunk);\n      }\n\n      await client.query(\"COMMIT\");\n      console.log(`✅ Upserted ${chunks.length} chunks`);\n    } catch (error) {\n      await client.query(\"ROLLBACK\");\n      throw error;\n    } finally {\n      client.release();\n    }\n  }\n\n  async search(\n    queryEmbedding: number[],\n    limit = 30,\n    options: {\n      fileTypes?: string[];\n      tags?: string[];\n      folders?: string[];\n      hasWikilinks?: boolean;\n      dateRange?: { start?: Date; end?: Date };\n      minSimilarity?: number;\n    } = {}\n  ): Promise<SearchResult[]> {\n    if (queryEmbedding.length !== this.dimension) {\n      throw new Error(\n        `Query embedding dimension mismatch: expected ${this.dimension}, got ${queryEmbedding.length}`\n      );\n    }\n\n    const client = await this.pool.connect();\n    try {\n      const vectorLiteral = `'[${queryEmbedding.join(\",\")}]'`;\n\n      let whereClause = \"\";\n      const params: any[] = [limit];\n      let paramIndex = 2;\n\n      // File type filter\n      if (options.fileTypes && options.fileTypes.length > 0) {\n        whereClause += ` WHERE meta->>'contentType' = ANY($${paramIndex})`;\n        params.push(options.fileTypes);\n        paramIndex++;\n      }\n\n      // Tags filter\n      if (options.tags && options.tags.length > 0) {\n        const prefix = whereClause ? \" AND \" : \" WHERE \";\n        whereClause += `${prefix} meta->'obsidianFile'->'tags' ?| $${paramIndex}`;\n        params.push(options.tags);\n        paramIndex++;\n      }\n\n      // Folders filter\n      if (options.folders && options.folders.length > 0) {\n        const prefix = whereClause ? \" AND \" : \" WHERE \";\n        whereClause += `${prefix} (`;\n        const folderConditions = options.folders.map((_, i) => {\n          const currentParam = paramIndex + i;\n          return `meta->'obsidianFile'->>'filePath' LIKE $${currentParam}`;\n        });\n        whereClause += folderConditions.join(\" OR \");\n        whereClause += \")\";\n\n        options.folders.forEach((folder) => {\n          params.push(`%${folder}%`);\n        });\n        paramIndex += options.folders.length;\n      }\n\n      // Wikilinks filter\n      if (options.hasWikilinks !== undefined) {\n        const prefix = whereClause ? \" AND \" : \" WHERE \";\n        if (options.hasWikilinks) {\n          whereClause += `${prefix} jsonb_array_length(meta->'obsidianFile'->'wikilinks') > 0`;\n        } else {\n          whereClause += `${prefix} (meta->'obsidianFile'->'wikilinks' IS NULL OR jsonb_array_length(meta->'obsidianFile'->'wikilinks') = 0)`;\n        }\n      }\n\n      // Date range filter\n      if (options.dateRange) {\n        if (options.dateRange.start) {\n          const prefix = whereClause ? \" AND \" : \" WHERE \";\n          whereClause += `${prefix} (meta->>'updatedAt')::timestamp >= $${paramIndex}`;\n          params.push(options.dateRange.start.toISOString());\n          paramIndex++;\n        }\n        if (options.dateRange.end) {\n          const prefix = whereClause ? \" AND \" : \" WHERE \";\n          whereClause += `${prefix} (meta->>'updatedAt')::timestamp <= $${paramIndex}`;\n          params.push(options.dateRange.end.toISOString());\n          paramIndex++;\n        }\n      }\n\n      const query = `\n        SELECT \n          id, \n          text, \n          meta, \n          1 - (v <#> ${vectorLiteral}::vector) AS cosine_similarity\n        FROM ${this.tableName}\n        ${whereClause}\n        ORDER BY v <#> ${vectorLiteral}::vector\n        LIMIT $1\n      `;\n\n      const result = await client.query(query, params);\n\n      let results = result.rows.map((row, index) => ({\n        id: row.id,\n        text: row.text,\n        meta: row.meta as DocumentMetadata,\n        cosineSimilarity: parseFloat(row.cosine_similarity),\n        rank: index + 1,\n      }));\n\n      // Apply minimum similarity filter if specified\n      if (options.minSimilarity) {\n        results = results.filter(\n          (r) => r.cosineSimilarity >= options.minSimilarity!\n        );\n      }\n\n      return results;\n    } finally {\n      client.release();\n    }\n  }\n\n  async getChunkById(id: string): Promise<DocumentChunk | null> {\n    const client = await this.pool.connect();\n    try {\n      const result = await client.query(\n        `\n        SELECT id, text, meta FROM ${this.tableName} WHERE id = $1\n      `,\n        [id]\n      );\n\n      if (result.rows.length === 0) return null;\n\n      const row = result.rows[0];\n      return {\n        id: row.id,\n        text: row.text,\n        meta: row.meta as DocumentMetadata,\n      };\n    } finally {\n      client.release();\n    }\n  }\n\n  async getChunksByFile(fileName: string): Promise<DocumentChunk[]> {\n    const client = await this.pool.connect();\n    try {\n      const result = await client.query(\n        `\n        SELECT id, text, meta \n        FROM ${this.tableName} \n        WHERE meta->'obsidianFile'->>'fileName' = $1\n        ORDER BY (meta->>'chunkIndex')::int ASC\n        `,\n        [fileName]\n      );\n\n      return result.rows.map((row) => ({\n        id: row.id,\n        text: row.text,\n        meta: row.meta as DocumentMetadata,\n      }));\n    } finally {\n      client.release();\n    }\n  }\n\n  async getStats(): Promise<{\n    totalChunks: number;\n    byContentType: Record<string, number>;\n    byFolder: Record<string, number>;\n    tagDistribution: Record<string, number>;\n  }> {\n    const client = await this.pool.connect();\n    try {\n      // Total chunks\n      const totalResult = await client.query(\n        `SELECT COUNT(*) as count FROM ${this.tableName}`\n      );\n\n      // By content type\n      const typeResult = await client.query(`\n        SELECT meta->>'contentType' as content_type, COUNT(*) as count \n        FROM ${this.tableName} \n        GROUP BY meta->>'contentType'\n      `);\n\n      // By folder (extract from file path)\n      const folderResult = await client.query(`\n        SELECT \n          CASE \n            WHEN meta->'obsidianFile'->>'filePath' LIKE '%/%' \n            THEN split_part(meta->'obsidianFile'->>'filePath', '/', 1)\n            ELSE 'Root'\n          END as folder,\n          COUNT(*) as count\n        FROM ${this.tableName}\n        GROUP BY folder\n      `);\n\n      // Tag distribution (flatten tags array)\n      const tagResult = await client.query(`\n        SELECT \n          jsonb_array_elements_text(meta->'obsidianFile'->'tags') as tag,\n          COUNT(*) as count\n        FROM ${this.tableName}\n        WHERE meta->'obsidianFile'->'tags' IS NOT NULL\n        GROUP BY tag\n        ORDER BY count DESC\n        LIMIT 20\n      `);\n\n      const byContentType: Record<string, number> = {};\n      typeResult.rows.forEach((row) => {\n        byContentType[row.content_type] = parseInt(row.count);\n      });\n\n      const byFolder: Record<string, number> = {};\n      folderResult.rows.forEach((row) => {\n        byFolder[row.folder] = parseInt(row.count);\n      });\n\n      const tagDistribution: Record<string, number> = {};\n      tagResult.rows.forEach((row) => {\n        tagDistribution[row.tag] = parseInt(row.count);\n      });\n\n      return {\n        totalChunks: parseInt(totalResult.rows[0].count),\n        byContentType,\n        byFolder,\n        tagDistribution,\n      };\n    } finally {\n      client.release();\n    }\n  }\n\n  async clearAll(): Promise<void> {\n    const client = await this.pool.connect();\n    try {\n      await client.query(`DELETE FROM ${this.tableName}`);\n      console.log(`🗑️  Cleared all data from ${this.tableName}`);\n    } finally {\n      client.release();\n    }\n  }\n\n  async deleteChunksByFile(fileName: string): Promise<void> {\n    const client = await this.pool.connect();\n    try {\n      const result = await client.query(\n        `\n        DELETE FROM ${this.tableName}\n        WHERE meta->'obsidianFile'->>'fileName' = $1\n        `,\n        [fileName]\n      );\n\n      console.log(\n        `🗑️  Deleted ${result.rowCount} chunks for file: ${fileName}`\n      );\n    } finally {\n      client.release();\n    }\n  }\n\n  async close(): Promise<void> {\n    await this.pool.end();\n  }\n}\n"},"src/lib/embeddings.ts":{"language":"typescript","mutants":[{"id":"177","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":61},"start":{"column":47,"line":30}}},{"id":"178","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":45},"start":{"column":5,"line":31}}},{"id":"179","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":29,"line":32},"start":{"column":13,"line":32}}},{"id":"180","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":23,"line":34},"start":{"column":13,"line":34}}},{"id":"181","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":31,"line":35},"start":{"column":15,"line":35}}},{"id":"182","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":40},"start":{"column":18,"line":36}}},{"id":"183","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":25,"line":37},"start":{"column":9,"line":37}}},{"id":"184","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":40,"line":38},"start":{"column":9,"line":38}}},{"id":"185","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":32,"line":39},"start":{"column":9,"line":39}}},{"id":"186","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":44},"start":{"column":20,"line":41}}},{"id":"187","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":35,"line":42},"start":{"column":9,"line":42}}},{"id":"188","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":47,"line":43},"start":{"column":9,"line":43}}},{"id":"189","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":60},"start":{"column":5,"line":46}}},{"id":"190","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":31,"line":47},"start":{"column":13,"line":47}}},{"id":"191","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":23,"line":49},"start":{"column":13,"line":49}}},{"id":"192","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":50},"start":{"column":15,"line":50}}},{"id":"193","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":55},"start":{"column":18,"line":51}}},{"id":"194","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":37,"line":52},"start":{"column":9,"line":52}}},{"id":"195","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":46,"line":53},"start":{"column":9,"line":53}}},{"id":"196","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":38,"line":54},"start":{"column":9,"line":54}}},{"id":"197","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":59},"start":{"column":20,"line":56}}},{"id":"198","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":41,"line":57},"start":{"column":9,"line":57}}},{"id":"199","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":45,"line":58},"start":{"column":9,"line":58}}},{"id":"200","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":66},"start":{"column":40,"line":63}}},{"id":"201","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":86},"start":{"column":55,"line":68}}},{"id":"202","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":85},"start":{"column":12,"line":69}}},{"id":"203","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":80,"line":71},"start":{"column":9,"line":71}}},{"id":"204","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":80,"line":71},"start":{"column":9,"line":71}}},{"id":"205","mutatorName":"LogicalOperator","replacement":"this.models.find(m => m.name === this.config.model) && this.models[0]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":80,"line":71},"start":{"column":9,"line":71}}},{"id":"206","mutatorName":"ArrowFunction","replacement":"() => undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":61,"line":71},"start":{"column":26,"line":71}}},{"id":"207","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":61,"line":71},"start":{"column":33,"line":71}}},{"id":"208","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":61,"line":71},"start":{"column":33,"line":71}}},{"id":"209","mutatorName":"EqualityOperator","replacement":"m.name !== this.config.model","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":61,"line":71},"start":{"column":33,"line":71}}},{"id":"210","mutatorName":"MethodExpression","replacement":"this.models","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":78,"line":72},"start":{"column":23,"line":72}}},{"id":"211","mutatorName":"ArrowFunction","replacement":"() => undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":77,"line":72},"start":{"column":42,"line":72}}},{"id":"212","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":77,"line":72},"start":{"column":49,"line":72}}},{"id":"213","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":77,"line":72},"start":{"column":49,"line":72}}},{"id":"214","mutatorName":"EqualityOperator","replacement":"m.name === this.config.model","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":77,"line":72},"start":{"column":49,"line":72}}},{"id":"215","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":80},"start":{"column":29,"line":73}}},{"id":"216","mutatorName":"ArrowFunction","replacement":"() => undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":65,"line":75},"start":{"column":31,"line":75}}},{"id":"217","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":65,"line":75},"start":{"column":38,"line":75}}},{"id":"218","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":65,"line":75},"start":{"column":38,"line":75}}},{"id":"219","mutatorName":"EqualityOperator","replacement":"m.name !== \"embeddinggemma\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":65,"line":75},"start":{"column":38,"line":75}}},{"id":"220","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":65,"line":75},"start":{"column":49,"line":75}}},{"id":"221","mutatorName":"ArrowFunction","replacement":"() => undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":69,"line":76},"start":{"column":35,"line":76}}},{"id":"222","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":69,"line":76},"start":{"column":42,"line":76}}},{"id":"223","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":69,"line":76},"start":{"column":42,"line":76}}},{"id":"224","mutatorName":"EqualityOperator","replacement":"m.name !== \"embeddinggemma\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":69,"line":76},"start":{"column":42,"line":76}}},{"id":"225","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":69,"line":76},"start":{"column":53,"line":76}}},{"id":"226","mutatorName":"ArrowFunction","replacement":"() => undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":74,"line":77},"start":{"column":40,"line":77}}},{"id":"227","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":74,"line":77},"start":{"column":47,"line":77}}},{"id":"228","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":74,"line":77},"start":{"column":47,"line":77}}},{"id":"229","mutatorName":"EqualityOperator","replacement":"m.name !== \"embeddinggemma\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":74,"line":77},"start":{"column":47,"line":77}}},{"id":"230","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":74,"line":77},"start":{"column":58,"line":77}}},{"id":"231","mutatorName":"ArrowFunction","replacement":"() => undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":73,"line":78},"start":{"column":39,"line":78}}},{"id":"232","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":73,"line":78},"start":{"column":46,"line":78}}},{"id":"233","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":73,"line":78},"start":{"column":46,"line":78}}},{"id":"234","mutatorName":"EqualityOperator","replacement":"m.name !== \"embeddinggemma\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":73,"line":78},"start":{"column":46,"line":78}}},{"id":"235","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":73,"line":78},"start":{"column":57,"line":78}}},{"id":"236","mutatorName":"ArrowFunction","replacement":"() => undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":66,"line":79},"start":{"column":32,"line":79}}},{"id":"237","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":66,"line":79},"start":{"column":39,"line":79}}},{"id":"238","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":66,"line":79},"start":{"column":39,"line":79}}},{"id":"239","mutatorName":"EqualityOperator","replacement":"m.name !== \"embeddinggemma\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":66,"line":79},"start":{"column":39,"line":79}}},{"id":"240","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":66,"line":79},"start":{"column":50,"line":79}}},{"id":"241","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":84},"start":{"column":26,"line":81}}},{"id":"242","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":127},"start":{"column":48,"line":88}}},{"id":"243","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":62,"line":92},"start":{"column":22,"line":92}}},{"id":"244","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":33,"line":93},"start":{"column":9,"line":93}}},{"id":"245","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":33,"line":93},"start":{"column":9,"line":93}}},{"id":"246","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":95},"start":{"column":35,"line":93}}},{"id":"247","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":123},"start":{"column":9,"line":97}}},{"id":"248","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":101},"start":{"column":43,"line":98}}},{"id":"249","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":67,"line":103},"start":{"column":11,"line":103}}},{"id":"250","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":67,"line":103},"start":{"column":11,"line":103}}},{"id":"251","mutatorName":"LogicalOperator","replacement":"!response.embeddings && response.embeddings.length === 0","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":67,"line":103},"start":{"column":11,"line":103}}},{"id":"252","mutatorName":"BooleanLiteral","replacement":"response.embeddings","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":31,"line":103},"start":{"column":11,"line":103}}},{"id":"253","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":67,"line":103},"start":{"column":35,"line":103}}},{"id":"254","mutatorName":"EqualityOperator","replacement":"response.embeddings.length !== 0","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":67,"line":103},"start":{"column":35,"line":103}}},{"id":"255","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":105},"start":{"column":69,"line":103}}},{"id":"256","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":61,"line":104},"start":{"column":25,"line":104}}},{"id":"257","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":53,"line":110},"start":{"column":11,"line":110}}},{"id":"258","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":53,"line":110},"start":{"column":11,"line":110}}},{"id":"259","mutatorName":"EqualityOperator","replacement":"embedding.length === this.config.dimension","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":53,"line":110},"start":{"column":11,"line":110}}},{"id":"260","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":114},"start":{"column":55,"line":110}}},{"id":"261","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":101,"line":112},"start":{"column":11,"line":112}}},{"id":"262","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":126},"start":{"column":21,"line":123}}},{"id":"263","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":55,"line":124},"start":{"column":21,"line":124}}},{"id":"264","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":51,"line":125},"start":{"column":23,"line":125}}},{"id":"265","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":145},"start":{"column":73,"line":129}}},{"id":"266","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":35,"line":130},"start":{"column":33,"line":130}}},{"id":"267","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":37,"line":132},"start":{"column":21,"line":132}}},{"id":"268","mutatorName":"EqualityOperator","replacement":"i <= texts.length","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":37,"line":132},"start":{"column":21,"line":132}}},{"id":"269","mutatorName":"EqualityOperator","replacement":"i >= texts.length","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":37,"line":132},"start":{"column":21,"line":132}}},{"id":"270","mutatorName":"AssignmentOperator","replacement":"i -= batchSize","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":53,"line":132},"start":{"column":39,"line":132}}},{"id":"271","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":142},"start":{"column":55,"line":132}}},{"id":"272","mutatorName":"MethodExpression","replacement":"texts","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":50,"line":133},"start":{"column":21,"line":133}}},{"id":"273","mutatorName":"ArithmeticOperator","replacement":"i - batchSize","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":49,"line":133},"start":{"column":36,"line":133}}},{"id":"274","mutatorName":"ArrowFunction","replacement":"() => undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":60,"line":134},"start":{"column":34,"line":134}}},{"id":"275","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":39,"line":139},"start":{"column":11,"line":139}}},{"id":"276","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":39,"line":139},"start":{"column":11,"line":139}}},{"id":"277","mutatorName":"EqualityOperator","replacement":"i + batchSize <= texts.length","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":39,"line":139},"start":{"column":11,"line":139}}},{"id":"278","mutatorName":"EqualityOperator","replacement":"i + batchSize >= texts.length","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":39,"line":139},"start":{"column":11,"line":139}}},{"id":"279","mutatorName":"ArithmeticOperator","replacement":"i - batchSize","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":139},"start":{"column":11,"line":139}}},{"id":"280","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":141},"start":{"column":41,"line":139}}},{"id":"281","mutatorName":"ArrowFunction","replacement":"() => undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":64,"line":140},"start":{"column":27,"line":140}}},{"id":"282","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":231},"start":{"column":6,"line":155}}},{"id":"283","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":63,"line":162},"start":{"column":22,"line":162}}},{"id":"284","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":33,"line":163},"start":{"column":9,"line":163}}},{"id":"285","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":33,"line":163},"start":{"column":9,"line":163}}},{"id":"286","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":169},"start":{"column":35,"line":163}}},{"id":"287","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":168},"start":{"column":14,"line":164}}},{"id":"288","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":195},"start":{"column":9,"line":171}}},{"id":"289","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":194},"start":{"column":14,"line":190}}},{"id":"290","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":230},"start":{"column":21,"line":195}}},{"id":"291","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":73,"line":197},"start":{"column":9,"line":197}}},{"id":"292","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":222},"start":{"column":65,"line":201}}},{"id":"293","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":10,"line":219},"start":{"column":13,"line":202}}},{"id":"294","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":12,"line":218},"start":{"column":18,"line":214}}},{"id":"295","mutatorName":"ArithmeticOperator","replacement":"confidence / 0.8","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":41,"line":217},"start":{"column":25,"line":217}}},{"id":"296","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":10,"line":221},"start":{"column":33,"line":219}}},{"id":"297","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":74,"line":220},"start":{"column":24,"line":220}}},{"id":"298","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":15,"line":228},"start":{"column":9,"line":225}}},{"id":"299","mutatorName":"MethodExpression","replacement":"normalizedText","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":10,"line":228},"start":{"column":50,"line":225}}},{"id":"300","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":252},"start":{"column":21,"line":236}}},{"id":"301","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":71,"line":238},"start":{"column":9,"line":238}}},{"id":"302","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":71,"line":238},"start":{"column":9,"line":238}}},{"id":"303","mutatorName":"LogicalOperator","replacement":"contentType || this.strategy.contentTypeOverrides[contentType]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":71,"line":238},"start":{"column":9,"line":238}}},{"id":"304","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":240},"start":{"column":73,"line":238}}},{"id":"305","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":19,"line":243},"start":{"column":9,"line":243}}},{"id":"306","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":19,"line":243},"start":{"column":9,"line":243}}},{"id":"307","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":248},"start":{"column":21,"line":243}}},{"id":"308","mutatorName":"ArrowFunction","replacement":"() => undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":70,"line":245},"start":{"column":9,"line":245}}},{"id":"309","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":70,"line":245},"start":{"column":16,"line":245}}},{"id":"310","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":70,"line":245},"start":{"column":16,"line":245}}},{"id":"311","mutatorName":"LogicalOperator","replacement":"m.domain === domainHint && m.name.includes(domainHint)","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":70,"line":245},"start":{"column":16,"line":245}}},{"id":"312","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":39,"line":245},"start":{"column":16,"line":245}}},{"id":"313","mutatorName":"EqualityOperator","replacement":"m.domain !== domainHint","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":39,"line":245},"start":{"column":16,"line":245}}},{"id":"314","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":22,"line":247},"start":{"column":11,"line":247}}},{"id":"315","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":22,"line":247},"start":{"column":11,"line":247}}},{"id":"316","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":273},"start":{"column":60,"line":254}}},{"id":"317","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":258},"start":{"column":41,"line":255}}},{"id":"318","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":65,"line":260},"start":{"column":9,"line":260}}},{"id":"319","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":65,"line":260},"start":{"column":9,"line":260}}},{"id":"320","mutatorName":"LogicalOperator","replacement":"!response.embeddings && response.embeddings.length === 0","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":65,"line":260},"start":{"column":9,"line":260}}},{"id":"321","mutatorName":"BooleanLiteral","replacement":"response.embeddings","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":29,"line":260},"start":{"column":9,"line":260}}},{"id":"322","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":65,"line":260},"start":{"column":33,"line":260}}},{"id":"323","mutatorName":"EqualityOperator","replacement":"response.embeddings.length !== 0","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":65,"line":260},"start":{"column":33,"line":260}}},{"id":"324","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":262},"start":{"column":67,"line":260}}},{"id":"325","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":59,"line":261},"start":{"column":23,"line":261}}},{"id":"326","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":51,"line":267},"start":{"column":9,"line":267}}},{"id":"327","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":51,"line":267},"start":{"column":9,"line":267}}},{"id":"328","mutatorName":"EqualityOperator","replacement":"embedding.length === this.config.dimension","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":51,"line":267},"start":{"column":9,"line":267}}},{"id":"329","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":270},"start":{"column":53,"line":267}}},{"id":"330","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":294},"start":{"column":13,"line":278}}},{"id":"331","mutatorName":"ArrowFunction","replacement":"() => undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":73,"line":280},"start":{"column":50,"line":280}}},{"id":"332","mutatorName":"ArithmeticOperator","replacement":"sum - x * x","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":73,"line":280},"start":{"column":62,"line":280}}},{"id":"333","mutatorName":"ArithmeticOperator","replacement":"x / x","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":73,"line":280},"start":{"column":68,"line":280}}},{"id":"334","mutatorName":"ArithmeticOperator","replacement":"embedding.filter(x => Math.abs(x) < 0.01).length * embedding.length","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":76,"line":282},"start":{"column":7,"line":282}}},{"id":"335","mutatorName":"MethodExpression","replacement":"embedding","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":50,"line":282},"start":{"column":7,"line":282}}},{"id":"336","mutatorName":"ArrowFunction","replacement":"() => undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":49,"line":282},"start":{"column":24,"line":282}}},{"id":"337","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":49,"line":282},"start":{"column":31,"line":282}}},{"id":"338","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":49,"line":282},"start":{"column":31,"line":282}}},{"id":"339","mutatorName":"EqualityOperator","replacement":"Math.abs(x) <= 0.01","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":49,"line":282},"start":{"column":31,"line":282}}},{"id":"340","mutatorName":"EqualityOperator","replacement":"Math.abs(x) >= 0.01","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":49,"line":282},"start":{"column":31,"line":282}}},{"id":"341","mutatorName":"MethodExpression","replacement":"Math.max(magnitude / 2.0, 1.0)","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":52,"line":285},"start":{"column":22,"line":285}}},{"id":"342","mutatorName":"ArithmeticOperator","replacement":"magnitude * 2.0","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":46,"line":285},"start":{"column":31,"line":285}}},{"id":"343","mutatorName":"AssignmentOperator","replacement":"confidence /= 1.0 - sparsity * 0.5","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":39,"line":286},"start":{"column":5,"line":286}}},{"id":"344","mutatorName":"ArithmeticOperator","replacement":"1.0 + sparsity * 0.5","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":39,"line":286},"start":{"column":19,"line":286}}},{"id":"345","mutatorName":"ArithmeticOperator","replacement":"sparsity / 0.5","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":39,"line":286},"start":{"column":25,"line":286}}},{"id":"346","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":50,"line":289},"start":{"column":9,"line":289}}},{"id":"347","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":50,"line":289},"start":{"column":9,"line":289}}},{"id":"348","mutatorName":"LogicalOperator","replacement":"text.includes(\"[[\") && text.includes(\"#\")","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":50,"line":289},"start":{"column":9,"line":289}}},{"id":"349","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":27,"line":289},"start":{"column":23,"line":289}}},{"id":"350","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":49,"line":289},"start":{"column":46,"line":289}}},{"id":"351","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":291},"start":{"column":52,"line":289}}},{"id":"352","mutatorName":"AssignmentOperator","replacement":"confidence /= 1.1","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":24,"line":290},"start":{"column":7,"line":290}}},{"id":"353","mutatorName":"MethodExpression","replacement":"Math.min(0.1, Math.min(1.0, confidence))","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":52,"line":293},"start":{"column":12,"line":293}}},{"id":"354","mutatorName":"MethodExpression","replacement":"Math.max(1.0, confidence)","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":51,"line":293},"start":{"column":26,"line":293}}},{"id":"355","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":318},"start":{"column":6,"line":300}}},{"id":"356","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":310},"start":{"column":9,"line":301}}},{"id":"357","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":79,"line":302},"start":{"column":24,"line":302}}},{"id":"358","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":309},"start":{"column":14,"line":305}}},{"id":"359","mutatorName":"BooleanLiteral","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":22,"line":306},"start":{"column":18,"line":306}}},{"id":"360","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":317},"start":{"column":21,"line":310}}},{"id":"361","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":64,"line":311},"start":{"column":21,"line":311}}},{"id":"362","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":316},"start":{"column":14,"line":312}}},{"id":"363","mutatorName":"BooleanLiteral","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":23,"line":313},"start":{"column":18,"line":313}}},{"id":"364","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":322},"start":{"column":22,"line":320}}},{"id":"365","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":331},"start":{"column":65,"line":324}}},{"id":"366","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":57,"line":325},"start":{"column":21,"line":325}}},{"id":"367","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":49,"line":326},"start":{"column":17,"line":326}}},{"id":"368","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":330},"start":{"column":51,"line":326}}},{"id":"369","mutatorName":"ArrowFunction","replacement":"() => undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":64,"line":328},"start":{"column":51,"line":328}}},{"id":"370","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":335},"start":{"column":43,"line":333}}},{"id":"371","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":32,"line":334},"start":{"column":12,"line":334}}},{"id":"372","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":339},"start":{"column":42,"line":337}}},{"id":"373","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":338},"start":{"column":12,"line":338}}},{"id":"374","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":346},"start":{"column":53,"line":341}}},{"id":"375","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":345},"start":{"column":12,"line":342}}},{"id":"376","mutatorName":"MethodExpression","replacement":"Array.from(this.cache.keys())","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":55,"line":344},"start":{"column":13,"line":344}}}],"source":"import ollama from \"ollama\";\nimport { EmbeddingConfig } from \"../types/index.js\";\nimport { normalize, normalizeVector } from \"./utils.js\";\n\nexport interface EmbeddingModel {\n  name: string;\n  dimension: number;\n  type: \"semantic\" | \"keyword\" | \"hybrid\";\n  domain?: string;\n  strengths: string[];\n  limitations: string[];\n}\n\nexport interface EmbeddingStrategy {\n  primaryModel: EmbeddingModel;\n  fallbackModels: EmbeddingModel[];\n  contentTypeOverrides: Record<string, EmbeddingModel>;\n  qualityThresholds: {\n    minSimilarity: number;\n    maxResults: number;\n  };\n}\n\nexport class ObsidianEmbeddingService {\n  private config: EmbeddingConfig;\n  private cache: Map<string, number[]> = new Map();\n  private strategy: EmbeddingStrategy;\n\n  // Obsidian-optimized embedding models\n  private readonly models: EmbeddingModel[] = [\n    {\n      name: \"embeddinggemma\",\n      dimension: 768,\n      type: \"semantic\",\n      domain: \"knowledge-base\",\n      strengths: [\n        \"Fast inference\",\n        \"Good for knowledge management\",\n        \"Handles markdown well\",\n      ],\n      limitations: [\n        \"Limited domain knowledge\",\n        \"May not capture technical terms well\",\n      ],\n    },\n    {\n      name: \"nomic-embed-text\",\n      dimension: 768,\n      type: \"semantic\",\n      domain: \"general\",\n      strengths: [\n        \"Excellent for general text\",\n        \"Good performance on knowledge tasks\",\n        \"Handles long documents well\",\n      ],\n      limitations: [\n        \"Larger model, slower inference\",\n        \"May be overkill for simple queries\",\n      ],\n    },\n  ];\n\n  constructor(config: EmbeddingConfig) {\n    this.config = config;\n    this.strategy = this.createObsidianStrategy();\n  }\n\n  private createObsidianStrategy(): EmbeddingStrategy {\n    return {\n      primaryModel:\n        this.models.find((m) => m.name === this.config.model) || this.models[0],\n      fallbackModels: this.models.filter((m) => m.name !== this.config.model),\n      contentTypeOverrides: {\n        // Obsidian-specific content type optimizations\n        moc: this.models.find((m) => m.name === \"embeddinggemma\")!,\n        article: this.models.find((m) => m.name === \"embeddinggemma\")!,\n        conversation: this.models.find((m) => m.name === \"embeddinggemma\")!,\n        \"book-note\": this.models.find((m) => m.name === \"embeddinggemma\")!,\n        note: this.models.find((m) => m.name === \"embeddinggemma\")!,\n      },\n      qualityThresholds: {\n        minSimilarity: 0.3,\n        maxResults: 30,\n      },\n    };\n  }\n\n  async embed(text: string): Promise<number[]> {\n    const normalizedText = normalize(text);\n\n    // Check cache first\n    const cacheKey = `${this.config.model}:${normalizedText}`;\n    if (this.cache.has(cacheKey)) {\n      return this.cache.get(cacheKey)!;\n    }\n\n    try {\n      const response = await ollama.embed({\n        model: this.config.model,\n        input: normalizedText,\n      });\n\n      if (!response.embeddings || response.embeddings.length === 0) {\n        throw new Error(\"No embeddings returned from Ollama\");\n      }\n\n      const embedding = response.embeddings[0];\n\n      // Validate dimension\n      if (embedding.length !== this.config.dimension) {\n        throw new Error(\n          `Embedding dimension mismatch: expected ${this.config.dimension}, got ${embedding.length}`\n        );\n      }\n\n      // Normalize the embedding vector for consistent cosine similarity scores\n      const normalizedEmbedding = normalizeVector(embedding);\n\n      // Cache the normalized result\n      this.cache.set(cacheKey, normalizedEmbedding);\n\n      return normalizedEmbedding;\n    } catch (error) {\n      console.error(`❌ Failed to embed text: ${error}`);\n      throw new Error(`Embedding failed: ${error}`);\n    }\n  }\n\n  async embedBatch(texts: string[], batchSize = 5): Promise<number[][]> {\n    const results: number[][] = [];\n\n    for (let i = 0; i < texts.length; i += batchSize) {\n      const batch = texts.slice(i, i + batchSize);\n      const promises = batch.map((text) => this.embed(text));\n      const batchResults = await Promise.all(promises);\n      results.push(...batchResults);\n\n      // Rate limiting - small delay between batches\n      if (i + batchSize < texts.length) {\n        await new Promise((resolve) => setTimeout(resolve, 100));\n      }\n    }\n\n    return results;\n  }\n\n  async embedWithStrategy(\n    text: string,\n    contentType?: string,\n    domainHint?: string\n  ): Promise<{\n    embedding: number[];\n    model: EmbeddingModel;\n    confidence: number;\n  }> {\n    const normalizedText = normalize(text);\n\n    // Select appropriate model based on content type and domain\n    const selectedModel = this.selectModelForContent(contentType, domainHint);\n\n    // Check cache with model-specific key\n    const cacheKey = `${selectedModel.name}:${normalizedText}`;\n    if (this.cache.has(cacheKey)) {\n      return {\n        embedding: this.cache.get(cacheKey)!,\n        model: selectedModel,\n        confidence: 1.0, // Cached result\n      };\n    }\n\n    try {\n      // Temporarily switch model if different from current\n      const originalModel = this.config.model;\n      this.config.model = selectedModel.name;\n\n      const embedding = await this.embedCore(normalizedText);\n\n      // Restore original model\n      this.config.model = originalModel;\n\n      // Cache with model-specific key\n      this.cache.set(cacheKey, embedding);\n\n      // Calculate confidence based on embedding quality metrics\n      const confidence = this.calculateEmbeddingConfidence(\n        embedding,\n        normalizedText\n      );\n\n      return {\n        embedding,\n        model: selectedModel,\n        confidence,\n      };\n    } catch (error) {\n      console.warn(\n        `Failed to embed with ${selectedModel.name}, trying fallback...`\n      );\n\n      // Try fallback models\n      for (const fallbackModel of this.strategy.fallbackModels) {\n        try {\n          const originalModel = this.config.model;\n          this.config.model = fallbackModel.name;\n\n          const embedding = await this.embedCore(normalizedText);\n          this.config.model = originalModel;\n\n          const confidence = this.calculateEmbeddingConfidence(\n            embedding,\n            normalizedText\n          );\n\n          return {\n            embedding,\n            model: fallbackModel,\n            confidence: confidence * 0.8, // Penalty for fallback\n          };\n        } catch (fallbackError) {\n          console.warn(`Fallback model ${fallbackModel.name} also failed`);\n        }\n      }\n\n      throw new Error(\n        `All embedding models failed for text: ${normalizedText.slice(\n          0,\n          50\n        )}...`\n      );\n    }\n  }\n\n  private selectModelForContent(\n    contentType?: string,\n    domainHint?: string\n  ): EmbeddingModel {\n    // Content-type specific overrides for Obsidian\n    if (contentType && this.strategy.contentTypeOverrides[contentType]) {\n      return this.strategy.contentTypeOverrides[contentType];\n    }\n\n    // Domain-specific selection\n    if (domainHint) {\n      const domainModel = this.models.find(\n        (m) => m.domain === domainHint || m.name.includes(domainHint)\n      );\n      if (domainModel) return domainModel;\n    }\n\n    // Default to primary model\n    return this.strategy.primaryModel;\n  }\n\n  private async embedCore(text: string): Promise<number[]> {\n    const response = await ollama.embed({\n      model: this.config.model,\n      input: text,\n    });\n\n    if (!response.embeddings || response.embeddings.length === 0) {\n      throw new Error(\"No embeddings returned from Ollama\");\n    }\n\n    const embedding = response.embeddings[0];\n\n    // Validate dimension (may vary by model)\n    if (embedding.length !== this.config.dimension) {\n      // Update config dimension if model uses different size\n      this.config.dimension = embedding.length;\n    }\n\n    return normalizeVector(embedding);\n  }\n\n  private calculateEmbeddingConfidence(\n    embedding: number[],\n    text: string\n  ): number {\n    // Simple confidence metric based on embedding properties\n    const magnitude = Math.sqrt(embedding.reduce((sum, x) => sum + x * x, 0));\n    const sparsity =\n      embedding.filter((x) => Math.abs(x) < 0.01).length / embedding.length;\n\n    // High magnitude and low sparsity indicate good embeddings\n    let confidence = Math.min(magnitude / 2.0, 1.0); // Normalized magnitude\n    confidence *= 1.0 - sparsity * 0.5; // Penalty for sparsity\n\n    // Boost confidence for Obsidian-specific content patterns\n    if (text.includes(\"[[\") || text.includes(\"#\")) {\n      confidence *= 1.1; // Boost for wikilinks and tags\n    }\n\n    return Math.max(0.1, Math.min(1.0, confidence));\n  }\n\n  async testConnection(): Promise<{\n    success: boolean;\n    dimension: number;\n    model: string;\n  }> {\n    try {\n      const testText = \"This is a test embedding for Obsidian knowledge base.\";\n      const embedding = await this.embed(testText);\n\n      return {\n        success: true,\n        dimension: embedding.length,\n        model: this.config.model,\n      };\n    } catch (error) {\n      console.error(`❌ Embedding service test failed: ${error}`);\n      return {\n        success: false,\n        dimension: 0,\n        model: this.config.model,\n      };\n    }\n  }\n\n  clearCache(): void {\n    this.cache.clear();\n  }\n\n  updateStrategy(newStrategy: Partial<EmbeddingStrategy>): void {\n    this.strategy = { ...this.strategy, ...newStrategy };\n    console.log(`🔄 Updated embedding strategy:`, {\n      primary: this.strategy.primaryModel.name,\n      fallbacks: this.strategy.fallbackModels.map((m) => m.name),\n      overrides: Object.keys(this.strategy.contentTypeOverrides),\n    });\n  }\n\n  getCurrentStrategy(): EmbeddingStrategy {\n    return { ...this.strategy };\n  }\n\n  getAvailableModels(): EmbeddingModel[] {\n    return [...this.models];\n  }\n\n  getCacheStats(): { size: number; keys: string[] } {\n    return {\n      size: this.cache.size,\n      keys: Array.from(this.cache.keys()).slice(0, 10), // First 10 keys for debugging\n    };\n  }\n}\n"},"src/lib/obsidian-models.ts":{"language":"typescript","mutants":[{"id":"377","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":104},"start":{"column":49,"line":89}}},{"id":"378","mutatorName":"MethodExpression","replacement":"content.replace(/^---[\\s\\S]*?---\\n?/m, \"\").replace(/\\[\\[([^\\]|]+)(?:\\|([^\\]]+))?\\]\\]/g, (_, target, display) => display || target).replace(/\\[([^\\]]+)\\]\\([^)]+\\)/g, \"$1\").replace(/(\\*\\*|__)(.*?)\\1/g, \"$1\").replace(/(\\*|_)(.*?)\\1/g, \"$1\").replace(/`([^`]+)`/g, \"$1\").replace(/~~(.*?)~~/g, \"$1\").replace(/^#{1,6}\\s+(.*)$/gm, \"$1\").replace(/\\n{3,}/g, \"\\n\\n\")","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":14,"line":103},"start":{"column":12,"line":90}}},{"id":"379","mutatorName":"Regex","replacement":"/---[\\s\\S]*?---\\n?/m","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":37,"line":91},"start":{"column":16,"line":91}}},{"id":"380","mutatorName":"Regex","replacement":"/^---[\\s\\S]---\\n?/m","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":37,"line":91},"start":{"column":16,"line":91}}},{"id":"381","mutatorName":"Regex","replacement":"/^---[^\\s\\S]*?---\\n?/m","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":37,"line":91},"start":{"column":16,"line":91}}},{"id":"382","mutatorName":"Regex","replacement":"/^---[\\S\\S]*?---\\n?/m","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":37,"line":91},"start":{"column":16,"line":91}}},{"id":"383","mutatorName":"Regex","replacement":"/^---[\\s\\s]*?---\\n?/m","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":37,"line":91},"start":{"column":16,"line":91}}},{"id":"384","mutatorName":"Regex","replacement":"/^---[\\s\\S]*?---\\n/m","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":37,"line":91},"start":{"column":16,"line":91}}},{"id":"385","mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":41,"line":91},"start":{"column":39,"line":91}}},{"id":"386","mutatorName":"Regex","replacement":"/\\[\\[([^\\]|])(?:\\|([^\\]]+))?\\]\\]/g","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":44,"line":93},"start":{"column":9,"line":93}}},{"id":"387","mutatorName":"Regex","replacement":"/\\[\\[([\\]|]+)(?:\\|([^\\]]+))?\\]\\]/g","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":44,"line":93},"start":{"column":9,"line":93}}},{"id":"388","mutatorName":"Regex","replacement":"/\\[\\[([^\\]|]+)(?:\\|([^\\]]+))\\]\\]/g","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":44,"line":93},"start":{"column":9,"line":93}}},{"id":"389","mutatorName":"Regex","replacement":"/\\[\\[([^\\]|]+)(?:\\|([^\\]]))?\\]\\]/g","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":44,"line":93},"start":{"column":9,"line":93}}},{"id":"390","mutatorName":"Regex","replacement":"/\\[\\[([^\\]|]+)(?:\\|([\\]]+))?\\]\\]/g","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":44,"line":93},"start":{"column":9,"line":93}}},{"id":"391","mutatorName":"ArrowFunction","replacement":"() => undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":50,"line":94},"start":{"column":9,"line":94}}},{"id":"392","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":50,"line":94},"start":{"column":33,"line":94}}},{"id":"393","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":50,"line":94},"start":{"column":33,"line":94}}},{"id":"394","mutatorName":"LogicalOperator","replacement":"display && target","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":50,"line":94},"start":{"column":33,"line":94}}},{"id":"395","mutatorName":"Regex","replacement":"/\\[([^\\]])\\]\\([^)]+\\)/g","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":40,"line":96},"start":{"column":16,"line":96}}},{"id":"396","mutatorName":"Regex","replacement":"/\\[([\\]]+)\\]\\([^)]+\\)/g","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":40,"line":96},"start":{"column":16,"line":96}}},{"id":"397","mutatorName":"Regex","replacement":"/\\[([^\\]]+)\\]\\([^)]\\)/g","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":40,"line":96},"start":{"column":16,"line":96}}},{"id":"398","mutatorName":"Regex","replacement":"/\\[([^\\]]+)\\]\\([)]+\\)/g","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":40,"line":96},"start":{"column":16,"line":96}}},{"id":"399","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":46,"line":96},"start":{"column":42,"line":96}}},{"id":"400","mutatorName":"Regex","replacement":"/(\\*\\*|__)(.)\\1/g","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":35,"line":97},"start":{"column":16,"line":97}}},{"id":"401","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":41,"line":97},"start":{"column":37,"line":97}}},{"id":"402","mutatorName":"Regex","replacement":"/(\\*|_)(.)\\1/g","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":32,"line":98},"start":{"column":16,"line":98}}},{"id":"403","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":38,"line":98},"start":{"column":34,"line":98}}},{"id":"404","mutatorName":"Regex","replacement":"/`([^`])`/g","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":99},"start":{"column":16,"line":99}}},{"id":"405","mutatorName":"Regex","replacement":"/`([`]+)`/g","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":99},"start":{"column":16,"line":99}}},{"id":"406","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":34,"line":99},"start":{"column":30,"line":99}}},{"id":"407","mutatorName":"Regex","replacement":"/~~(.)~~/g","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":100},"start":{"column":16,"line":100}}},{"id":"408","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":34,"line":100},"start":{"column":30,"line":100}}},{"id":"409","mutatorName":"Regex","replacement":"/#{1,6}\\s+(.*)$/gm","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":35,"line":101},"start":{"column":16,"line":101}}},{"id":"410","mutatorName":"Regex","replacement":"/^#{1,6}\\s+(.*)/gm","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":35,"line":101},"start":{"column":16,"line":101}}},{"id":"411","mutatorName":"Regex","replacement":"/^#\\s+(.*)$/gm","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":35,"line":101},"start":{"column":16,"line":101}}},{"id":"412","mutatorName":"Regex","replacement":"/^#{1,6}\\s(.*)$/gm","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":35,"line":101},"start":{"column":16,"line":101}}},{"id":"413","mutatorName":"Regex","replacement":"/^#{1,6}\\S+(.*)$/gm","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":35,"line":101},"start":{"column":16,"line":101}}},{"id":"414","mutatorName":"Regex","replacement":"/^#{1,6}\\s+(.)$/gm","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":35,"line":101},"start":{"column":16,"line":101}}},{"id":"415","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":41,"line":101},"start":{"column":37,"line":101}}},{"id":"416","mutatorName":"Regex","replacement":"/\\n/g","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":25,"line":102},"start":{"column":16,"line":102}}},{"id":"417","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":33,"line":102},"start":{"column":27,"line":102}}},{"id":"418","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":116},"start":{"column":54,"line":106}}},{"id":"419","mutatorName":"Regex","replacement":"/\\[\\[([^\\]|])(?:\\|([^\\]]+))?\\]\\]/g","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":62,"line":107},"start":{"column":27,"line":107}}},{"id":"420","mutatorName":"Regex","replacement":"/\\[\\[([\\]|]+)(?:\\|([^\\]]+))?\\]\\]/g","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":62,"line":107},"start":{"column":27,"line":107}}},{"id":"421","mutatorName":"Regex","replacement":"/\\[\\[([^\\]|]+)(?:\\|([^\\]]+))\\]\\]/g","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":62,"line":107},"start":{"column":27,"line":107}}},{"id":"422","mutatorName":"Regex","replacement":"/\\[\\[([^\\]|]+)(?:\\|([^\\]]))?\\]\\]/g","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":62,"line":107},"start":{"column":27,"line":107}}},{"id":"423","mutatorName":"Regex","replacement":"/\\[\\[([^\\]|]+)(?:\\|([\\]]+))?\\]\\]/g","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":62,"line":107},"start":{"column":27,"line":107}}},{"id":"424","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":31,"line":108},"start":{"column":29,"line":108}}},{"id":"425","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":58,"line":111},"start":{"column":12,"line":111}}},{"id":"426","mutatorName":"EqualityOperator","replacement":"(match = wikilinkRegex.exec(content)) === null","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":58,"line":111},"start":{"column":12,"line":111}}},{"id":"427","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":113},"start":{"column":60,"line":111}}},{"id":"428","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":38,"line":112},"start":{"column":18,"line":112}}},{"id":"429","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":38,"line":112},"start":{"column":18,"line":112}}},{"id":"430","mutatorName":"LogicalOperator","replacement":"match[2] && match[1]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":38,"line":112},"start":{"column":18,"line":112}}},{"id":"431","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":31,"line":115},"start":{"column":12,"line":115}}},{"id":"432","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":128},"start":{"column":49,"line":118}}},{"id":"433","mutatorName":"Regex","replacement":"/#([a-zA-Z0-9_-])/g","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":42,"line":119},"start":{"column":22,"line":119}}},{"id":"434","mutatorName":"Regex","replacement":"/#([^a-zA-Z0-9_-]+)/g","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":42,"line":119},"start":{"column":22,"line":119}}},{"id":"435","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":30,"line":120},"start":{"column":28,"line":120}}},{"id":"436","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":53,"line":123},"start":{"column":12,"line":123}}},{"id":"437","mutatorName":"EqualityOperator","replacement":"(match = tagRegex.exec(content)) === null","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":53,"line":123},"start":{"column":12,"line":123}}},{"id":"438","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":125},"start":{"column":55,"line":123}}},{"id":"439","mutatorName":"ArrayDeclaration","replacement":"[]","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":30,"line":127},"start":{"column":12,"line":127}}},{"id":"440","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":154},"start":{"column":65,"line":130}}},{"id":"441","mutatorName":"Regex","replacement":"/---\\n([\\s\\S]*?)\\n---/","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":53,"line":131},"start":{"column":30,"line":131}}},{"id":"442","mutatorName":"Regex","replacement":"/^---\\n([\\s\\S])\\n---/","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":53,"line":131},"start":{"column":30,"line":131}}},{"id":"443","mutatorName":"Regex","replacement":"/^---\\n([^\\s\\S]*?)\\n---/","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":53,"line":131},"start":{"column":30,"line":131}}},{"id":"444","mutatorName":"Regex","replacement":"/^---\\n([\\S\\S]*?)\\n---/","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":53,"line":131},"start":{"column":30,"line":131}}},{"id":"445","mutatorName":"Regex","replacement":"/^---\\n([\\s\\s]*?)\\n---/","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":53,"line":131},"start":{"column":30,"line":131}}},{"id":"446","mutatorName":"BooleanLiteral","replacement":"match","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":15,"line":134},"start":{"column":9,"line":134}}},{"id":"447","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":15,"line":134},"start":{"column":9,"line":134}}},{"id":"448","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":15,"line":134},"start":{"column":9,"line":134}}},{"id":"449","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":151},"start":{"column":9,"line":136}}},{"id":"450","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":40,"line":139},"start":{"column":36,"line":139}}},{"id":"451","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":148},"start":{"column":33,"line":141}}},{"id":"452","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":52,"line":142},"start":{"column":49,"line":142}}},{"id":"453","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":41,"line":143},"start":{"column":13,"line":143}}},{"id":"454","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":41,"line":143},"start":{"column":13,"line":143}}},{"id":"455","mutatorName":"LogicalOperator","replacement":"key || valueParts.length > 0","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":41,"line":143},"start":{"column":13,"line":143}}},{"id":"456","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":41,"line":143},"start":{"column":20,"line":143}}},{"id":"457","mutatorName":"EqualityOperator","replacement":"valueParts.length >= 0","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":41,"line":143},"start":{"column":20,"line":143}}},{"id":"458","mutatorName":"EqualityOperator","replacement":"valueParts.length <= 0","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":41,"line":143},"start":{"column":20,"line":143}}},{"id":"459","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":10,"line":147},"start":{"column":43,"line":143}}},{"id":"460","mutatorName":"MethodExpression","replacement":"valueParts.join(\":\")","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":52,"line":144},"start":{"column":25,"line":144}}},{"id":"461","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":44,"line":144},"start":{"column":41,"line":144}}},{"id":"462","mutatorName":"MethodExpression","replacement":"key","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":33,"line":146},"start":{"column":23,"line":146}}},{"id":"463","mutatorName":"Regex","replacement":"/[\"']|[\"']$/g","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":65,"line":146},"start":{"column":51,"line":146}}},{"id":"464","mutatorName":"Regex","replacement":"/^[^\"']|[\"']$/g","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":65,"line":146},"start":{"column":51,"line":146}}},{"id":"465","mutatorName":"Regex","replacement":"/^[\"']|[\"']/g","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":65,"line":146},"start":{"column":51,"line":146}}},{"id":"466","mutatorName":"Regex","replacement":"/^[\"']|[^\"']$/g","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":65,"line":146},"start":{"column":51,"line":146}}},{"id":"467","mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":69,"line":146},"start":{"column":67,"line":146}}},{"id":"468","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":153},"start":{"column":13,"line":151}}},{"id":"469","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":159},"start":{"column":56,"line":156}}},{"id":"470","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":38,"line":158},"start":{"column":30,"line":158}}},{"id":"471","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":68,"line":158},"start":{"column":63,"line":158}}},{"id":"472","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":181},"start":{"column":13,"line":165}}},{"id":"473","mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":56,"line":166},"start":{"column":54,"line":166}}},{"id":"474","mutatorName":"Regex","replacement":"/\\/+/","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":72,"line":166},"start":{"column":66,"line":166}}},{"id":"475","mutatorName":"Regex","replacement":"/^\\//","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":72,"line":166},"start":{"column":66,"line":166}}},{"id":"476","mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":76,"line":166},"start":{"column":74,"line":166}}},{"id":"477","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":39,"line":169},"start":{"column":9,"line":169}}},{"id":"478","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":39,"line":169},"start":{"column":9,"line":169}}},{"id":"479","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":38,"line":169},"start":{"column":31,"line":169}}},{"id":"480","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":53,"line":169},"start":{"column":48,"line":169}}},{"id":"481","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":43,"line":170},"start":{"column":9,"line":170}}},{"id":"482","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":43,"line":170},"start":{"column":9,"line":170}}},{"id":"483","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":42,"line":170},"start":{"column":31,"line":170}}},{"id":"484","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":61,"line":170},"start":{"column":52,"line":170}}},{"id":"485","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":42,"line":171},"start":{"column":9,"line":171}}},{"id":"486","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":42,"line":171},"start":{"column":9,"line":171}}},{"id":"487","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":41,"line":171},"start":{"column":31,"line":171}}},{"id":"488","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":65,"line":171},"start":{"column":51,"line":171}}},{"id":"489","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":40,"line":172},"start":{"column":9,"line":172}}},{"id":"490","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":40,"line":172},"start":{"column":9,"line":172}}},{"id":"491","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":39,"line":172},"start":{"column":31,"line":172}}},{"id":"492","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":60,"line":172},"start":{"column":49,"line":172}}},{"id":"493","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":44,"line":173},"start":{"column":9,"line":173}}},{"id":"494","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":44,"line":173},"start":{"column":9,"line":173}}},{"id":"495","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":43,"line":173},"start":{"column":31,"line":173}}},{"id":"496","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":63,"line":173},"start":{"column":53,"line":173}}},{"id":"497","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":25,"line":176},"start":{"column":9,"line":176}}},{"id":"498","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":25,"line":176},"start":{"column":9,"line":176}}},{"id":"499","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":178},"start":{"column":27,"line":176}}},{"id":"500","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":18,"line":180},"start":{"column":12,"line":180}}}],"source":"/**\n * Obsidian Data Contracts and API Specifications\n * Defines the data structures and contracts for Obsidian vault processing\n */\n\n// =============================================================================\n// CORE DATA STRUCTURES\n// =============================================================================\n\n/**\n * Represents a complete Obsidian document with all metadata\n */\nexport interface ObsidianDocument {\n  /** Unique identifier (relative path from vault root) */\n  id: string;\n\n  /** File system path relative to vault root */\n  path: string;\n\n  /** Full file path (for backward compatibility) */\n  filePath?: string;\n\n  /** Relative path (alias for path for backward compatibility) */\n  relativePath?: string;\n\n  /** Filename without extension */\n  name: string;\n\n  /** Filename with extension */\n  fileName?: string;\n\n  /** File extension (.md, .canvas, etc.) */\n  extension: string;\n\n  /** Raw file content */\n  content: string;\n\n  /** Parsed frontmatter YAML */\n  frontmatter: Record<string, any>;\n\n  /** Document statistics */\n  stats: {\n    wordCount: number;\n    characterCount: number;\n    lineCount: number;\n    headingCount: number;\n    linkCount: number;\n    tagCount: number;\n    size?: number;\n    createdAt?: Date;\n    updatedAt?: Date;\n  };\n\n  /** Obsidian-specific relationships */\n  relationships: {\n    /** Outgoing wikilinks */\n    wikilinks: Wikilink[];\n    /** Tags used in document */\n    tags: string[];\n    /** Referenced by these documents */\n    backlinks: Backlink[];\n  };\n\n  /** Document sections (for chunking) */\n  sections?: Array<{\n    title: string;\n    level: number;\n    content: string;\n    startLine: number;\n    endLine: number;\n    wikilinks?: string[];\n    tags?: string[];\n  }>;\n\n  /** Processing metadata */\n  metadata: {\n    created: Date;\n    modified: Date;\n    checksum: string;\n    lastIndexed?: Date;\n    processingErrors?: string[];\n  };\n}\n\n/**\n * Utility functions for Obsidian document processing\n */\nexport class ObsidianUtils {\n  static cleanMarkdown(content: string): string {\n    return content\n      .replace(/^---[\\s\\S]*?---\\n?/m, \"\")\n      .replace(\n        /\\[\\[([^\\]|]+)(?:\\|([^\\]]+))?\\]\\]/g,\n        (_, target, display) => display || target\n      )\n      .replace(/\\[([^\\]]+)\\]\\([^)]+\\)/g, \"$1\")\n      .replace(/(\\*\\*|__)(.*?)\\1/g, \"$1\")\n      .replace(/(\\*|_)(.*?)\\1/g, \"$1\")\n      .replace(/`([^`]+)`/g, \"$1\")\n      .replace(/~~(.*?)~~/g, \"$1\")\n      .replace(/^#{1,6}\\s+(.*)$/gm, \"$1\")\n      .replace(/\\n{3,}/g, \"\\n\\n\")\n      .trim();\n  }\n\n  static extractWikilinks(content: string): string[] {\n    const wikilinkRegex = /\\[\\[([^\\]|]+)(?:\\|([^\\]]+))?\\]\\]/g;\n    const links: string[] = [];\n    let match;\n\n    while ((match = wikilinkRegex.exec(content)) !== null) {\n      links.push(match[2] || match[1]);\n    }\n\n    return [...new Set(links)];\n  }\n\n  static extractTags(content: string): string[] {\n    const tagRegex = /#([a-zA-Z0-9_-]+)/g;\n    const tags: string[] = [];\n    let match;\n\n    while ((match = tagRegex.exec(content)) !== null) {\n      tags.push(match[1]);\n    }\n\n    return [...new Set(tags)];\n  }\n\n  static parseFrontmatter(content: string): Record<string, any> {\n    const frontmatterRegex = /^---\\n([\\s\\S]*?)\\n---/;\n    const match = content.match(frontmatterRegex);\n\n    if (!match) return {};\n\n    try {\n      // Simple YAML-like parsing (for now)\n      const frontmatter: Record<string, any> = {};\n      const lines = match[1].split(\"\\n\");\n\n      for (const line of lines) {\n        const [key, ...valueParts] = line.split(\":\");\n        if (key && valueParts.length > 0) {\n          const value = valueParts.join(\":\").trim();\n          // Remove quotes if present\n          frontmatter[key.trim()] = value.replace(/^[\"']|[\"']$/g, \"\");\n        }\n      }\n\n      return frontmatter;\n    } catch {\n      return {};\n    }\n  }\n\n  static generateFileChecksum(content: string): string {\n    const crypto = require(\"crypto\");\n    return crypto.createHash(\"sha256\").update(content).digest(\"hex\");\n  }\n\n  static determineContentType(\n    filePath: string,\n    vaultPath: string,\n    frontmatter: Record<string, any>\n  ): string {\n    const relativePath = filePath.replace(vaultPath, \"\").replace(/^\\/+/, \"\");\n\n    // Path-based classification\n    if (relativePath.includes(\"MOCs/\")) return \"moc\";\n    if (relativePath.includes(\"Articles/\")) return \"article\";\n    if (relativePath.includes(\"AIChats/\")) return \"conversation\";\n    if (relativePath.includes(\"Books/\")) return \"book-note\";\n    if (relativePath.includes(\"templates/\")) return \"template\";\n\n    // Check frontmatter type\n    if (frontmatter.type) {\n      return frontmatter.type;\n    }\n\n    return \"note\";\n  }\n}\n\n/**\n * Represents a wikilink in Obsidian format\n */\nexport interface Wikilink {\n  /** Target document path */\n  target: string;\n\n  /** Display text (if different from target) */\n  display?: string;\n\n  /** Link type */\n  type: \"document\" | \"heading\" | \"block\";\n\n  /** Position in source document */\n  position: {\n    line: number;\n    column: number;\n    offset: number;\n  };\n\n  /** Context around the link */\n  context: string;\n}\n\n/**\n * Represents a backlink reference\n */\nexport interface Backlink {\n  /** Source document that references this document */\n  source: string;\n\n  /** Context of the reference */\n  context: string;\n\n  /** Position in source document */\n  position: {\n    line: number;\n    column: number;\n    offset: number;\n  };\n}\n\n/**\n * Processing context for embeddings\n */\nexport interface ObsidianEmbeddingContext {\n  /** Document identifier */\n  documentId: string;\n\n  /** Section or heading being embedded */\n  section: string;\n\n  /** Hierarchical breadcrumbs */\n  breadcrumbs: string[];\n\n  /** Related concepts and tags */\n  relatedConcepts: string[];\n\n  /** Importance score (0-1) */\n  importance: number;\n}\n\n// =============================================================================\n// SEARCH AND QUERY STRUCTURES\n// =============================================================================\n\n/**\n * Comprehensive search query for Obsidian content\n */\nexport interface ObsidianSearchQuery {\n  /** Search text */\n  text: string;\n\n  /** Search mode */\n  mode: \"semantic\" | \"lexical\" | \"hybrid\" | \"graph\";\n\n  /** Content type filters */\n  contentTypes?: (\n    | \"note\"\n    | \"moc\"\n    | \"article\"\n    | \"conversation\"\n    | \"template\"\n    | \"book-note\"\n  )[];\n\n  /** Tag filters */\n  tags?: string[];\n\n  /** Folder/path filters */\n  folders?: string[];\n\n  /** Date range filters */\n  dateRange?: {\n    start?: Date;\n    end?: Date;\n  };\n\n  /** Wikilink relationship filters */\n  linkedFrom?: string[];\n  linkedTo?: string[];\n\n  /** Result limits */\n  limit?: number;\n  offset?: number;\n\n  /** Sorting preferences */\n  sortBy?: \"relevance\" | \"date\" | \"title\" | \"importance\";\n  sortOrder?: \"asc\" | \"desc\";\n}\n\n/**\n * Search options with advanced filtering\n */\nexport interface ObsidianSearchOptions {\n  /** Maximum results to return */\n  limit?: number;\n\n  /** Minimum similarity score (0-1) */\n  minSimilarity?: number;\n\n  /** Content type filters */\n  contentTypes?: string[];\n\n  /** Tag filters */\n  tags?: string[];\n\n  /** Folder filters */\n  folders?: string[];\n\n  /** File type filters (alias for contentTypes) */\n  fileTypes?: string[];\n\n  /** Has wikilinks filter */\n  hasWikilinks?: boolean;\n\n  /** Date range filters */\n  dateRange?: {\n    start?: Date;\n    end?: Date;\n  };\n\n  /** Search mode */\n  searchMode?: \"semantic\" | \"hybrid\" | \"graph\" | \"comprehensive\";\n\n  /** Include related documents */\n  includeRelated?: boolean;\n\n  /** Maximum related documents */\n  maxRelated?: number;\n\n  /** Enable graph augmentation */\n  graphAugmentation?: boolean;\n\n  /** Maximum graph hops */\n  maxGraphHops?: number;\n\n  // Multi-modal specific filters\n  /** Multi-modal content types to include */\n  multiModalTypes?: string[];\n\n  /** Minimum OCR/audio quality score (0-1) */\n  minQuality?: number;\n\n  /** Language filters for multi-modal content */\n  languages?: string[];\n\n  /** Include only content with text extraction */\n  hasText?: boolean;\n\n  /** File size range filters (in bytes) */\n  fileSizeRange?: {\n    min?: number;\n    max?: number;\n  };\n}\n\n// =============================================================================\n// INGESTION AND PROCESSING\n// =============================================================================\n\n/**\n * Configuration for vault ingestion\n */\nexport interface ObsidianIngestionConfig {\n  /** Vault root directory */\n  vaultPath: string;\n\n  /** File patterns to include */\n  includePatterns: string[];\n\n  /** File patterns to exclude */\n  excludePatterns: string[];\n\n  /** Chunking configuration */\n  chunking: {\n    /** Maximum chunk size in characters */\n    maxChunkSize: number;\n\n    /** Overlap between chunks */\n    chunkOverlap: number;\n\n    /** Respect heading boundaries */\n    preserveStructure: boolean;\n\n    /** Include frontmatter context */\n    includeContext: boolean;\n\n    /** Clean markdown formatting */\n    cleanContent: boolean;\n  };\n\n  /** Processing options */\n  processing: {\n    /** Extract wikilinks */\n    extractLinks: boolean;\n\n    /** Extract tags */\n    extractTags: boolean;\n\n    /** Calculate statistics */\n    calculateStats: boolean;\n\n    /** Generate checksums */\n    generateChecksums: boolean;\n  };\n\n  /** Performance settings */\n  performance: {\n    /** Batch size for processing */\n    batchSize: number;\n\n    /** Rate limiting delay */\n    rateLimitMs: number;\n\n    /** Skip existing files */\n    skipExisting: boolean;\n\n    /** Maximum concurrent operations */\n    maxConcurrency: number;\n  };\n}\n\n// =============================================================================\n// VALIDATION AND RESULTS\n// =============================================================================\n\n/**\n * Validation result for Obsidian documents\n */\nexport interface ObsidianValidationResult {\n  /** Document identifier */\n  documentId: string;\n\n  /** Overall validation status */\n  valid: boolean;\n\n  /** Validation errors */\n  errors: ValidationError[];\n\n  /** Validation warnings */\n  warnings: ValidationWarning[];\n\n  /** Processing statistics */\n  stats: {\n    processingTime: number;\n    chunksGenerated: number;\n    embeddingsGenerated: number;\n  };\n}\n\n/**\n * Validation error details\n */\nexport interface ValidationError {\n  /** Error code */\n  code: string;\n\n  /** Human-readable message */\n  message: string;\n\n  /** Location in document */\n  location?: {\n    line?: number;\n    column?: number;\n    offset?: number;\n  };\n\n  /** Severity level */\n  severity: \"error\" | \"warning\" | \"info\";\n}\n\n/**\n * Validation warning details\n */\nexport interface ValidationWarning {\n  /** Warning code */\n  code: string;\n\n  /** Human-readable message */\n  message: string;\n\n  /** Location in document */\n  location?: {\n    line?: number;\n    column?: number;\n    offset?: number;\n  };\n}\n\n// =============================================================================\n// ANALYTICS AND INSIGHTS\n// =============================================================================\n\n/**\n * Analytics for an Obsidian vault\n */\nexport interface ObsidianVaultAnalytics {\n  /** Basic vault statistics */\n  overview: {\n    totalDocuments: number;\n    totalWords: number;\n    totalLinks: number;\n    totalTags: number;\n    vaultAge: number; // days\n  };\n\n  /** Content type distribution */\n  contentDistribution: {\n    byType: Record<string, number>;\n    byFolder: Record<string, number>;\n    byTag: Record<string, number>;\n  };\n\n  /** Network analysis */\n  networkAnalysis: {\n    /** Most connected documents */\n    hubDocuments: Array<{\n      document: string;\n      connections: number;\n      centrality: number;\n    }>;\n\n    /** Knowledge clusters */\n    clusters: Array<{\n      name: string;\n      documents: string[];\n      theme: string;\n      density: number;\n    }>;\n\n    /** Orphaned documents */\n    orphans: string[];\n\n    /** Link health metrics */\n    linkHealth: {\n      brokenLinks: number;\n      missingReferences: number;\n      circularReferences: number;\n    };\n  };\n\n  /** Temporal analysis */\n  temporalAnalysis: {\n    creationTimeline: Array<{\n      period: string;\n      count: number;\n    }>;\n\n    modificationTimeline: Array<{\n      period: string;\n      count: number;\n    }>;\n\n    activityPatterns: {\n      mostActiveDays: string[];\n      mostActiveHours: number[];\n    };\n  };\n\n  /** Quality metrics */\n  qualityMetrics: {\n    averageDocumentLength: number;\n    averageLinksPerDocument: number;\n    tagConsistency: number;\n    formattingConsistency: number;\n  };\n}\n\n// =============================================================================\n// API CONTRACTS\n// =============================================================================\n\n/**\n * Search API request contract\n */\nexport interface SearchAPIRequest {\n  query: string;\n  options?: Partial<ObsidianSearchOptions>;\n  pagination?: {\n    limit: number;\n    offset: number;\n  };\n}\n\n/**\n * Search API response contract\n */\nexport interface SearchAPIResponse {\n  query: string;\n  results: ObsidianSearchResult[];\n  totalFound: number;\n  pagination?: {\n    limit: number;\n    offset: number;\n    hasMore: boolean;\n  };\n  facets?: {\n    contentTypes: Array<{ type: string; count: number }>;\n    tags: Array<{ tag: string; count: number }>;\n    folders: Array<{ folder: string; count: number }>;\n    temporal: Array<{ period: string; count: number }>;\n  };\n  performance: {\n    totalTime: number;\n    searchTime: number;\n    processingTime: number;\n  };\n  graphInsights?: {\n    queryConcepts: string[];\n    relatedConcepts: string[];\n    knowledgeClusters: Array<{\n      name: string;\n      documents: string[];\n      centrality: number;\n    }>;\n  };\n}\n\n/**\n * Ingestion API request contract\n */\nexport interface IngestionAPIRequest {\n  vaultPath: string;\n  config?: Partial<ObsidianIngestionConfig>;\n  options?: {\n    force?: boolean; // Reprocess all files\n    incremental?: boolean; // Only process changed files\n    validateOnly?: boolean; // Just validate without storing\n  };\n}\n\n/**\n * Ingestion API response contract\n */\nexport interface IngestionAPIResponse {\n  success: boolean;\n  processed: number;\n  skipped: number;\n  errors: number;\n  details: {\n    documentsProcessed: string[];\n    documentsSkipped: string[];\n    errors: Array<{\n      document: string;\n      error: string;\n    }>;\n  };\n  performance: {\n    totalTime: number;\n    documentsPerSecond: number;\n    chunksPerSecond: number;\n  };\n  validationResults?: ObsidianValidationResult[];\n}\n\n/**\n * Analytics API response contract\n */\nexport interface AnalyticsAPIResponse {\n  analytics: ObsidianVaultAnalytics;\n  generated: Date;\n  computationTime: number;\n}\n\n/**\n * Health check API response contract\n */\nexport interface HealthAPIResponse {\n  status: \"healthy\" | \"degraded\" | \"unhealthy\";\n  timestamp: Date;\n  version: string;\n  services: {\n    database: \"up\" | \"down\";\n    embeddings: \"up\" | \"down\";\n    indexing: \"up\" | \"down\";\n  };\n  metrics: {\n    totalDocuments: number;\n    totalChunks: number;\n    lastIngestion: Date | null;\n    uptime: number;\n  };\n}\n\n// =============================================================================\n// UTILITY TYPES AND CONSTANTS\n// =============================================================================\n\n/**\n * Supported Obsidian content types\n */\nexport const OBSIDIAN_CONTENT_TYPES = [\n  \"note\",\n  \"moc\",\n  \"article\",\n  \"conversation\",\n  \"template\",\n  \"book-note\",\n  \"canvas\",\n  \"dataview\",\n] as const;\n\nexport type ObsidianContentType = (typeof OBSIDIAN_CONTENT_TYPES)[number];\n\n/**\n * Obsidian frontmatter field definitions\n */\nexport interface ObsidianFrontmatterSchema {\n  title?: string;\n  created?: string | Date;\n  updated?: string | Date;\n  tags?: string[];\n  aliases?: string[];\n  category?: string;\n  status?: \"draft\" | \"published\" | \"archived\";\n  priority?: \"low\" | \"medium\" | \"high\";\n  project?: string;\n  related?: string[];\n  [key: string]: any; // Allow custom fields\n}\n\n/**\n * Chunk generation strategies\n */\nexport type ChunkStrategy = \"fixed-size\" | \"structure-aware\" | \"semantic\";\n\n/**\n * Link types in Obsidian\n */\nexport type ObsidianLinkType = \"document\" | \"heading\" | \"block\" | \"embed\";\n\n/**\n * Document processing status\n */\nexport type ProcessingStatus =\n  | \"pending\"\n  | \"processing\"\n  | \"completed\"\n  | \"failed\";\n\n/**\n * Validation rule definitions\n */\nexport interface ValidationRule {\n  name: string;\n  description: string;\n  check: (document: ObsidianDocument) => ValidationError | null;\n  severity: \"error\" | \"warning\" | \"info\";\n}\n\n// Import the search result type for API responses\nimport { SearchResult } from \"../types/index.js\";\n\nexport interface ObsidianSearchResult extends SearchResult {\n  obsidianMeta?: {\n    fileName: string;\n    filePath: string;\n    tags: string[];\n    wikilinks: string[];\n    frontmatter: Record<string, any>;\n    relatedFiles?: string[];\n    backlinks?: string[];\n  };\n  multiModalMeta?: {\n    fileId: string;\n    contentType: string;\n    contentTypeLabel: string;\n    mimeType: string;\n    checksum: string;\n    quality?: any;\n    processing?: any;\n    // Content-specific metadata\n    duration?: number;\n    sampleRate?: number;\n    channels?: number;\n    confidence?: number;\n    language?: string;\n    pageCount?: number;\n    hasText?: boolean;\n    wordCount?: number;\n  };\n  highlights?: string[];\n  relatedChunks?: SearchResult[];\n  graphContext?: {\n    connectedConcepts: string[];\n    pathsToQuery: number;\n    centralityScore: number;\n  };\n}\n"},"src/lib/processors/ocr-processor.ts":{"language":"typescript","mutants":[{"id":"512","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":50},"start":{"column":25,"line":48}}},{"id":"513","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":53,"line":49},"start":{"column":25,"line":49}}},{"id":"517","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":57,"line":53},"start":{"column":31,"line":53}}},{"id":"518","mutatorName":"EqualityOperator","replacement":"options.language === \"eng\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":57,"line":53},"start":{"column":31,"line":53}}},{"id":"519","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":57,"line":53},"start":{"column":52,"line":53}}},{"id":"520","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":57},"start":{"column":59,"line":53}}},{"id":"521","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":10,"line":56},"start":{"column":41,"line":54}}},{"id":"522","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":40,"line":55},"start":{"column":37,"line":55}}},{"id":"626","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":37,"line":207},"start":{"column":9,"line":207}}},{"id":"627","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":37,"line":207},"start":{"column":9,"line":207}}},{"id":"628","mutatorName":"EqualityOperator","replacement":"maxMatches !== frenchMatches","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":37,"line":207},"start":{"column":9,"line":207}}},{"id":"629","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":50,"line":207},"start":{"column":46,"line":207}}},{"id":"630","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":21,"line":209},"start":{"column":12,"line":209}}},{"id":"501","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'Image OCR Error: OCR worker not initi…' to be 'This is a test document with clear te…' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["96"],"coveredBy":["96","97","98","99","100","101","107","108","109","110","111","112"],"location":{"end":{"column":4,"line":30},"start":{"column":37,"line":26}}},{"id":"502","mutatorName":"BooleanLiteral","replacement":"this.worker","statusReason":"expected 'Image OCR Error: OCR worker not initi…' to be 'This is a test document with clear te…' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["96"],"coveredBy":["96","97","98","99","100","101","107","108","109","110","111","112"],"location":{"end":{"column":21,"line":27},"start":{"column":9,"line":27}}},{"id":"503","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected \"spy\" to be called 1 times, but got 2 times","status":"Killed","static":false,"testsCompleted":12,"killedBy":["112"],"coveredBy":["96","97","98","99","100","101","107","108","109","110","111","112"],"location":{"end":{"column":21,"line":27},"start":{"column":9,"line":27}}},{"id":"504","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'Image OCR Error: OCR worker not initi…' to be 'This is a test document with clear te…' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["96"],"coveredBy":["96","97","98","99","100","101","107","108","109","110","111","112"],"location":{"end":{"column":21,"line":27},"start":{"column":9,"line":27}}},{"id":"505","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'Image OCR Error: OCR worker not initi…' to be 'This is a test document with clear te…' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["96"],"coveredBy":["96","97","98","99","100","101","107","108","109","110","111","112"],"location":{"end":{"column":6,"line":29},"start":{"column":23,"line":27}}},{"id":"506","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected \"spy\" to be called with arguments: [ 'eng' ]\n\nReceived: \n\n  1st spy call:\n\n  [\n-   \"eng\",\n+   \"\",\n  ]\n\n  2nd spy call:\n\n  [\n-   \"eng\",\n+   \"\",\n  ]\n\n  3rd spy call:\n\n  [\n-   \"eng\",\n+   \"\",\n  ]\n\n  4th spy call:\n\n  [\n-   \"eng\",\n+   \"\",\n  ]\n\n  5th spy call:\n\n  [\n-   \"eng\",\n+   \"\",\n  ]\n\n  6th spy call:\n\n  [\n-   \"eng\",\n+   \"\",\n  ]\n\n  7th spy call:\n\n  [\n-   \"eng\",\n+   \"\",\n  ]\n\n  8th spy call:\n\n  [\n-   \"eng\",\n+   \"\",\n  ]\n\n  9th spy call:\n\n  [\n-   \"eng\",\n+   \"\",\n  ]\n\n  10th spy call:\n\n  [\n-   \"eng\",\n+   \"\",\n  ]\n\n\nNumber of calls: 10\n","status":"Killed","static":false,"testsCompleted":10,"killedBy":["110"],"coveredBy":["96","97","98","99","100","101","107","108","109","110","111","112"],"location":{"end":{"column":45,"line":28},"start":{"column":40,"line":28}}},{"id":"507","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'text')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["96"],"coveredBy":["96","97","98","99","100","101","107","108","109","110","111","112"],"location":{"end":{"column":4,"line":127},"start":{"column":6,"line":44}}},{"id":"508","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'text')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["96"],"coveredBy":["96","97","98","99","100","101","107","108","109","110","111","112"],"location":{"end":{"column":6,"line":108},"start":{"column":9,"line":45}}},{"id":"509","mutatorName":"BooleanLiteral","replacement":"this.worker","statusReason":"expected 'Image OCR Error: OCR worker not initi…' to be 'This is a test document with clear te…' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["96"],"coveredBy":["96","97","98","99","100","101","107","108","109","110","111","112"],"location":{"end":{"column":23,"line":48},"start":{"column":11,"line":48}}},{"id":"510","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'Image OCR Error: OCR worker not initi…' to be 'This is a test document with clear te…' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["96"],"coveredBy":["96","97","98","99","100","101","107","108","109","110","111","112"],"location":{"end":{"column":23,"line":48},"start":{"column":11,"line":48}}},{"id":"511","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":12,"coveredBy":["96","97","98","99","100","101","107","108","109","110","111","112"],"location":{"end":{"column":23,"line":48},"start":{"column":11,"line":48}}},{"id":"514","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":12,"coveredBy":["96","97","98","99","100","101","107","108","109","110","111","112"],"location":{"end":{"column":57,"line":53},"start":{"column":11,"line":53}}},{"id":"515","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":12,"coveredBy":["96","97","98","99","100","101","107","108","109","110","111","112"],"location":{"end":{"column":57,"line":53},"start":{"column":11,"line":53}}},{"id":"516","mutatorName":"LogicalOperator","replacement":"options.language || options.language !== \"eng\"","status":"Survived","static":false,"testsCompleted":12,"coveredBy":["96","97","98","99","100","101","107","108","109","110","111","112"],"location":{"end":{"column":57,"line":53},"start":{"column":11,"line":53}}},{"id":"523","mutatorName":"ArithmeticOperator","replacement":"Date.now() + startTime","status":"Survived","static":false,"testsCompleted":11,"coveredBy":["96","97","98","100","101","107","108","109","110","111","112"],"location":{"end":{"column":52,"line":64},"start":{"column":30,"line":64}}},{"id":"524","mutatorName":"MethodExpression","replacement":"result.data.text","status":"Survived","static":false,"testsCompleted":11,"coveredBy":["96","97","98","100","101","107","108","109","110","111","112"],"location":{"end":{"column":43,"line":65},"start":{"column":20,"line":65}}},{"id":"525","mutatorName":"MethodExpression","replacement":"text.split(/\\s+/)","statusReason":"expected 1 to be +0 // Object.is equality","status":"Killed","static":false,"testsCompleted":3,"killedBy":["98"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":72,"line":69},"start":{"column":21,"line":69}}},{"id":"526","mutatorName":"Regex","replacement":"/\\s/","status":"Survived","static":false,"testsCompleted":10,"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":37,"line":69},"start":{"column":32,"line":69}}},{"id":"527","mutatorName":"Regex","replacement":"/\\S+/","statusReason":"expected 7 to be 8 // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["96"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":37,"line":69},"start":{"column":32,"line":69}}},{"id":"528","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"expected 'Image OCR: No text detected' to be 'This is a test document with clear te…' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["96"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":71,"line":69},"start":{"column":46,"line":69}}},{"id":"529","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 1 to be +0 // Object.is equality","status":"Killed","static":false,"testsCompleted":3,"killedBy":["98"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":71,"line":69},"start":{"column":56,"line":69}}},{"id":"530","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'Image OCR: No text detected' to be 'This is a test document with clear te…' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["96"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":71,"line":69},"start":{"column":56,"line":69}}},{"id":"531","mutatorName":"EqualityOperator","replacement":"word.length >= 0","statusReason":"expected 1 to be +0 // Object.is equality","status":"Killed","static":false,"testsCompleted":3,"killedBy":["98"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":71,"line":69},"start":{"column":56,"line":69}}},{"id":"532","mutatorName":"EqualityOperator","replacement":"word.length <= 0","statusReason":"expected 'Image OCR: No text detected' to be 'This is a test document with clear te…' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["96"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":71,"line":69},"start":{"column":56,"line":69}}},{"id":"533","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'Image OCR: Low confidence (0.0%)' to contain 'No text detected'","status":"Killed","static":false,"testsCompleted":3,"killedBy":["98"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":58,"line":70},"start":{"column":23,"line":70}}},{"id":"534","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'Image OCR: No text detected' to be 'This is a test document with clear te…' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["96"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":58,"line":70},"start":{"column":23,"line":70}}},{"id":"535","mutatorName":"LogicalOperator","replacement":"text.length > 0 || words.length > 0","status":"Survived","static":false,"testsCompleted":10,"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":58,"line":70},"start":{"column":23,"line":70}}},{"id":"536","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":10,"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":38,"line":70},"start":{"column":23,"line":70}}},{"id":"537","mutatorName":"EqualityOperator","replacement":"text.length >= 0","status":"Survived","static":false,"testsCompleted":10,"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":38,"line":70},"start":{"column":23,"line":70}}},{"id":"538","mutatorName":"EqualityOperator","replacement":"text.length <= 0","statusReason":"expected 'Image OCR: No text detected' to be 'This is a test document with clear te…' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["96"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":38,"line":70},"start":{"column":23,"line":70}}},{"id":"539","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":9,"coveredBy":["96","97","100","101","107","108","109","110","112"],"location":{"end":{"column":58,"line":70},"start":{"column":42,"line":70}}},{"id":"540","mutatorName":"EqualityOperator","replacement":"words.length >= 0","status":"Survived","static":false,"testsCompleted":9,"coveredBy":["96","97","100","101","107","108","109","110","112"],"location":{"end":{"column":58,"line":70},"start":{"column":42,"line":70}}},{"id":"541","mutatorName":"EqualityOperator","replacement":"words.length <= 0","statusReason":"expected 'Image OCR: No text detected' to be 'This is a test document with clear te…' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["96"],"coveredBy":["96","97","100","101","107","108","109","110","112"],"location":{"end":{"column":58,"line":70},"start":{"column":42,"line":70}}},{"id":"542","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'unclear text' to contain 'Low confidence'","status":"Killed","static":false,"testsCompleted":2,"killedBy":["97"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":53,"line":73},"start":{"column":29,"line":73}}},{"id":"543","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'unclear text' to contain 'Low confidence'","status":"Killed","static":false,"testsCompleted":2,"killedBy":["97"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":53,"line":73},"start":{"column":29,"line":73}}},{"id":"544","mutatorName":"LogicalOperator","replacement":"options.confidence && 30","statusReason":"expected 'Image OCR: Low confidence (85.0%)' to be 'This is a test document with clear te…' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["96"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":53,"line":73},"start":{"column":29,"line":73}}},{"id":"545","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'unclear text' to contain 'Low confidence'","status":"Killed","static":false,"testsCompleted":2,"killedBy":["97"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":54,"line":74},"start":{"column":27,"line":74}}},{"id":"547","mutatorName":"EqualityOperator","replacement":"confidence > minConfidence","status":"Survived","static":false,"testsCompleted":10,"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":54,"line":74},"start":{"column":27,"line":74}}},{"id":"546","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'Image OCR: Low confidence (85.0%)' to be 'This is a test document with clear te…' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["96"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":54,"line":74},"start":{"column":27,"line":74}}},{"id":"548","mutatorName":"EqualityOperator","replacement":"confidence < minConfidence","statusReason":"expected 'Image OCR: Low confidence (85.0%)' to be 'This is a test document with clear te…' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["96"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":54,"line":74},"start":{"column":27,"line":74}}},{"id":"549","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected undefined to be 85 // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["96"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":8,"line":81},"start":{"column":40,"line":76}}},{"id":"550","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to be 'eng' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["96"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":44,"line":79},"start":{"column":19,"line":79}}},{"id":"551","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected false to be 'eng' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["96"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":44,"line":79},"start":{"column":19,"line":79}}},{"id":"553","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to be 'eng' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["96"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":44,"line":79},"start":{"column":39,"line":79}}},{"id":"552","mutatorName":"LogicalOperator","replacement":"options.language && \"eng\"","statusReason":"expected undefined to be 'eng' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["96"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":44,"line":79},"start":{"column":19,"line":79}}},{"id":"555","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected undefined to be 85 // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["96"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":8,"line":92},"start":{"column":51,"line":83}}},{"id":"554","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":10,"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":32,"line":80},"start":{"column":18,"line":80}}},{"id":"556","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":10,"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":26,"line":86},"start":{"column":19,"line":86}}},{"id":"557","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["97"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":40,"line":88},"start":{"column":18,"line":88}}},{"id":"558","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["96"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":40,"line":88},"start":{"column":18,"line":88}}},{"id":"559","mutatorName":"LogicalOperator","replacement":"hasText || isConfident","statusReason":"expected true to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["97"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":40,"line":88},"start":{"column":18,"line":88}}},{"id":"560","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'unclear text' to contain 'Low confidence'","status":"Killed","static":false,"testsCompleted":2,"killedBy":["97"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":31,"line":96},"start":{"column":9,"line":96}}},{"id":"561","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'Image OCR: Low confidence (85.0%)' to be 'This is a test document with clear te…' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["96"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":31,"line":96},"start":{"column":9,"line":96}}},{"id":"563","mutatorName":"StringLiteral","replacement":"``","statusReason":"expected '' to contain 'Low confidence'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["97"],"coveredBy":["97","98"],"location":{"end":{"column":15,"line":102},"start":{"column":13,"line":98}}},{"id":"562","mutatorName":"LogicalOperator","replacement":"isConfident || hasText","statusReason":"expected 'unclear text' to contain 'Low confidence'","status":"Killed","static":false,"testsCompleted":2,"killedBy":["97"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":31,"line":96},"start":{"column":9,"line":96}}},{"id":"565","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected 'Image OCR: ' to contain 'No text detected'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["98"],"coveredBy":["98"],"location":{"end":{"column":37,"line":101},"start":{"column":19,"line":101}}},{"id":"564","mutatorName":"StringLiteral","replacement":"``","statusReason":"expected 'Image OCR: ' to contain 'Low confidence'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["97"],"coveredBy":["97"],"location":{"end":{"column":63,"line":100},"start":{"column":19,"line":100}}},{"id":"567","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'text')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["99"],"coveredBy":["99","111"],"location":{"end":{"column":6,"line":126},"start":{"column":21,"line":108}}},{"id":"566","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected undefined to be 'This is a test document with clear te…' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["96"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":8,"line":107},"start":{"column":14,"line":104}}},{"id":"569","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["99","111"],"location":{"end":{"column":28,"line":114},"start":{"column":19,"line":114}}},{"id":"568","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected undefined to be +0 // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["99"],"coveredBy":["99","111"],"location":{"end":{"column":8,"line":120},"start":{"column":51,"line":112}}},{"id":"570","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["99","111"],"location":{"end":{"column":28,"line":115},"start":{"column":19,"line":115}}},{"id":"571","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected true to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["99"],"coveredBy":["99","111"],"location":{"end":{"column":23,"line":117},"start":{"column":18,"line":117}}},{"id":"572","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string","status":"Killed","static":false,"testsCompleted":1,"killedBy":["99"],"coveredBy":["99","111"],"location":{"end":{"column":8,"line":125},"start":{"column":14,"line":122}}},{"id":"573","mutatorName":"StringLiteral","replacement":"``","statusReason":"expected '' to contain 'OCR Error'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["99"],"coveredBy":["99","111"],"location":{"end":{"column":49,"line":123},"start":{"column":15,"line":123}}},{"id":"574","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'text')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["101"],"coveredBy":["101","102"],"location":{"end":{"column":4,"line":164},"start":{"column":6,"line":141}}},{"id":"575","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'text')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["101"],"coveredBy":["101","102"],"location":{"end":{"column":6,"line":145},"start":{"column":9,"line":142}}},{"id":"576","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'text')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["102"],"coveredBy":["102"],"location":{"end":{"column":6,"line":163},"start":{"column":21,"line":145}}},{"id":"577","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected undefined to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["102"],"coveredBy":["102"],"location":{"end":{"column":8,"line":157},"start":{"column":51,"line":149}}},{"id":"578","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["102"],"location":{"end":{"column":28,"line":151},"start":{"column":19,"line":151}}},{"id":"579","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["102"],"location":{"end":{"column":28,"line":152},"start":{"column":19,"line":152}}},{"id":"581","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string","status":"Killed","static":false,"testsCompleted":1,"killedBy":["102"],"coveredBy":["102"],"location":{"end":{"column":8,"line":162},"start":{"column":14,"line":159}}},{"id":"580","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected true to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["102"],"coveredBy":["102"],"location":{"end":{"column":23,"line":154},"start":{"column":18,"line":154}}},{"id":"583","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["103"],"coveredBy":["103","104","105","106"],"location":{"end":{"column":4,"line":183},"start":{"column":45,"line":169}}},{"id":"582","mutatorName":"StringLiteral","replacement":"``","statusReason":"expected '' to contain 'Failed to read file'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["102"],"coveredBy":["102"],"location":{"end":{"column":71,"line":160},"start":{"column":15,"line":160}}},{"id":"584","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["103"],"coveredBy":["103","104","105","106"],"location":{"end":{"column":6,"line":178},"start":{"column":24,"line":171}}},{"id":"585","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected true to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":4,"killedBy":["106"],"coveredBy":["103","104","105","106"],"location":{"end":{"column":37,"line":172},"start":{"column":19,"line":172}}},{"id":"586","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected true to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":4,"killedBy":["106"],"coveredBy":["103","104","105","106"],"location":{"end":{"column":43,"line":173},"start":{"column":19,"line":173}}},{"id":"587","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected true to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":4,"killedBy":["106"],"coveredBy":["103","104","105","106"],"location":{"end":{"column":31,"line":174},"start":{"column":19,"line":174}}},{"id":"588","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected true to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":4,"killedBy":["106"],"coveredBy":["103","104","105","106"],"location":{"end":{"column":43,"line":175},"start":{"column":19,"line":175}}},{"id":"589","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected true to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":4,"killedBy":["106"],"coveredBy":["103","104","105","106"],"location":{"end":{"column":43,"line":176},"start":{"column":19,"line":176}}},{"id":"591","mutatorName":"MethodExpression","replacement":"signatures.every(signature => buffer.subarray(0, signature.length).equals(signature))","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["103"],"coveredBy":["103","104","105","106"],"location":{"end":{"column":6,"line":182},"start":{"column":12,"line":180}}},{"id":"590","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected true to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":4,"killedBy":["106"],"coveredBy":["103","104","105","106"],"location":{"end":{"column":43,"line":177},"start":{"column":19,"line":177}}},{"id":"592","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["103"],"coveredBy":["103","104","105","106"],"location":{"end":{"column":61,"line":181},"start":{"column":28,"line":180}}},{"id":"593","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":6,"killedBy":["107"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":4,"line":210},"start":{"column":48,"line":188}}},{"id":"595","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":10,"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":35,"line":189},"start":{"column":9,"line":189}}},{"id":"594","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":6,"killedBy":["107"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":35,"line":189},"start":{"column":9,"line":189}}},{"id":"596","mutatorName":"LogicalOperator","replacement":"!text && text.length === 0","status":"Survived","static":false,"testsCompleted":10,"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":35,"line":189},"start":{"column":9,"line":189}}},{"id":"597","mutatorName":"BooleanLiteral","replacement":"text","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":6,"killedBy":["107"],"coveredBy":["96","97","98","100","101","107","108","109","110","112"],"location":{"end":{"column":14,"line":189},"start":{"column":9,"line":189}}},{"id":"598","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":9,"coveredBy":["96","97","100","101","107","108","109","110","112"],"location":{"end":{"column":35,"line":189},"start":{"column":18,"line":189}}},{"id":"599","mutatorName":"EqualityOperator","replacement":"text.length !== 0","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":5,"killedBy":["107"],"coveredBy":["96","97","100","101","107","108","109","110","112"],"location":{"end":{"column":35,"line":189},"start":{"column":18,"line":189}}},{"id":"600","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["98"],"location":{"end":{"column":53,"line":189},"start":{"column":44,"line":189}}},{"id":"601","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":5,"killedBy":["107"],"coveredBy":["96","97","100","101","107","108","109","110","112"],"location":{"end":{"column":59,"line":198},"start":{"column":29,"line":198}}},{"id":"602","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":5,"killedBy":["107"],"coveredBy":["96","97","100","101","107","108","109","110","112"],"location":{"end":{"column":59,"line":198},"start":{"column":29,"line":198}}},{"id":"603","mutatorName":"LogicalOperator","replacement":"text.match(englishWords) && []","statusReason":"expected 'Image OCR Error: Cannot read properti…' to contain 'Low confidence'","status":"Killed","static":false,"testsCompleted":2,"killedBy":["97"],"coveredBy":["96","97","100","101","107","108","109","110","112"],"location":{"end":{"column":59,"line":198},"start":{"column":29,"line":198}}},{"id":"605","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":5,"killedBy":["107"],"coveredBy":["96","97","100","101","107","108","109","110","112"],"location":{"end":{"column":59,"line":199},"start":{"column":29,"line":199}}},{"id":"604","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","statusReason":"expected 'en' to be 'unknown' // Object.is equality","status":"Killed","static":false,"testsCompleted":5,"killedBy":["109"],"coveredBy":["97","100","101","108","109","110","112"],"location":{"end":{"column":59,"line":198},"start":{"column":57,"line":198}}},{"id":"606","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":5,"killedBy":["107"],"coveredBy":["96","97","100","101","107","108","109","110","112"],"location":{"end":{"column":59,"line":199},"start":{"column":29,"line":199}}},{"id":"607","mutatorName":"LogicalOperator","replacement":"text.match(spanishWords) && []","statusReason":"expected 'Image OCR Error: Cannot read properti…' to contain 'Low confidence'","status":"Killed","static":false,"testsCompleted":2,"killedBy":["97"],"coveredBy":["96","97","100","101","107","108","109","110","112"],"location":{"end":{"column":59,"line":199},"start":{"column":29,"line":199}}},{"id":"609","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":5,"killedBy":["107"],"coveredBy":["96","97","100","101","107","108","109","110","112"],"location":{"end":{"column":57,"line":200},"start":{"column":28,"line":200}}},{"id":"608","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","statusReason":"expected 'es' to be 'unknown' // Object.is equality","status":"Killed","static":false,"testsCompleted":4,"killedBy":["109"],"coveredBy":["97","100","101","109","110","112"],"location":{"end":{"column":59,"line":199},"start":{"column":57,"line":199}}},{"id":"610","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":5,"killedBy":["107"],"coveredBy":["96","97","100","101","107","108","109","110","112"],"location":{"end":{"column":57,"line":200},"start":{"column":28,"line":200}}},{"id":"611","mutatorName":"LogicalOperator","replacement":"text.match(frenchWords) && []","statusReason":"expected 'Image OCR Error: Cannot read properti…' to be 'This is a test document with clear te…' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["96"],"coveredBy":["96","97","100","101","107","108","109","110","112"],"location":{"end":{"column":57,"line":200},"start":{"column":28,"line":200}}},{"id":"612","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","statusReason":"expected 'fr' to be 'unknown' // Object.is equality","status":"Killed","static":false,"testsCompleted":7,"killedBy":["109"],"coveredBy":["96","97","100","101","107","108","109","110","112"],"location":{"end":{"column":57,"line":200},"start":{"column":55,"line":200}}},{"id":"613","mutatorName":"MethodExpression","replacement":"Math.min(englishMatches, spanishMatches, frenchMatches)","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":5,"killedBy":["107"],"coveredBy":["96","97","100","101","107","108","109","110","112"],"location":{"end":{"column":79,"line":202},"start":{"column":24,"line":202}}},{"id":"614","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":5,"killedBy":["107"],"coveredBy":["96","97","100","101","107","108","109","110","112"],"location":{"end":{"column":25,"line":204},"start":{"column":9,"line":204}}},{"id":"615","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'en' to be 'unknown' // Object.is equality","status":"Killed","static":false,"testsCompleted":7,"killedBy":["109"],"coveredBy":["96","97","100","101","107","108","109","110","112"],"location":{"end":{"column":25,"line":204},"start":{"column":9,"line":204}}},{"id":"616","mutatorName":"EqualityOperator","replacement":"maxMatches !== 0","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":5,"killedBy":["107"],"coveredBy":["96","97","100","101","107","108","109","110","112"],"location":{"end":{"column":25,"line":204},"start":{"column":9,"line":204}}},{"id":"617","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to be 'unknown' // Object.is equality","status":"Killed","static":false,"testsCompleted":4,"killedBy":["109"],"coveredBy":["97","100","101","109","110","112"],"location":{"end":{"column":43,"line":204},"start":{"column":34,"line":204}}},{"id":"619","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["107"],"coveredBy":["96","107","108"],"location":{"end":{"column":38,"line":205},"start":{"column":9,"line":205}}},{"id":"618","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'en' to be 'es' // Object.is equality","status":"Killed","static":false,"testsCompleted":3,"killedBy":["108"],"coveredBy":["96","107","108"],"location":{"end":{"column":38,"line":205},"start":{"column":9,"line":205}}},{"id":"621","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["107"],"coveredBy":["96","107"],"location":{"end":{"column":51,"line":205},"start":{"column":47,"line":205}}},{"id":"620","mutatorName":"EqualityOperator","replacement":"maxMatches !== englishMatches","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["107"],"coveredBy":["96","107","108"],"location":{"end":{"column":38,"line":205},"start":{"column":9,"line":205}}},{"id":"622","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["108"],"location":{"end":{"column":38,"line":206},"start":{"column":9,"line":206}}},{"id":"623","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'unknown' to be 'es' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["108"],"coveredBy":["108"],"location":{"end":{"column":38,"line":206},"start":{"column":9,"line":206}}},{"id":"625","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to be 'es' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["108"],"coveredBy":["108"],"location":{"end":{"column":51,"line":206},"start":{"column":47,"line":206}}},{"id":"624","mutatorName":"EqualityOperator","replacement":"maxMatches !== spanishMatches","statusReason":"expected 'unknown' to be 'es' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["108"],"coveredBy":["108"],"location":{"end":{"column":38,"line":206},"start":{"column":9,"line":206}}},{"id":"632","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["111"],"location":{"end":{"column":20,"line":216},"start":{"column":9,"line":216}}},{"id":"631","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected \"spy\" to be called at least once","status":"Killed","static":false,"testsCompleted":1,"killedBy":["111"],"coveredBy":["111"],"location":{"end":{"column":4,"line":220},"start":{"column":36,"line":215}}},{"id":"633","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected \"spy\" to be called at least once","status":"Killed","static":false,"testsCompleted":1,"killedBy":["111"],"coveredBy":["111"],"location":{"end":{"column":20,"line":216},"start":{"column":9,"line":216}}},{"id":"634","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected \"spy\" to be called at least once","status":"Killed","static":false,"testsCompleted":1,"killedBy":["111"],"coveredBy":["111"],"location":{"end":{"column":6,"line":219},"start":{"column":22,"line":216}}},{"id":"635","mutatorName":"BlockStatement","replacement":"{}","statusReason":"the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string","status":"Killed","static":false,"testsCompleted":1,"killedBy":["113"],"coveredBy":["113"],"location":{"end":{"column":4,"line":238},"start":{"column":37,"line":225}}},{"id":"636","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected [] to include 'eng'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["113"],"coveredBy":["113"],"location":{"end":{"column":6,"line":237},"start":{"column":12,"line":226}}},{"id":"638","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected [ Array(10) ] to include 'spa'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["113"],"coveredBy":["113"],"location":{"end":{"column":12,"line":228},"start":{"column":7,"line":228}}},{"id":"637","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected [ Array(10) ] to include 'eng'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["113"],"coveredBy":["113"],"location":{"end":{"column":12,"line":227},"start":{"column":7,"line":227}}},{"id":"640","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["113"],"location":{"end":{"column":12,"line":230},"start":{"column":7,"line":230}}},{"id":"639","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected [ Array(10) ] to include 'fra'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["113"],"coveredBy":["113"],"location":{"end":{"column":12,"line":229},"start":{"column":7,"line":229}}},{"id":"642","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["113"],"location":{"end":{"column":12,"line":232},"start":{"column":7,"line":232}}},{"id":"641","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["113"],"location":{"end":{"column":12,"line":231},"start":{"column":7,"line":231}}},{"id":"643","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["113"],"location":{"end":{"column":12,"line":233},"start":{"column":7,"line":233}}},{"id":"644","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["113"],"location":{"end":{"column":12,"line":234},"start":{"column":7,"line":234}}},{"id":"645","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["113"],"location":{"end":{"column":16,"line":235},"start":{"column":7,"line":235}}},{"id":"646","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["113"],"location":{"end":{"column":12,"line":236},"start":{"column":7,"line":236}}}],"source":"import { createWorker, Worker } from \"tesseract.js\";\nimport { ContentType, ContentMetadata } from \"../multi-modal.js\";\nimport * as fs from \"fs\";\n\nexport interface OCRMetadata {\n  confidence: number;\n  processingTime: number;\n  language: string;\n  version: string;\n}\n\nexport interface OCRContentMetadata extends ContentMetadata {\n  confidence: number;\n  ocrMetadata?: OCRMetadata;\n  hasText: boolean;\n  wordCount: number;\n  characterCount: number;\n}\n\nexport class OCRProcessor {\n  private worker: Worker | null = null;\n\n  /**\n   * Initialize the OCR worker\n   */\n  async initialize(): Promise<void> {\n    if (!this.worker) {\n      this.worker = await createWorker(\"eng\"); // Default to English\n    }\n  }\n\n  /**\n   * Extract text from an image buffer\n   */\n  async extractTextFromBuffer(\n    buffer: Buffer,\n    options: {\n      language?: string;\n      confidence?: number;\n    } = {}\n  ): Promise<{\n    text: string;\n    metadata: OCRContentMetadata;\n  }> {\n    try {\n      await this.initialize();\n\n      if (!this.worker) {\n        throw new Error(\"OCR worker not initialized\");\n      }\n\n      // Load language if specified\n      if (options.language && options.language !== \"eng\") {\n        await this.worker.setParameters({\n          tessedit_ocr_engine_mode: \"1\", // Use LSTM OCR engine\n        });\n      }\n\n      const startTime = Date.now();\n\n      // Perform OCR\n      const result = await this.worker.recognize(buffer);\n\n      const processingTime = Date.now() - startTime;\n      const text = result.data.text.trim();\n      const confidence = result.data.confidence;\n\n      // Analyze extracted text\n      const words = text.split(/\\s+/).filter((word) => word.length > 0);\n      const hasText = text.length > 0 && words.length > 0;\n\n      // Check if confidence meets minimum threshold\n      const minConfidence = options.confidence || 30; // Default minimum confidence\n      const isConfident = confidence >= minConfidence;\n\n      const ocrMetadata: OCRMetadata = {\n        confidence,\n        processingTime,\n        language: options.language || \"eng\",\n        version: \"tesseract.js\",\n      };\n\n      const contentMetadata: OCRContentMetadata = {\n        type: ContentType.RASTER_IMAGE,\n        language: this.detectLanguage(text),\n        encoding: \"utf-8\",\n        confidence,\n        hasText: hasText && isConfident,\n        wordCount: words.length,\n        characterCount: text.length,\n        ocrMetadata,\n      };\n\n      // Return appropriate text based on confidence\n      const finalText =\n        isConfident && hasText\n          ? text\n          : `Image OCR: ${\n              hasText\n                ? `Low confidence (${confidence.toFixed(1)}%)`\n                : \"No text detected\"\n            }`;\n\n      return {\n        text: finalText,\n        metadata: contentMetadata,\n      };\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      const contentMetadata: OCRContentMetadata = {\n        type: ContentType.RASTER_IMAGE,\n        language: \"unknown\",\n        encoding: \"unknown\",\n        confidence: 0,\n        hasText: false,\n        wordCount: 0,\n        characterCount: 0,\n      };\n\n      return {\n        text: `Image OCR Error: ${errorMessage}`,\n        metadata: contentMetadata,\n      };\n    }\n  }\n\n  /**\n   * Extract text from an image file\n   */\n  async extractTextFromFile(\n    filePath: string,\n    options: {\n      language?: string;\n      confidence?: number;\n    } = {}\n  ): Promise<{\n    text: string;\n    metadata: OCRContentMetadata;\n  }> {\n    try {\n      const buffer = fs.readFileSync(filePath);\n      return await this.extractTextFromBuffer(buffer, options);\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      const contentMetadata: OCRContentMetadata = {\n        type: ContentType.RASTER_IMAGE,\n        language: \"unknown\",\n        encoding: \"unknown\",\n        confidence: 0,\n        hasText: false,\n        wordCount: 0,\n        characterCount: 0,\n      };\n\n      return {\n        text: `Image OCR Error: Failed to read file - ${errorMessage}`,\n        metadata: contentMetadata,\n      };\n    }\n  }\n\n  /**\n   * Check if an image format is supported for OCR\n   */\n  isSupportedImage(buffer: Buffer): boolean {\n    // Check common image signatures\n    const signatures = [\n      Buffer.from([0xff, 0xd8, 0xff]), // JPEG\n      Buffer.from([0x89, 0x50, 0x4e, 0x47]), // PNG\n      Buffer.from([0x42, 0x4d]), // BMP\n      Buffer.from([0x49, 0x49, 0x2a, 0x00]), // TIFF (little-endian)\n      Buffer.from([0x4d, 0x4d, 0x00, 0x2a]), // TIFF (big-endian)\n      Buffer.from([0x52, 0x49, 0x46, 0x46]), // WEBP (starts with RIFF)\n    ];\n\n    return signatures.some((signature) =>\n      buffer.subarray(0, signature.length).equals(signature)\n    );\n  }\n\n  /**\n   * Detect language from OCR text (simple heuristic)\n   */\n  private detectLanguage(text: string): string {\n    if (!text || text.length === 0) return \"unknown\";\n\n    // Simple heuristics for language detection\n    const englishWords = /\\b(the|and|or|but|in|on|at|to|for|of|with|by)\\b/gi;\n    const spanishWords =\n      /\\b(el|la|los|las|y|o|pero|en|sobre|a|para|de|con|por)\\b/gi;\n    const frenchWords =\n      /\\b(le|la|les|et|ou|mais|dans|sur|à|pour|de|avec|par)\\b/gi;\n\n    const englishMatches = (text.match(englishWords) || []).length;\n    const spanishMatches = (text.match(spanishWords) || []).length;\n    const frenchMatches = (text.match(frenchWords) || []).length;\n\n    const maxMatches = Math.max(englishMatches, spanishMatches, frenchMatches);\n\n    if (maxMatches === 0) return \"unknown\";\n    if (maxMatches === englishMatches) return \"en\";\n    if (maxMatches === spanishMatches) return \"es\";\n    if (maxMatches === frenchMatches) return \"fr\";\n\n    return \"unknown\";\n  }\n\n  /**\n   * Clean up OCR worker\n   */\n  async terminate(): Promise<void> {\n    if (this.worker) {\n      await this.worker.terminate();\n      this.worker = null;\n    }\n  }\n\n  /**\n   * Get supported languages (basic list)\n   */\n  getSupportedLanguages(): string[] {\n    return [\n      \"eng\", // English\n      \"spa\", // Spanish\n      \"fra\", // French\n      \"deu\", // German\n      \"ita\", // Italian\n      \"por\", // Portuguese\n      \"rus\", // Russian\n      \"ara\", // Arabic\n      \"chi_sim\", // Chinese Simplified\n      \"jpn\", // Japanese\n    ];\n  }\n}\n"},"src/lib/processors/office-processor.ts":{"language":"typescript","mutants":[{"id":"734","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":53,"line":190},"start":{"column":15,"line":190}}},{"id":"735","mutatorName":"EqualityOperator","replacement":"worksheet[cellAddress].v === undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":53,"line":190},"start":{"column":15,"line":190}}},{"id":"736","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":14,"line":193},"start":{"column":15,"line":191}}},{"id":"737","mutatorName":"UpdateOperator","replacement":"totalCells--","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":27,"line":192},"start":{"column":15,"line":192}}},{"id":"779","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":291},"start":{"column":21,"line":274}}},{"id":"780","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":285},"start":{"column":54,"line":278}}},{"id":"781","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":280},"start":{"column":19,"line":280}}},{"id":"782","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":28,"line":281},"start":{"column":19,"line":281}}},{"id":"783","mutatorName":"BooleanLiteral","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":23,"line":282},"start":{"column":18,"line":282}}},{"id":"784","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":290},"start":{"column":14,"line":287}}},{"id":"785","mutatorName":"StringLiteral","replacement":"``","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":59,"line":288},"start":{"column":15,"line":288}}},{"id":"817","mutatorName":"ObjectLiteral","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":32,"line":328},"start":{"column":12,"line":328}}},{"id":"818","mutatorName":"BooleanLiteral","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":30,"line":328},"start":{"column":25,"line":328}}},{"id":"852","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":37,"line":353},"start":{"column":9,"line":353}}},{"id":"853","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":37,"line":353},"start":{"column":9,"line":353}}},{"id":"854","mutatorName":"EqualityOperator","replacement":"maxMatches !== frenchMatches","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":37,"line":353},"start":{"column":9,"line":353}}},{"id":"855","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":50,"line":353},"start":{"column":46,"line":353}}},{"id":"856","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":21,"line":355},"start":{"column":12,"line":355}}},{"id":"648","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'text')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","115","116","117","118","119","120","121","128","129","130","131","132"],"location":{"end":{"column":6,"line":47},"start":{"column":9,"line":36}}},{"id":"647","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'text')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","115","116","117","118","119","120","121","128","129","130","131","132"],"location":{"end":{"column":4,"line":65},"start":{"column":6,"line":35}}},{"id":"649","mutatorName":"ConditionalExpression","replacement":"case ContentType.OFFICE_DOC:","statusReason":"expected 'Excel Document Error: Cannot read pro…' to be 'This is the content of a Word documen…' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","115","116","121","128","129","130","132"],"location":{"end":{"column":59,"line":39},"start":{"column":9,"line":38}}},{"id":"650","mutatorName":"ConditionalExpression","replacement":"case ContentType.OFFICE_SHEET:","statusReason":"expected 'PowerPoint Presentation: Text extract…' to contain '=== Sheet1 ==='","status":"Killed","static":false,"testsCompleted":1,"killedBy":["117"],"coveredBy":["117","118","119"],"location":{"end":{"column":59,"line":41},"start":{"column":9,"line":40}}},{"id":"652","mutatorName":"ConditionalExpression","replacement":"default:","statusReason":"Cannot read properties of undefined (reading 'text')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["131"],"coveredBy":["131"],"location":{"end":{"column":79,"line":45},"start":{"column":9,"line":44}}},{"id":"651","mutatorName":"ConditionalExpression","replacement":"case ContentType.OFFICE_PRESENTATION:","statusReason":"expected 'Office Document Error: Unsupported Of…' to contain 'Text extraction not yet implemented f…'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["120"],"coveredBy":["120"],"location":{"end":{"column":59,"line":43},"start":{"column":9,"line":42}}},{"id":"654","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'text')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["131"],"coveredBy":["131"],"location":{"end":{"column":6,"line":64},"start":{"column":21,"line":47}}},{"id":"653","mutatorName":"StringLiteral","replacement":"``","statusReason":"expected 'Office Document Error: ' to contain 'Unsupported Office document type'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["131"],"coveredBy":["131"],"location":{"end":{"column":77,"line":45},"start":{"column":27,"line":45}}},{"id":"656","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["131"],"location":{"end":{"column":28,"line":53},"start":{"column":19,"line":53}}},{"id":"655","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected undefined to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["131"],"coveredBy":["131"],"location":{"end":{"column":8,"line":58},"start":{"column":54,"line":51}}},{"id":"657","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["131"],"location":{"end":{"column":28,"line":54},"start":{"column":19,"line":54}}},{"id":"658","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected true to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["131"],"coveredBy":["131"],"location":{"end":{"column":23,"line":55},"start":{"column":18,"line":55}}},{"id":"660","mutatorName":"StringLiteral","replacement":"``","statusReason":"expected '' to contain 'Unsupported Office document type'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["131"],"coveredBy":["131"],"location":{"end":{"column":55,"line":61},"start":{"column":15,"line":61}}},{"id":"659","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string","status":"Killed","static":false,"testsCompleted":1,"killedBy":["131"],"coveredBy":["131"],"location":{"end":{"column":8,"line":63},"start":{"column":14,"line":60}}},{"id":"661","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'text')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["121"],"coveredBy":["121","122"],"location":{"end":{"column":4,"line":98},"start":{"column":6,"line":76}}},{"id":"662","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'text')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["121"],"coveredBy":["121","122"],"location":{"end":{"column":6,"line":80},"start":{"column":9,"line":77}}},{"id":"663","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'text')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["122"],"coveredBy":["122"],"location":{"end":{"column":6,"line":97},"start":{"column":21,"line":80}}},{"id":"664","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected undefined to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["122"],"coveredBy":["122"],"location":{"end":{"column":8,"line":91},"start":{"column":54,"line":84}}},{"id":"666","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["122"],"location":{"end":{"column":28,"line":87},"start":{"column":19,"line":87}}},{"id":"665","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["122"],"location":{"end":{"column":28,"line":86},"start":{"column":19,"line":86}}},{"id":"668","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string","status":"Killed","static":false,"testsCompleted":1,"killedBy":["122"],"coveredBy":["122"],"location":{"end":{"column":8,"line":96},"start":{"column":14,"line":93}}},{"id":"667","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected true to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["122"],"coveredBy":["122"],"location":{"end":{"column":23,"line":88},"start":{"column":18,"line":88}}},{"id":"670","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'text')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","115","116","121","128","129","130","132"],"location":{"end":{"column":4,"line":156},"start":{"column":6,"line":106}}},{"id":"669","mutatorName":"StringLiteral","replacement":"``","statusReason":"expected '' to contain 'Failed to read file'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["122"],"coveredBy":["122"],"location":{"end":{"column":77,"line":94},"start":{"column":15,"line":94}}},{"id":"672","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","static":false,"testsCompleted":8,"coveredBy":["114","115","116","121","128","129","130","132"],"location":{"end":{"column":61,"line":108},"start":{"column":51,"line":108}}},{"id":"671","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'text')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","115","116","121","128","129","130","132"],"location":{"end":{"column":6,"line":138},"start":{"column":9,"line":107}}},{"id":"673","mutatorName":"MethodExpression","replacement":"result.value","status":"Survived","static":false,"testsCompleted":6,"coveredBy":["114","115","121","128","129","130"],"location":{"end":{"column":39,"line":110},"start":{"column":20,"line":110}}},{"id":"674","mutatorName":"MethodExpression","replacement":"text.split(/\\s+/)","statusReason":"expected 1 to be +0 // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["115"],"coveredBy":["114","115","121","128","129","130"],"location":{"end":{"column":72,"line":111},"start":{"column":21,"line":111}}},{"id":"675","mutatorName":"Regex","replacement":"/\\s/","status":"Survived","static":false,"testsCompleted":6,"coveredBy":["114","115","121","128","129","130"],"location":{"end":{"column":37,"line":111},"start":{"column":32,"line":111}}},{"id":"676","mutatorName":"Regex","replacement":"/\\S+/","statusReason":"expected 7 to be 8 // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","115","121","128","129","130"],"location":{"end":{"column":37,"line":111},"start":{"column":32,"line":111}}},{"id":"677","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"expected 'Word Document: No readable text conte…' to be 'This is the content of a Word documen…' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","115","121","128","129","130"],"location":{"end":{"column":71,"line":111},"start":{"column":46,"line":111}}},{"id":"678","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 1 to be +0 // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["115"],"coveredBy":["114","115","121","128","129","130"],"location":{"end":{"column":71,"line":111},"start":{"column":56,"line":111}}},{"id":"679","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'Word Document: No readable text conte…' to be 'This is the content of a Word documen…' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","115","121","128","129","130"],"location":{"end":{"column":71,"line":111},"start":{"column":56,"line":111}}},{"id":"680","mutatorName":"EqualityOperator","replacement":"word.length >= 0","statusReason":"expected 1 to be +0 // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["115"],"coveredBy":["114","115","121","128","129","130"],"location":{"end":{"column":71,"line":111},"start":{"column":56,"line":111}}},{"id":"682","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected '' to be 'Word Document: No readable text conte…' // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["115"],"coveredBy":["114","115","121","128","129","130"],"location":{"end":{"column":58,"line":112},"start":{"column":23,"line":112}}},{"id":"681","mutatorName":"EqualityOperator","replacement":"word.length <= 0","statusReason":"expected 'Word Document: No readable text conte…' to be 'This is the content of a Word documen…' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","115","121","128","129","130"],"location":{"end":{"column":71,"line":111},"start":{"column":56,"line":111}}},{"id":"684","mutatorName":"LogicalOperator","replacement":"text.length > 0 || words.length > 0","status":"Survived","static":false,"testsCompleted":6,"coveredBy":["114","115","121","128","129","130"],"location":{"end":{"column":58,"line":112},"start":{"column":23,"line":112}}},{"id":"683","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'Word Document: No readable text conte…' to be 'This is the content of a Word documen…' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","115","121","128","129","130"],"location":{"end":{"column":58,"line":112},"start":{"column":23,"line":112}}},{"id":"685","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":6,"coveredBy":["114","115","121","128","129","130"],"location":{"end":{"column":38,"line":112},"start":{"column":23,"line":112}}},{"id":"686","mutatorName":"EqualityOperator","replacement":"text.length >= 0","status":"Survived","static":false,"testsCompleted":6,"coveredBy":["114","115","121","128","129","130"],"location":{"end":{"column":38,"line":112},"start":{"column":23,"line":112}}},{"id":"688","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":5,"coveredBy":["114","121","128","129","130"],"location":{"end":{"column":58,"line":112},"start":{"column":42,"line":112}}},{"id":"687","mutatorName":"EqualityOperator","replacement":"text.length <= 0","statusReason":"expected 'Word Document: No readable text conte…' to be 'This is the content of a Word documen…' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","115","121","128","129","130"],"location":{"end":{"column":38,"line":112},"start":{"column":23,"line":112}}},{"id":"689","mutatorName":"EqualityOperator","replacement":"words.length >= 0","status":"Survived","static":false,"testsCompleted":5,"coveredBy":["114","121","128","129","130"],"location":{"end":{"column":58,"line":112},"start":{"column":42,"line":112}}},{"id":"690","mutatorName":"EqualityOperator","replacement":"words.length <= 0","statusReason":"expected 'Word Document: No readable text conte…' to be 'This is the content of a Word documen…' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","121","128","129","130"],"location":{"end":{"column":58,"line":112},"start":{"column":42,"line":112}}},{"id":"691","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","static":false,"testsCompleted":6,"coveredBy":["114","115","121","128","129","130"],"location":{"end":{"column":8,"line":118},"start":{"column":46,"line":115}}},{"id":"692","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected undefined to be 'office_document' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","115","121","128","129","130"],"location":{"end":{"column":8,"line":128},"start":{"column":54,"line":120}}},{"id":"693","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":6,"coveredBy":["114","115","121","128","129","130"],"location":{"end":{"column":26,"line":123},"start":{"column":19,"line":123}}},{"id":"694","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to be 'Word Document: No readable text conte…' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["115"],"coveredBy":["115"],"location":{"end":{"column":58,"line":132},"start":{"column":11,"line":132}}},{"id":"696","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'text')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["116"],"coveredBy":["116","132"],"location":{"end":{"column":6,"line":155},"start":{"column":21,"line":138}}},{"id":"695","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected undefined to be 'This is the content of a Word documen…' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","115","121","128","129","130"],"location":{"end":{"column":8,"line":137},"start":{"column":14,"line":134}}},{"id":"698","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["116","132"],"location":{"end":{"column":28,"line":144},"start":{"column":19,"line":144}}},{"id":"697","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected undefined to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["116"],"coveredBy":["116","132"],"location":{"end":{"column":8,"line":149},"start":{"column":54,"line":142}}},{"id":"699","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["116","132"],"location":{"end":{"column":28,"line":145},"start":{"column":19,"line":145}}},{"id":"700","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected true to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["116"],"coveredBy":["116","132"],"location":{"end":{"column":23,"line":146},"start":{"column":18,"line":146}}},{"id":"701","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string","status":"Killed","static":false,"testsCompleted":1,"killedBy":["116"],"coveredBy":["116","132"],"location":{"end":{"column":8,"line":154},"start":{"column":14,"line":151}}},{"id":"702","mutatorName":"StringLiteral","replacement":"``","statusReason":"expected '' to contain 'Word Document Error'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["116"],"coveredBy":["116","132"],"location":{"end":{"column":53,"line":152},"start":{"column":15,"line":152}}},{"id":"703","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'text')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["117"],"coveredBy":["117","118","119"],"location":{"end":{"column":4,"line":244},"start":{"column":6,"line":164}}},{"id":"704","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'text')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["117"],"coveredBy":["117","118","119"],"location":{"end":{"column":6,"line":226},"start":{"column":9,"line":165}}},{"id":"706","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["117","118","119"],"location":{"end":{"column":58,"line":166},"start":{"column":50,"line":166}}},{"id":"705","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["117","118","119"],"location":{"end":{"column":60,"line":166},"start":{"column":42,"line":166}}},{"id":"708","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","statusReason":"expected 3 to be 2 // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["117"],"coveredBy":["117","118"],"location":{"end":{"column":38,"line":169},"start":{"column":36,"line":169}}},{"id":"707","mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","statusReason":"expected 'Stryker was here!' to contain 'Excel Spreadsheet'","status":"Killed","static":false,"testsCompleted":2,"killedBy":["118"],"coveredBy":["117","118"],"location":{"end":{"column":23,"line":168},"start":{"column":21,"line":168}}},{"id":"709","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'Excel Spreadsheet: 0 sheet(s), 0 cell…' to contain '=== Sheet1 ==='","status":"Killed","static":false,"testsCompleted":1,"killedBy":["117"],"coveredBy":["117","118"],"location":{"end":{"column":8,"line":196},"start":{"column":50,"line":173}}},{"id":"710","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected '=== Sheet1 ===' to contain 'Excel Spreadsheet'","status":"Killed","static":false,"testsCompleted":2,"killedBy":["118"],"coveredBy":["117","118"],"location":{"end":{"column":27,"line":179},"start":{"column":13,"line":179}}},{"id":"712","mutatorName":"MethodExpression","replacement":"csvText","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["117","118"],"location":{"end":{"column":27,"line":179},"start":{"column":13,"line":179}}},{"id":"711","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'Excel Spreadsheet: 2 sheet(s), 0 cell…' to contain '=== Sheet1 ==='","status":"Killed","static":false,"testsCompleted":1,"killedBy":["117"],"coveredBy":["117","118"],"location":{"end":{"column":27,"line":179},"start":{"column":13,"line":179}}},{"id":"714","mutatorName":"StringLiteral","replacement":"``","statusReason":"expected 'Excel Spreadsheet: 2 sheet(s), 0 cell…' to contain '=== Sheet1 ==='","status":"Killed","static":false,"testsCompleted":1,"killedBy":["117"],"coveredBy":["117"],"location":{"end":{"column":60,"line":180},"start":{"column":22,"line":180}}},{"id":"713","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'Excel Spreadsheet: 2 sheet(s), 0 cell…' to contain '=== Sheet1 ==='","status":"Killed","static":false,"testsCompleted":1,"killedBy":["117"],"coveredBy":["117"],"location":{"end":{"column":10,"line":181},"start":{"column":29,"line":179}}},{"id":"715","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["117","118"],"location":{"end":{"column":75,"line":184},"start":{"column":47,"line":184}}},{"id":"716","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["117","118"],"location":{"end":{"column":75,"line":184},"start":{"column":47,"line":184}}},{"id":"717","mutatorName":"LogicalOperator","replacement":"worksheet[\"!ref\"] && \"A1:A1\"","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["117","118"],"location":{"end":{"column":75,"line":184},"start":{"column":47,"line":184}}},{"id":"718","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["117","118"],"location":{"end":{"column":63,"line":184},"start":{"column":57,"line":184}}},{"id":"720","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["117","118"],"location":{"end":{"column":51,"line":185},"start":{"column":35,"line":185}}},{"id":"719","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["117","118"],"location":{"end":{"column":75,"line":184},"start":{"column":68,"line":184}}},{"id":"721","mutatorName":"EqualityOperator","replacement":"row < range.e.r","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["117","118"],"location":{"end":{"column":51,"line":185},"start":{"column":35,"line":185}}},{"id":"722","mutatorName":"EqualityOperator","replacement":"row > range.e.r","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["117","118"],"location":{"end":{"column":51,"line":185},"start":{"column":35,"line":185}}},{"id":"724","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["117","118"],"location":{"end":{"column":10,"line":195},"start":{"column":60,"line":185}}},{"id":"723","mutatorName":"UpdateOperator","replacement":"row--","statusReason":"Hit limit reached (503/500)","status":"Timeout","static":false,"coveredBy":["117","118"],"location":{"end":{"column":58,"line":185},"start":{"column":53,"line":185}}},{"id":"725","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["117","118"],"location":{"end":{"column":53,"line":186},"start":{"column":37,"line":186}}},{"id":"726","mutatorName":"EqualityOperator","replacement":"col < range.e.c","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["117","118"],"location":{"end":{"column":53,"line":186},"start":{"column":37,"line":186}}},{"id":"727","mutatorName":"EqualityOperator","replacement":"col > range.e.c","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["117","118"],"location":{"end":{"column":53,"line":186},"start":{"column":37,"line":186}}},{"id":"728","mutatorName":"UpdateOperator","replacement":"col--","statusReason":"Hit limit reached (903/900)","status":"Timeout","static":false,"coveredBy":["117","118"],"location":{"end":{"column":60,"line":186},"start":{"column":55,"line":186}}},{"id":"729","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["117","118"],"location":{"end":{"column":12,"line":194},"start":{"column":62,"line":186}}},{"id":"730","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["117","118"],"location":{"end":{"column":74,"line":187},"start":{"column":56,"line":187}}},{"id":"731","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["117","118"],"location":{"end":{"column":53,"line":190},"start":{"column":15,"line":189}}},{"id":"732","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["117","118"],"location":{"end":{"column":53,"line":190},"start":{"column":15,"line":189}}},{"id":"738","mutatorName":"MethodExpression","replacement":"allText","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["117","118"],"location":{"end":{"column":34,"line":198},"start":{"column":20,"line":198}}},{"id":"733","mutatorName":"LogicalOperator","replacement":"worksheet[cellAddress] || worksheet[cellAddress].v !== undefined","statusReason":"expected 'Excel Document Error: Cannot read pro…' to contain '=== Sheet1 ==='","status":"Killed","static":false,"testsCompleted":1,"killedBy":["117"],"coveredBy":["117","118"],"location":{"end":{"column":53,"line":190},"start":{"column":15,"line":189}}},{"id":"740","mutatorName":"Regex","replacement":"/\\s/","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["117","118"],"location":{"end":{"column":37,"line":199},"start":{"column":32,"line":199}}},{"id":"739","mutatorName":"MethodExpression","replacement":"text.split(/\\s+/)","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["117","118"],"location":{"end":{"column":72,"line":199},"start":{"column":21,"line":199}}},{"id":"741","mutatorName":"Regex","replacement":"/\\S+/","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["117","118"],"location":{"end":{"column":37,"line":199},"start":{"column":32,"line":199}}},{"id":"742","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"expected 'Excel Spreadsheet: 2 sheet(s), 0 cell…' to contain '=== Sheet1 ==='","status":"Killed","static":false,"testsCompleted":1,"killedBy":["117"],"coveredBy":["117","118"],"location":{"end":{"column":71,"line":199},"start":{"column":46,"line":199}}},{"id":"743","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["117","118"],"location":{"end":{"column":71,"line":199},"start":{"column":56,"line":199}}},{"id":"744","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'Excel Spreadsheet: 2 sheet(s), 0 cell…' to contain '=== Sheet1 ==='","status":"Killed","static":false,"testsCompleted":1,"killedBy":["117"],"coveredBy":["117","118"],"location":{"end":{"column":71,"line":199},"start":{"column":56,"line":199}}},{"id":"745","mutatorName":"EqualityOperator","replacement":"word.length >= 0","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["117","118"],"location":{"end":{"column":71,"line":199},"start":{"column":56,"line":199}}},{"id":"746","mutatorName":"EqualityOperator","replacement":"word.length <= 0","statusReason":"expected 'Excel Spreadsheet: 2 sheet(s), 0 cell…' to contain '=== Sheet1 ==='","status":"Killed","static":false,"testsCompleted":1,"killedBy":["117"],"coveredBy":["117","118"],"location":{"end":{"column":71,"line":199},"start":{"column":56,"line":199}}},{"id":"747","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected '' to contain 'Excel Spreadsheet'","status":"Killed","static":false,"testsCompleted":2,"killedBy":["118"],"coveredBy":["117","118"],"location":{"end":{"column":58,"line":200},"start":{"column":23,"line":200}}},{"id":"748","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'Excel Spreadsheet: 2 sheet(s), 0 cell…' to contain '=== Sheet1 ==='","status":"Killed","static":false,"testsCompleted":1,"killedBy":["117"],"coveredBy":["117","118"],"location":{"end":{"column":58,"line":200},"start":{"column":23,"line":200}}},{"id":"750","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["117","118"],"location":{"end":{"column":38,"line":200},"start":{"column":23,"line":200}}},{"id":"749","mutatorName":"LogicalOperator","replacement":"text.length > 0 || words.length > 0","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["117","118"],"location":{"end":{"column":58,"line":200},"start":{"column":23,"line":200}}},{"id":"751","mutatorName":"EqualityOperator","replacement":"text.length >= 0","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["117","118"],"location":{"end":{"column":38,"line":200},"start":{"column":23,"line":200}}},{"id":"752","mutatorName":"EqualityOperator","replacement":"text.length <= 0","statusReason":"expected 'Excel Spreadsheet: 2 sheet(s), 0 cell…' to contain '=== Sheet1 ==='","status":"Killed","static":false,"testsCompleted":1,"killedBy":["117"],"coveredBy":["117","118"],"location":{"end":{"column":38,"line":200},"start":{"column":23,"line":200}}},{"id":"754","mutatorName":"EqualityOperator","replacement":"words.length >= 0","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["117"],"location":{"end":{"column":58,"line":200},"start":{"column":42,"line":200}}},{"id":"753","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["117"],"location":{"end":{"column":58,"line":200},"start":{"column":42,"line":200}}},{"id":"755","mutatorName":"EqualityOperator","replacement":"words.length <= 0","statusReason":"expected 'Excel Spreadsheet: 2 sheet(s), 0 cell…' to contain '=== Sheet1 ==='","status":"Killed","static":false,"testsCompleted":1,"killedBy":["117"],"coveredBy":["117"],"location":{"end":{"column":58,"line":200},"start":{"column":42,"line":200}}},{"id":"756","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected undefined to be 2 // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["117"],"coveredBy":["117","118"],"location":{"end":{"column":8,"line":206},"start":{"column":46,"line":202}}},{"id":"757","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["117","118"],"location":{"end":{"column":39,"line":205},"start":{"column":22,"line":205}}},{"id":"758","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected undefined to be 'office_spreadsheet' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["117"],"coveredBy":["117","118"],"location":{"end":{"column":8,"line":216},"start":{"column":54,"line":208}}},{"id":"759","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["117","118"],"location":{"end":{"column":26,"line":211},"start":{"column":19,"line":211}}},{"id":"760","mutatorName":"StringLiteral","replacement":"``","statusReason":"expected '' to contain 'Excel Spreadsheet'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["118"],"coveredBy":["118"],"location":{"end":{"column":95,"line":220},"start":{"column":11,"line":220}}},{"id":"762","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'text')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["119"],"coveredBy":["119"],"location":{"end":{"column":6,"line":243},"start":{"column":21,"line":226}}},{"id":"761","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string","status":"Killed","static":false,"testsCompleted":1,"killedBy":["117"],"coveredBy":["117","118"],"location":{"end":{"column":8,"line":225},"start":{"column":14,"line":222}}},{"id":"764","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["119"],"location":{"end":{"column":28,"line":232},"start":{"column":19,"line":232}}},{"id":"763","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected undefined to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["119"],"coveredBy":["119"],"location":{"end":{"column":8,"line":237},"start":{"column":54,"line":230}}},{"id":"765","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["119"],"location":{"end":{"column":28,"line":233},"start":{"column":19,"line":233}}},{"id":"766","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected true to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["119"],"coveredBy":["119"],"location":{"end":{"column":23,"line":234},"start":{"column":18,"line":234}}},{"id":"767","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string","status":"Killed","static":false,"testsCompleted":1,"killedBy":["119"],"coveredBy":["119"],"location":{"end":{"column":8,"line":242},"start":{"column":14,"line":239}}},{"id":"768","mutatorName":"StringLiteral","replacement":"``","statusReason":"expected '' to contain 'Excel Document Error'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["119"],"coveredBy":["119"],"location":{"end":{"column":54,"line":240},"start":{"column":15,"line":240}}},{"id":"770","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'text')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["120"],"coveredBy":["120"],"location":{"end":{"column":6,"line":274},"start":{"column":9,"line":253}}},{"id":"769","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'text')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["120"],"coveredBy":["120"],"location":{"end":{"column":4,"line":292},"start":{"column":6,"line":252}}},{"id":"772","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["120"],"location":{"end":{"column":28,"line":260},"start":{"column":19,"line":260}}},{"id":"771","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected undefined to be 'office_presentation' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["120"],"coveredBy":["120"],"location":{"end":{"column":8,"line":268},"start":{"column":54,"line":258}}},{"id":"773","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["120"],"location":{"end":{"column":28,"line":261},"start":{"column":19,"line":261}}},{"id":"774","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected true to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["120"],"coveredBy":["120"],"location":{"end":{"column":23,"line":262},"start":{"column":18,"line":262}}},{"id":"775","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["120"],"location":{"end":{"column":10,"line":267},"start":{"column":25,"line":265}}},{"id":"776","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["120"],"location":{"end":{"column":46,"line":266},"start":{"column":24,"line":266}}},{"id":"777","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string","status":"Killed","static":false,"testsCompleted":1,"killedBy":["120"],"coveredBy":["120"],"location":{"end":{"column":8,"line":273},"start":{"column":14,"line":270}}},{"id":"778","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to contain 'Text extraction not yet implemented f…'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["120"],"coveredBy":["120"],"location":{"end":{"column":92,"line":271},"start":{"column":15,"line":271}}},{"id":"786","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'supported')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["123"],"coveredBy":["123","124","125","126","127"],"location":{"end":{"column":4,"line":329},"start":{"column":5,"line":300}}},{"id":"787","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["123"],"coveredBy":["123","124","125","126","127"],"location":{"end":{"column":6,"line":304},"start":{"column":24,"line":302}}},{"id":"789","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["123"],"coveredBy":["123","124","125","126","127"],"location":{"end":{"column":56,"line":303},"start":{"column":32,"line":303}}},{"id":"788","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"The \"otherBuffer\" argument must be an instance of Buffer or Uint8Array. Received undefined","status":"Killed","static":false,"testsCompleted":1,"killedBy":["123"],"coveredBy":["123","124","125","126","127"],"location":{"end":{"column":78,"line":303},"start":{"column":7,"line":303}}},{"id":"791","mutatorName":"MethodExpression","replacement":"signatures.every(sig => buffer.subarray(0, 4).equals(sig.signature))","status":"Survived","static":false,"testsCompleted":5,"coveredBy":["123","124","125","126","127"],"location":{"end":{"column":6,"line":308},"start":{"column":24,"line":306}}},{"id":"790","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":5,"coveredBy":["123","124","125","126","127"],"location":{"end":{"column":76,"line":303},"start":{"column":65,"line":303}}},{"id":"792","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["123"],"coveredBy":["123","124","125","126","127"],"location":{"end":{"column":50,"line":307},"start":{"column":40,"line":306}}},{"id":"793","mutatorName":"BooleanLiteral","replacement":"isZipBased","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["123"],"coveredBy":["123","124","125","126","127"],"location":{"end":{"column":20,"line":310},"start":{"column":9,"line":310}}},{"id":"795","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":5,"coveredBy":["123","124","125","126","127"],"location":{"end":{"column":20,"line":310},"start":{"column":9,"line":310}}},{"id":"794","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["123"],"coveredBy":["123","124","125","126","127"],"location":{"end":{"column":20,"line":310},"start":{"column":9,"line":310}}},{"id":"796","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["126","127"],"location":{"end":{"column":6,"line":312},"start":{"column":22,"line":310}}},{"id":"797","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected undefined to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["126"],"coveredBy":["126","127"],"location":{"end":{"column":34,"line":311},"start":{"column":14,"line":311}}},{"id":"798","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected true to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["126"],"coveredBy":["126","127"],"location":{"end":{"column":32,"line":311},"start":{"column":27,"line":311}}},{"id":"799","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected 'office_document' to be 'office_spreadsheet' // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["124"],"coveredBy":["123","124","125"],"location":{"end":{"column":59,"line":316},"start":{"column":52,"line":316}}},{"id":"801","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["123","124","125"],"location":{"end":{"column":58,"line":318},"start":{"column":52,"line":318}}},{"id":"800","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected 'office_spreadsheet' to be 'office_presentation' // Object.is equality","status":"Killed","static":false,"testsCompleted":3,"killedBy":["125"],"coveredBy":["123","124","125"],"location":{"end":{"column":57,"line":317},"start":{"column":52,"line":317}}},{"id":"803","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["123"],"coveredBy":["123","124","125"],"location":{"end":{"column":19,"line":320},"start":{"column":9,"line":320}}},{"id":"802","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'office_document' to be 'office_spreadsheet' // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["124"],"coveredBy":["123","124","125"],"location":{"end":{"column":19,"line":320},"start":{"column":9,"line":320}}},{"id":"804","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["123"],"coveredBy":["123"],"location":{"end":{"column":6,"line":322},"start":{"column":21,"line":320}}},{"id":"805","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected undefined to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["123"],"coveredBy":["123"],"location":{"end":{"column":63,"line":321},"start":{"column":14,"line":321}}},{"id":"806","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["123"],"coveredBy":["123"],"location":{"end":{"column":31,"line":321},"start":{"column":27,"line":321}}},{"id":"807","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'office_spreadsheet' to be 'office_presentation' // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["125"],"coveredBy":["124","125"],"location":{"end":{"column":26,"line":322},"start":{"column":16,"line":322}}},{"id":"808","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["124"],"coveredBy":["124","125"],"location":{"end":{"column":26,"line":322},"start":{"column":16,"line":322}}},{"id":"809","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["124"],"coveredBy":["124"],"location":{"end":{"column":6,"line":324},"start":{"column":28,"line":322}}},{"id":"811","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["124"],"coveredBy":["124"],"location":{"end":{"column":31,"line":323},"start":{"column":27,"line":323}}},{"id":"810","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected undefined to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["124"],"coveredBy":["124"],"location":{"end":{"column":65,"line":323},"start":{"column":14,"line":323}}},{"id":"812","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["125"],"location":{"end":{"column":26,"line":324},"start":{"column":16,"line":324}}},{"id":"813","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["125"],"coveredBy":["125"],"location":{"end":{"column":26,"line":324},"start":{"column":16,"line":324}}},{"id":"814","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["125"],"coveredBy":["125"],"location":{"end":{"column":6,"line":326},"start":{"column":28,"line":324}}},{"id":"815","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected undefined to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["125"],"coveredBy":["125"],"location":{"end":{"column":72,"line":325},"start":{"column":14,"line":325}}},{"id":"819","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","115","117","118","121","128","129","130"],"location":{"end":{"column":4,"line":356},"start":{"column":48,"line":334}}},{"id":"816","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["125"],"coveredBy":["125"],"location":{"end":{"column":31,"line":325},"start":{"column":27,"line":325}}},{"id":"821","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":8,"coveredBy":["114","115","117","118","121","128","129","130"],"location":{"end":{"column":35,"line":335},"start":{"column":9,"line":335}}},{"id":"820","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","115","117","118","121","128","129","130"],"location":{"end":{"column":35,"line":335},"start":{"column":9,"line":335}}},{"id":"822","mutatorName":"LogicalOperator","replacement":"!text && text.length === 0","status":"Survived","static":false,"testsCompleted":8,"coveredBy":["114","115","117","118","121","128","129","130"],"location":{"end":{"column":35,"line":335},"start":{"column":9,"line":335}}},{"id":"823","mutatorName":"BooleanLiteral","replacement":"text","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","115","117","118","121","128","129","130"],"location":{"end":{"column":14,"line":335},"start":{"column":9,"line":335}}},{"id":"824","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":6,"coveredBy":["114","117","121","128","129","130"],"location":{"end":{"column":35,"line":335},"start":{"column":18,"line":335}}},{"id":"825","mutatorName":"EqualityOperator","replacement":"text.length !== 0","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","117","121","128","129","130"],"location":{"end":{"column":35,"line":335},"start":{"column":18,"line":335}}},{"id":"826","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["115","118"],"location":{"end":{"column":53,"line":335},"start":{"column":44,"line":335}}},{"id":"827","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","117","121","128","129","130"],"location":{"end":{"column":59,"line":344},"start":{"column":29,"line":344}}},{"id":"829","mutatorName":"LogicalOperator","replacement":"text.match(englishWords) && []","statusReason":"expected 'es' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","117","121","128","129","130"],"location":{"end":{"column":59,"line":344},"start":{"column":29,"line":344}}},{"id":"828","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","117","121","128","129","130"],"location":{"end":{"column":59,"line":344},"start":{"column":29,"line":344}}},{"id":"830","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","statusReason":"expected 'en' to be 'unknown' // Object.is equality","status":"Killed","static":false,"testsCompleted":4,"killedBy":["130"],"coveredBy":["117","121","129","130"],"location":{"end":{"column":59,"line":344},"start":{"column":57,"line":344}}},{"id":"831","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","117","121","128","129","130"],"location":{"end":{"column":59,"line":345},"start":{"column":29,"line":345}}},{"id":"832","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","117","121","128","129","130"],"location":{"end":{"column":59,"line":345},"start":{"column":29,"line":345}}},{"id":"833","mutatorName":"LogicalOperator","replacement":"text.match(spanishWords) && []","statusReason":"expected 'Excel Document Error: Cannot read pro…' to contain '=== Sheet1 ==='","status":"Killed","static":false,"testsCompleted":2,"killedBy":["117"],"coveredBy":["114","117","121","128","129","130"],"location":{"end":{"column":59,"line":345},"start":{"column":29,"line":345}}},{"id":"835","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","117","121","128","129","130"],"location":{"end":{"column":57,"line":346},"start":{"column":28,"line":346}}},{"id":"834","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","statusReason":"expected 'es' to be 'unknown' // Object.is equality","status":"Killed","static":false,"testsCompleted":4,"killedBy":["130"],"coveredBy":["117","121","128","130"],"location":{"end":{"column":59,"line":345},"start":{"column":57,"line":345}}},{"id":"836","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","117","121","128","129","130"],"location":{"end":{"column":57,"line":346},"start":{"column":28,"line":346}}},{"id":"837","mutatorName":"LogicalOperator","replacement":"text.match(frenchWords) && []","statusReason":"expected 'Word Document Error: Cannot read prop…' to be 'This is the content of a Word documen…' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","117","121","128","129","130"],"location":{"end":{"column":57,"line":346},"start":{"column":28,"line":346}}},{"id":"839","mutatorName":"MethodExpression","replacement":"Math.min(englishMatches, spanishMatches, frenchMatches)","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","117","121","128","129","130"],"location":{"end":{"column":79,"line":348},"start":{"column":24,"line":348}}},{"id":"838","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","statusReason":"expected 'fr' to be 'unknown' // Object.is equality","status":"Killed","static":false,"testsCompleted":6,"killedBy":["130"],"coveredBy":["114","117","121","128","129","130"],"location":{"end":{"column":57,"line":346},"start":{"column":55,"line":346}}},{"id":"840","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","117","121","128","129","130"],"location":{"end":{"column":25,"line":350},"start":{"column":9,"line":350}}},{"id":"841","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'en' to be 'unknown' // Object.is equality","status":"Killed","static":false,"testsCompleted":6,"killedBy":["130"],"coveredBy":["114","117","121","128","129","130"],"location":{"end":{"column":25,"line":350},"start":{"column":9,"line":350}}},{"id":"843","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to be 'unknown' // Object.is equality","status":"Killed","static":false,"testsCompleted":3,"killedBy":["130"],"coveredBy":["117","121","130"],"location":{"end":{"column":43,"line":350},"start":{"column":34,"line":350}}},{"id":"842","mutatorName":"EqualityOperator","replacement":"maxMatches !== 0","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","117","121","128","129","130"],"location":{"end":{"column":25,"line":350},"start":{"column":9,"line":350}}},{"id":"845","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","128","129"],"location":{"end":{"column":38,"line":351},"start":{"column":9,"line":351}}},{"id":"844","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'en' to be 'es' // Object.is equality","status":"Killed","static":false,"testsCompleted":3,"killedBy":["129"],"coveredBy":["114","128","129"],"location":{"end":{"column":38,"line":351},"start":{"column":9,"line":351}}},{"id":"847","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","128"],"location":{"end":{"column":51,"line":351},"start":{"column":47,"line":351}}},{"id":"846","mutatorName":"EqualityOperator","replacement":"maxMatches !== englishMatches","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["114"],"coveredBy":["114","128","129"],"location":{"end":{"column":38,"line":351},"start":{"column":9,"line":351}}},{"id":"848","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["129"],"location":{"end":{"column":38,"line":352},"start":{"column":9,"line":352}}},{"id":"849","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'unknown' to be 'es' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["129"],"coveredBy":["129"],"location":{"end":{"column":38,"line":352},"start":{"column":9,"line":352}}},{"id":"851","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to be 'es' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["129"],"coveredBy":["129"],"location":{"end":{"column":51,"line":352},"start":{"column":47,"line":352}}},{"id":"850","mutatorName":"EqualityOperator","replacement":"maxMatches !== spanishMatches","statusReason":"expected 'unknown' to be 'es' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["129"],"coveredBy":["129"],"location":{"end":{"column":38,"line":352},"start":{"column":9,"line":352}}}],"source":"import * as mammoth from \"mammoth\";\nimport * as XLSX from \"xlsx\";\nimport { ContentType, ContentMetadata } from \"../multi-modal.js\";\nimport * as fs from \"fs\";\n\nexport interface OfficeMetadata {\n  title?: string;\n  author?: string;\n  created?: Date;\n  modified?: Date;\n  application?: string;\n  wordCount?: number;\n  pageCount?: number;\n  sheetCount?: number;\n  slideCount?: number;\n}\n\nexport interface OfficeContentMetadata extends ContentMetadata {\n  officeMetadata?: OfficeMetadata;\n  hasText: boolean;\n  wordCount: number;\n  characterCount: number;\n}\n\nexport class OfficeProcessor {\n  /**\n   * Extract text from Office documents\n   */\n  async extractTextFromBuffer(\n    buffer: Buffer,\n    contentType: ContentType\n  ): Promise<{\n    text: string;\n    metadata: OfficeContentMetadata;\n  }> {\n    try {\n      switch (contentType) {\n        case ContentType.OFFICE_DOC:\n          return await this.extractDocxFromBuffer(buffer);\n        case ContentType.OFFICE_SHEET:\n          return await this.extractXlsxFromBuffer(buffer);\n        case ContentType.OFFICE_PRESENTATION:\n          return await this.extractPptxFromBuffer(buffer);\n        default:\n          throw new Error(`Unsupported Office document type: ${contentType}`);\n      }\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      const contentMetadata: OfficeContentMetadata = {\n        type: contentType,\n        language: \"unknown\",\n        encoding: \"unknown\",\n        hasText: false,\n        wordCount: 0,\n        characterCount: 0,\n      };\n\n      return {\n        text: `Office Document Error: ${errorMessage}`,\n        metadata: contentMetadata,\n      };\n    }\n  }\n\n  /**\n   * Extract text from Office document files\n   */\n  async extractTextFromFile(\n    filePath: string,\n    contentType: ContentType\n  ): Promise<{\n    text: string;\n    metadata: OfficeContentMetadata;\n  }> {\n    try {\n      const buffer = fs.readFileSync(filePath);\n      return await this.extractTextFromBuffer(buffer, contentType);\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      const contentMetadata: OfficeContentMetadata = {\n        type: contentType,\n        language: \"unknown\",\n        encoding: \"unknown\",\n        hasText: false,\n        wordCount: 0,\n        characterCount: 0,\n      };\n\n      return {\n        text: `Office Document Error: Failed to read file - ${errorMessage}`,\n        metadata: contentMetadata,\n      };\n    }\n  }\n\n  /**\n   * Extract text from DOCX files\n   */\n  private async extractDocxFromBuffer(buffer: Buffer): Promise<{\n    text: string;\n    metadata: OfficeContentMetadata;\n  }> {\n    try {\n      const result = await mammoth.extractRawText({ buffer });\n\n      const text = result.value.trim();\n      const words = text.split(/\\s+/).filter((word) => word.length > 0);\n      const hasText = text.length > 0 && words.length > 0;\n\n      // Try to extract some basic metadata from the XML structure\n      const officeMetadata: OfficeMetadata = {\n        wordCount: words.length,\n        // Additional metadata extraction could be added here\n      };\n\n      const contentMetadata: OfficeContentMetadata = {\n        type: ContentType.OFFICE_DOC,\n        language: this.detectLanguage(text),\n        encoding: \"utf-8\",\n        hasText,\n        wordCount: words.length,\n        characterCount: text.length,\n        officeMetadata,\n      };\n\n      const finalText = hasText\n        ? text\n        : \"Word Document: No readable text content found\";\n\n      return {\n        text: finalText,\n        metadata: contentMetadata,\n      };\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      const contentMetadata: OfficeContentMetadata = {\n        type: ContentType.OFFICE_DOC,\n        language: \"unknown\",\n        encoding: \"unknown\",\n        hasText: false,\n        wordCount: 0,\n        characterCount: 0,\n      };\n\n      return {\n        text: `Word Document Error: ${errorMessage}`,\n        metadata: contentMetadata,\n      };\n    }\n  }\n\n  /**\n   * Extract text from XLSX files\n   */\n  private async extractXlsxFromBuffer(buffer: Buffer): Promise<{\n    text: string;\n    metadata: OfficeContentMetadata;\n  }> {\n    try {\n      const workbook = XLSX.read(buffer, { type: \"buffer\" });\n\n      let allText = \"\";\n      const sheetNames: string[] = [];\n      let totalCells = 0;\n\n      // Extract text from all worksheets\n      workbook.SheetNames.forEach((sheetName) => {\n        sheetNames.push(sheetName);\n        const worksheet = workbook.Sheets[sheetName];\n\n        // Convert sheet to CSV-like text\n        const csvText = XLSX.utils.sheet_to_csv(worksheet);\n        if (csvText.trim()) {\n          allText += `\\n=== ${sheetName} ===\\n${csvText}\\n`;\n        }\n\n        // Count cells with content\n        const range = XLSX.utils.decode_range(worksheet[\"!ref\"] || \"A1:A1\");\n        for (let row = range.s.r; row <= range.e.r; row++) {\n          for (let col = range.s.c; col <= range.e.c; col++) {\n            const cellAddress = XLSX.utils.encode_cell({ r: row, c: col });\n            if (\n              worksheet[cellAddress] &&\n              worksheet[cellAddress].v !== undefined\n            ) {\n              totalCells++;\n            }\n          }\n        }\n      });\n\n      const text = allText.trim();\n      const words = text.split(/\\s+/).filter((word) => word.length > 0);\n      const hasText = text.length > 0 && words.length > 0;\n\n      const officeMetadata: OfficeMetadata = {\n        sheetCount: sheetNames.length,\n        wordCount: words.length,\n        application: \"Microsoft Excel\",\n      };\n\n      const contentMetadata: OfficeContentMetadata = {\n        type: ContentType.OFFICE_SHEET,\n        language: this.detectLanguage(text),\n        encoding: \"utf-8\",\n        hasText,\n        wordCount: words.length,\n        characterCount: text.length,\n        officeMetadata,\n      };\n\n      const finalText = hasText\n        ? text\n        : `Excel Spreadsheet: ${sheetNames.length} sheet(s), ${totalCells} cells with content`;\n\n      return {\n        text: finalText,\n        metadata: contentMetadata,\n      };\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      const contentMetadata: OfficeContentMetadata = {\n        type: ContentType.OFFICE_SHEET,\n        language: \"unknown\",\n        encoding: \"unknown\",\n        hasText: false,\n        wordCount: 0,\n        characterCount: 0,\n      };\n\n      return {\n        text: `Excel Document Error: ${errorMessage}`,\n        metadata: contentMetadata,\n      };\n    }\n  }\n\n  /**\n   * Extract text from PPTX files (basic implementation)\n   */\n  private async extractPptxFromBuffer(buffer: Buffer): Promise<{\n    text: string;\n    metadata: OfficeContentMetadata;\n  }> {\n    try {\n      // For now, provide basic PPTX handling\n      // A full implementation would require extracting text from slide XML files\n      // This is a placeholder that could be enhanced with additional libraries\n\n      const contentMetadata: OfficeContentMetadata = {\n        type: ContentType.OFFICE_PRESENTATION,\n        language: \"unknown\",\n        encoding: \"unknown\",\n        hasText: false,\n        wordCount: 0,\n        characterCount: 0,\n        officeMetadata: {\n          application: \"Microsoft PowerPoint\",\n        },\n      };\n\n      return {\n        text: \"PowerPoint Presentation: Text extraction not yet implemented for PPTX files\",\n        metadata: contentMetadata,\n      };\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      const contentMetadata: OfficeContentMetadata = {\n        type: ContentType.OFFICE_PRESENTATION,\n        language: \"unknown\",\n        encoding: \"unknown\",\n        hasText: false,\n        wordCount: 0,\n        characterCount: 0,\n      };\n\n      return {\n        text: `PowerPoint Document Error: ${errorMessage}`,\n        metadata: contentMetadata,\n      };\n    }\n  }\n\n  /**\n   * Check if a file is a supported Office document\n   */\n  isSupportedOfficeDocument(buffer: Buffer): {\n    supported: boolean;\n    type?: ContentType;\n  } {\n    // Office document signatures\n    const signatures = [\n      { signature: Buffer.from([0x50, 0x4b, 0x03, 0x04]), type: \"zip-based\" }, // PK.. (ZIP/OFFICE)\n    ];\n\n    const isZipBased = signatures.some((sig) =>\n      buffer.subarray(0, 4).equals(sig.signature)\n    );\n\n    if (!isZipBased) {\n      return { supported: false };\n    }\n\n    // Check for Office document content types by examining ZIP structure\n    // This is a simplified check - in production, you'd parse the ZIP and check [Content_Types].xml\n    const docxMarker = buffer.includes(Buffer.from(\"word/\"));\n    const xlsxMarker = buffer.includes(Buffer.from(\"xl/\"));\n    const pptxMarker = buffer.includes(Buffer.from(\"ppt/\"));\n\n    if (docxMarker) {\n      return { supported: true, type: ContentType.OFFICE_DOC };\n    } else if (xlsxMarker) {\n      return { supported: true, type: ContentType.OFFICE_SHEET };\n    } else if (pptxMarker) {\n      return { supported: true, type: ContentType.OFFICE_PRESENTATION };\n    }\n\n    return { supported: false };\n  }\n\n  /**\n   * Simple language detection based on common patterns\n   */\n  private detectLanguage(text: string): string {\n    if (!text || text.length === 0) return \"unknown\";\n\n    // Simple heuristics for language detection\n    const englishWords = /\\b(the|and|or|but|in|on|at|to|for|of|with|by)\\b/gi;\n    const spanishWords =\n      /\\b(el|la|los|las|y|o|pero|en|sobre|a|para|de|con|por)\\b/gi;\n    const frenchWords =\n      /\\b(le|la|les|et|ou|mais|dans|sur|à|pour|de|avec|par)\\b/gi;\n\n    const englishMatches = (text.match(englishWords) || []).length;\n    const spanishMatches = (text.match(spanishWords) || []).length;\n    const frenchMatches = (text.match(frenchWords) || []).length;\n\n    const maxMatches = Math.max(englishMatches, spanishMatches, frenchMatches);\n\n    if (maxMatches === 0) return \"unknown\";\n    if (maxMatches === englishMatches) return \"en\";\n    if (maxMatches === spanishMatches) return \"es\";\n    if (maxMatches === frenchMatches) return \"fr\";\n\n    return \"unknown\";\n  }\n}\n"},"src/lib/processors/speech-processor.ts":{"language":"typescript","mutants":[{"id":"872","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":72},"start":{"column":21,"line":69}}},{"id":"873","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":69,"line":70},"start":{"column":20,"line":70}}},{"id":"879","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":8,"line":99},"start":{"column":29,"line":94}}},{"id":"880","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":51,"line":96},"start":{"column":11,"line":96}}},{"id":"959","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":6,"line":242},"start":{"column":21,"line":240}}},{"id":"1004","mutatorName":"ConditionalExpression","replacement":"true","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":37,"line":297},"start":{"column":9,"line":297}}},{"id":"1005","mutatorName":"ConditionalExpression","replacement":"false","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":37,"line":297},"start":{"column":9,"line":297}}},{"id":"1006","mutatorName":"EqualityOperator","replacement":"maxMatches !== frenchMatches","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":37,"line":297},"start":{"column":9,"line":297}}},{"id":"1007","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":50,"line":297},"start":{"column":46,"line":297}}},{"id":"1008","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":21,"line":299},"start":{"column":12,"line":299}}},{"id":"857","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected 'Audio: Speech recognition model not a…' to be 'This is a test transcription.' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["77"],"coveredBy":["77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95"],"location":{"end":{"column":30,"line":30},"start":{"column":25,"line":30}}},{"id":"858","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'Audio: Speech recognition model not a…' to be 'This is a test transcription.' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["77"],"coveredBy":["77","78","79","80","81","82","88","89","90","91","92","93","94","95"],"location":{"end":{"column":4,"line":73},"start":{"column":37,"line":35}}},{"id":"859","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'Audio: Speech recognition model not a…' to be 'This is a test transcription.' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["77"],"coveredBy":["77","78","79","80","81","82","88","89","90","91","92","93","94","95"],"location":{"end":{"column":25,"line":36},"start":{"column":9,"line":36}}},{"id":"860","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":14,"coveredBy":["77","78","79","80","81","82","88","89","90","91","92","93","94","95"],"location":{"end":{"column":25,"line":36},"start":{"column":9,"line":36}}},{"id":"861","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'Audio: Speech recognition model not a…' to be 'This is a test transcription.' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["77"],"coveredBy":["77","78","79","80","81","82","88","89","90","91","92","93","94","95"],"location":{"end":{"column":6,"line":69},"start":{"column":9,"line":38}}},{"id":"862","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","static":false,"testsCompleted":14,"coveredBy":["77","78","79","80","81","82","88","89","90","91","92","93","94","95"],"location":{"end":{"column":8,"line":52},"start":{"column":40,"line":41}}},{"id":"863","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":14,"coveredBy":["77","78","79","80","81","82","88","89","90","91","92","93","94","95"],"location":{"end":{"column":95,"line":43},"start":{"column":11,"line":43}}},{"id":"864","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":14,"coveredBy":["77","78","79","80","81","82","88","89","90","91","92","93","94","95"],"location":{"end":{"column":95,"line":45},"start":{"column":11,"line":45}}},{"id":"866","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":14,"coveredBy":["77","78","79","80","81","82","88","89","90","91","92","93","94","95"],"location":{"end":{"column":78,"line":49},"start":{"column":11,"line":49}}},{"id":"865","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":14,"coveredBy":["77","78","79","80","81","82","88","89","90","91","92","93","94","95"],"location":{"end":{"column":94,"line":47},"start":{"column":11,"line":47}}},{"id":"868","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","static":false,"testsCompleted":14,"coveredBy":["77","78","79","80","81","82","88","89","90","91","92","93","94","95"],"location":{"end":{"column":8,"line":62},"start":{"column":50,"line":54}}},{"id":"867","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":14,"coveredBy":["77","78","79","80","81","82","88","89","90","91","92","93","94","95"],"location":{"end":{"column":24,"line":51},"start":{"column":19,"line":51}}},{"id":"870","mutatorName":"BooleanLiteral","replacement":"false","status":"Survived","static":false,"testsCompleted":14,"coveredBy":["77","78","79","80","81","82","88","89","90","91","92","93","94","95"],"location":{"end":{"column":29,"line":58},"start":{"column":25,"line":58}}},{"id":"869","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":14,"coveredBy":["77","78","79","80","81","82","88","89","90","91","92","93","94","95"],"location":{"end":{"column":40,"line":56},"start":{"column":25,"line":56}}},{"id":"874","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'text')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["77"],"coveredBy":["77","78","79","80","81","82","88","89","90","91","92","93","94","95"],"location":{"end":{"column":4,"line":167},"start":{"column":6,"line":87}}},{"id":"871","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":10,"killedBy":["91"],"coveredBy":["77","78","79","80","81","82","88","89","90","91","92","93","94","95"],"location":{"end":{"column":30,"line":68},"start":{"column":26,"line":68}}},{"id":"875","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'text')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["77"],"coveredBy":["77","78","79","80","81","82","88","89","90","91","92","93","94","95"],"location":{"end":{"column":6,"line":159},"start":{"column":9,"line":88}}},{"id":"876","mutatorName":"BooleanLiteral","replacement":"this.recognizer","statusReason":"expected 'Audio: Speech recognition model not a…' to be 'This is a test transcription.' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["77"],"coveredBy":["77","78","79","80","81","82","88","89","90","91","92","93","94","95"],"location":{"end":{"column":27,"line":94},"start":{"column":11,"line":94}}},{"id":"878","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":14,"coveredBy":["77","78","79","80","81","82","88","89","90","91","92","93","94","95"],"location":{"end":{"column":27,"line":94},"start":{"column":11,"line":94}}},{"id":"877","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'Audio: Speech recognition model not a…' to be 'This is a test transcription.' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["77"],"coveredBy":["77","78","79","80","81","82","88","89","90","91","92","93","94","95"],"location":{"end":{"column":27,"line":94},"start":{"column":11,"line":94}}},{"id":"881","mutatorName":"BooleanLiteral","replacement":"audioData","statusReason":"expected 'Audio: Unsupported audio format' to be 'This is a test transcription.' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["77"],"coveredBy":["77","78","79","80","81","82","88","89","90","91","92","93","94","95"],"location":{"end":{"column":21,"line":105},"start":{"column":11,"line":105}}},{"id":"882","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'Audio: Unsupported audio format' to be 'This is a test transcription.' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["77"],"coveredBy":["77","78","79","80","81","82","88","89","90","91","92","93","94","95"],"location":{"end":{"column":21,"line":105},"start":{"column":11,"line":105}}},{"id":"884","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'Audio: Speech processing error: Canno…' to contain 'Unsupported audio format'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["81"],"coveredBy":["81","93"],"location":{"end":{"column":8,"line":107},"start":{"column":23,"line":105}}},{"id":"883","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'Audio: Speech processing error: Canno…' to contain 'Unsupported audio format'","status":"Killed","static":false,"testsCompleted":5,"killedBy":["81"],"coveredBy":["77","78","79","80","81","82","88","89","90","91","92","93","94","95"],"location":{"end":{"column":21,"line":105},"start":{"column":11,"line":105}}},{"id":"886","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":11,"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":43,"line":116},"start":{"column":23,"line":116}}},{"id":"885","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected 'Audio: ' to contain 'Unsupported audio format'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["81"],"coveredBy":["81","93"],"location":{"end":{"column":68,"line":106},"start":{"column":42,"line":106}}},{"id":"887","mutatorName":"EqualityOperator","replacement":"i <= audioData.length","status":"Survived","static":false,"testsCompleted":11,"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":43,"line":116},"start":{"column":23,"line":116}}},{"id":"888","mutatorName":"EqualityOperator","replacement":"i >= audioData.length","status":"Survived","static":false,"testsCompleted":11,"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":43,"line":116},"start":{"column":23,"line":116}}},{"id":"890","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":11,"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":8,"line":119},"start":{"column":67,"line":116}}},{"id":"889","mutatorName":"AssignmentOperator","replacement":"i -= samplesPerChunk","statusReason":"Hit limit reached (1203/1200)","status":"Timeout","static":false,"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":65,"line":116},"start":{"column":45,"line":116}}},{"id":"891","mutatorName":"MethodExpression","replacement":"audioData","status":"Survived","static":false,"testsCompleted":11,"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":62,"line":117},"start":{"column":23,"line":117}}},{"id":"892","mutatorName":"ArithmeticOperator","replacement":"i - samplesPerChunk","status":"Survived","static":false,"testsCompleted":11,"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":61,"line":117},"start":{"column":42,"line":117}}},{"id":"893","mutatorName":"ArithmeticOperator","replacement":"Date.now() + startTime","status":"Survived","static":false,"testsCompleted":11,"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":52,"line":125},"start":{"column":30,"line":125}}},{"id":"894","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'Audio: Speech processing error: text.…' to be 'This is a test transcription.' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["77"],"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":45,"line":126},"start":{"column":20,"line":126}}},{"id":"895","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'Audio: Speech processing error: text.…' to be 'This is a test transcription.' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["77"],"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":45,"line":126},"start":{"column":20,"line":126}}},{"id":"896","mutatorName":"LogicalOperator","replacement":"result.text?.trim() && \"\"","statusReason":"expected 'Audio: No speech detected or transcri…' to be 'This is a test transcription.' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["77"],"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":45,"line":126},"start":{"column":20,"line":126}}},{"id":"898","mutatorName":"OptionalChaining","replacement":"result.text.trim","status":"Survived","static":false,"testsCompleted":11,"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":37,"line":126},"start":{"column":20,"line":126}}},{"id":"897","mutatorName":"MethodExpression","replacement":"result.text","status":"Survived","static":false,"testsCompleted":11,"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":39,"line":126},"start":{"column":20,"line":126}}},{"id":"899","mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","statusReason":"expected 'Stryker was here!' to contain 'No speech detected'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["78"],"coveredBy":["78"],"location":{"end":{"column":45,"line":126},"start":{"column":43,"line":126}}},{"id":"900","mutatorName":"MethodExpression","replacement":"text.split(/\\s+/)","statusReason":"expected 1 to be +0 // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["78"],"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":72,"line":127},"start":{"column":21,"line":127}}},{"id":"901","mutatorName":"Regex","replacement":"/\\s/","status":"Survived","static":false,"testsCompleted":11,"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":37,"line":127},"start":{"column":32,"line":127}}},{"id":"902","mutatorName":"Regex","replacement":"/\\S+/","statusReason":"expected 4 to be 5 // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["77"],"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":37,"line":127},"start":{"column":32,"line":127}}},{"id":"904","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 1 to be +0 // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["78"],"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":71,"line":127},"start":{"column":56,"line":127}}},{"id":"903","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"expected 'Audio: No speech detected or transcri…' to be 'This is a test transcription.' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["77"],"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":71,"line":127},"start":{"column":46,"line":127}}},{"id":"905","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'Audio: No speech detected or transcri…' to be 'This is a test transcription.' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["77"],"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":71,"line":127},"start":{"column":56,"line":127}}},{"id":"906","mutatorName":"EqualityOperator","replacement":"word.length >= 0","statusReason":"expected 1 to be +0 // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["78"],"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":71,"line":127},"start":{"column":56,"line":127}}},{"id":"908","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected '' to contain 'No speech detected'","status":"Killed","static":false,"testsCompleted":2,"killedBy":["78"],"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":58,"line":128},"start":{"column":23,"line":128}}},{"id":"907","mutatorName":"EqualityOperator","replacement":"word.length <= 0","statusReason":"expected 'Audio: No speech detected or transcri…' to be 'This is a test transcription.' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["77"],"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":71,"line":127},"start":{"column":56,"line":127}}},{"id":"910","mutatorName":"LogicalOperator","replacement":"text.length > 0 || words.length > 0","status":"Survived","static":false,"testsCompleted":11,"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":58,"line":128},"start":{"column":23,"line":128}}},{"id":"909","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'Audio: No speech detected or transcri…' to be 'This is a test transcription.' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["77"],"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":58,"line":128},"start":{"column":23,"line":128}}},{"id":"912","mutatorName":"EqualityOperator","replacement":"text.length >= 0","status":"Survived","static":false,"testsCompleted":11,"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":38,"line":128},"start":{"column":23,"line":128}}},{"id":"911","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":11,"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":38,"line":128},"start":{"column":23,"line":128}}},{"id":"914","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":10,"coveredBy":["77","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":58,"line":128},"start":{"column":42,"line":128}}},{"id":"913","mutatorName":"EqualityOperator","replacement":"text.length <= 0","statusReason":"expected 'Audio: No speech detected or transcri…' to be 'This is a test transcription.' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["77"],"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":38,"line":128},"start":{"column":23,"line":128}}},{"id":"915","mutatorName":"EqualityOperator","replacement":"words.length >= 0","status":"Survived","static":false,"testsCompleted":10,"coveredBy":["77","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":58,"line":128},"start":{"column":42,"line":128}}},{"id":"916","mutatorName":"EqualityOperator","replacement":"words.length <= 0","statusReason":"expected 'Audio: No speech detected or transcri…' to be 'This is a test transcription.' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["77"],"coveredBy":["77","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":58,"line":128},"start":{"column":42,"line":128}}},{"id":"917","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected undefined to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["77"],"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":8,"line":141},"start":{"column":46,"line":133}}},{"id":"918","mutatorName":"ArithmeticOperator","replacement":"audioData.length * (options.sampleRate || 16000)","status":"Survived","static":false,"testsCompleted":11,"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":67,"line":134},"start":{"column":19,"line":134}}},{"id":"920","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":11,"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":66,"line":134},"start":{"column":39,"line":134}}},{"id":"919","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":11,"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":66,"line":134},"start":{"column":39,"line":134}}},{"id":"921","mutatorName":"LogicalOperator","replacement":"options.sampleRate && 16000","status":"Survived","static":false,"testsCompleted":11,"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":66,"line":134},"start":{"column":39,"line":134}}},{"id":"922","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to be 16000 // Object.is equality","status":"Killed","static":false,"testsCompleted":10,"killedBy":["94"],"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":48,"line":135},"start":{"column":21,"line":135}}},{"id":"924","mutatorName":"LogicalOperator","replacement":"options.sampleRate && 16000","status":"Survived","static":false,"testsCompleted":11,"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":48,"line":135},"start":{"column":21,"line":135}}},{"id":"923","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected false to be 16000 // Object.is equality","status":"Killed","static":false,"testsCompleted":10,"killedBy":["94"],"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":48,"line":135},"start":{"column":21,"line":135}}},{"id":"925","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["77"],"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":43,"line":139},"start":{"column":19,"line":139}}},{"id":"926","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected false to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["77"],"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":43,"line":139},"start":{"column":19,"line":139}}},{"id":"928","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["77"],"coveredBy":["77","78","82","88","89","90","91","92","94","95"],"location":{"end":{"column":43,"line":139},"start":{"column":39,"line":139}}},{"id":"927","mutatorName":"LogicalOperator","replacement":"options.language && \"en\"","statusReason":"expected undefined to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["77"],"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":43,"line":139},"start":{"column":19,"line":139}}},{"id":"930","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected undefined to be 'audio' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["77"],"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":8,"line":151},"start":{"column":54,"line":143}}},{"id":"929","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to be 'sherpa-onnx' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["77"],"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":30,"line":140},"start":{"column":17,"line":140}}},{"id":"932","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected undefined to be 'This is a test transcription.' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["77"],"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":8,"line":158},"start":{"column":14,"line":153}}},{"id":"931","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":11,"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":26,"line":146},"start":{"column":19,"line":146}}},{"id":"934","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'text')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["79"],"coveredBy":["79"],"location":{"end":{"column":6,"line":166},"start":{"column":21,"line":159}}},{"id":"933","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to contain 'No speech detected'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["78"],"coveredBy":["78"],"location":{"end":{"column":64,"line":156},"start":{"column":13,"line":156}}},{"id":"936","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'text')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["82"],"coveredBy":["82","83"],"location":{"end":{"column":4,"line":203},"start":{"column":6,"line":181}}},{"id":"935","mutatorName":"StringLiteral","replacement":"``","statusReason":"expected 'Audio: ' to contain 'Speech processing error'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["79"],"coveredBy":["79"],"location":{"end":{"column":51,"line":163},"start":{"column":9,"line":163}}},{"id":"937","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'text')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["82"],"coveredBy":["82","83"],"location":{"end":{"column":6,"line":185},"start":{"column":9,"line":182}}},{"id":"938","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'text')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["83"],"coveredBy":["83"],"location":{"end":{"column":6,"line":202},"start":{"column":21,"line":185}}},{"id":"940","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["83"],"location":{"end":{"column":28,"line":191},"start":{"column":19,"line":191}}},{"id":"939","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected undefined to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["83"],"coveredBy":["83"],"location":{"end":{"column":8,"line":196},"start":{"column":54,"line":189}}},{"id":"941","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["83"],"location":{"end":{"column":28,"line":192},"start":{"column":19,"line":192}}},{"id":"942","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected true to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["83"],"coveredBy":["83"],"location":{"end":{"column":23,"line":193},"start":{"column":18,"line":193}}},{"id":"943","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string","status":"Killed","static":false,"testsCompleted":1,"killedBy":["83"],"coveredBy":["83"],"location":{"end":{"column":8,"line":201},"start":{"column":14,"line":198}}},{"id":"944","mutatorName":"StringLiteral","replacement":"``","statusReason":"expected '' to contain 'Failed to read file'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["83"],"coveredBy":["83"],"location":{"end":{"column":72,"line":199},"start":{"column":15,"line":199}}},{"id":"945","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["84"],"coveredBy":["84","85","86","87"],"location":{"end":{"column":4,"line":223},"start":{"column":51,"line":208}}},{"id":"946","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["84"],"coveredBy":["84","85","86","87"],"location":{"end":{"column":6,"line":216},"start":{"column":24,"line":210}}},{"id":"947","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected true to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":4,"killedBy":["87"],"coveredBy":["84","85","86","87"],"location":{"end":{"column":43,"line":211},"start":{"column":19,"line":211}}},{"id":"948","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected true to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":4,"killedBy":["87"],"coveredBy":["84","85","86","87"],"location":{"end":{"column":43,"line":212},"start":{"column":19,"line":212}}},{"id":"949","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected true to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":4,"killedBy":["87"],"coveredBy":["84","85","86","87"],"location":{"end":{"column":37,"line":213},"start":{"column":19,"line":213}}},{"id":"950","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected true to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":4,"killedBy":["87"],"coveredBy":["84","85","86","87"],"location":{"end":{"column":43,"line":214},"start":{"column":19,"line":214}}},{"id":"951","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected true to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":4,"killedBy":["87"],"coveredBy":["84","85","86","87"],"location":{"end":{"column":43,"line":215},"start":{"column":19,"line":215}}},{"id":"952","mutatorName":"MethodExpression","replacement":"signatures.every(signature => buffer.subarray(0, 4).equals(signature) || buffer.subarray(0, signature.length).equals(signature))","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["84"],"coveredBy":["84","85","86","87"],"location":{"end":{"column":6,"line":222},"start":{"column":12,"line":218}}},{"id":"954","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":4,"killedBy":["87"],"coveredBy":["84","85","86","87"],"location":{"end":{"column":63,"line":221},"start":{"column":9,"line":220}}},{"id":"953","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["84"],"coveredBy":["84","85","86","87"],"location":{"end":{"column":63,"line":221},"start":{"column":7,"line":219}}},{"id":"956","mutatorName":"LogicalOperator","replacement":"buffer.subarray(0, 4).equals(signature) && buffer.subarray(0, signature.length).equals(signature)","status":"Survived","static":false,"testsCompleted":4,"coveredBy":["84","85","86","87"],"location":{"end":{"column":63,"line":221},"start":{"column":9,"line":220}}},{"id":"955","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["84"],"coveredBy":["84","85","86","87"],"location":{"end":{"column":63,"line":221},"start":{"column":9,"line":220}}},{"id":"957","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["93"],"location":{"end":{"column":4,"line":243},"start":{"column":73,"line":229}}},{"id":"958","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["93"],"location":{"end":{"column":6,"line":240},"start":{"column":9,"line":230}}},{"id":"960","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'text')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["79"],"coveredBy":["79","81","93"],"location":{"end":{"column":4,"line":273},"start":{"column":5,"line":254}}},{"id":"961","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"expected undefined to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["79"],"coveredBy":["79","81","93"],"location":{"end":{"column":6,"line":267},"start":{"column":52,"line":255}}},{"id":"962","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["79","81","93"],"location":{"end":{"column":26,"line":257},"start":{"column":17,"line":257}}},{"id":"963","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["79","81","93"],"location":{"end":{"column":26,"line":258},"start":{"column":17,"line":258}}},{"id":"964","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"expected true to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["79"],"coveredBy":["79","81","93"],"location":{"end":{"column":21,"line":259},"start":{"column":16,"line":259}}},{"id":"965","mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["79","81","93"],"location":{"end":{"column":8,"line":266},"start":{"column":23,"line":262}}},{"id":"966","mutatorName":"ArithmeticOperator","replacement":"Date.now() + startTime","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["79","81","93"],"location":{"end":{"column":47,"line":263},"start":{"column":25,"line":263}}},{"id":"967","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["79","81","93"],"location":{"end":{"column":28,"line":264},"start":{"column":19,"line":264}}},{"id":"968","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["79","81","93"],"location":{"end":{"column":23,"line":265},"start":{"column":17,"line":265}}},{"id":"969","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string","status":"Killed","static":false,"testsCompleted":1,"killedBy":["79"],"coveredBy":["79","81","93"],"location":{"end":{"column":6,"line":272},"start":{"column":12,"line":269}}},{"id":"970","mutatorName":"StringLiteral","replacement":"``","statusReason":"expected '' to contain 'Speech processing error'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["79"],"coveredBy":["79","81","93"],"location":{"end":{"column":31,"line":270},"start":{"column":13,"line":270}}},{"id":"971","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":5,"killedBy":["88"],"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":4,"line":300},"start":{"column":48,"line":278}}},{"id":"973","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":11,"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":35,"line":279},"start":{"column":9,"line":279}}},{"id":"972","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":5,"killedBy":["88"],"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":35,"line":279},"start":{"column":9,"line":279}}},{"id":"974","mutatorName":"LogicalOperator","replacement":"!text && text.length === 0","status":"Survived","static":false,"testsCompleted":11,"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":35,"line":279},"start":{"column":9,"line":279}}},{"id":"975","mutatorName":"BooleanLiteral","replacement":"text","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":5,"killedBy":["88"],"coveredBy":["77","78","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":14,"line":279},"start":{"column":9,"line":279}}},{"id":"976","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":10,"coveredBy":["77","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":35,"line":279},"start":{"column":18,"line":279}}},{"id":"977","mutatorName":"EqualityOperator","replacement":"text.length !== 0","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":4,"killedBy":["88"],"coveredBy":["77","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":35,"line":279},"start":{"column":18,"line":279}}},{"id":"978","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["78"],"location":{"end":{"column":53,"line":279},"start":{"column":44,"line":279}}},{"id":"979","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":4,"killedBy":["88"],"coveredBy":["77","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":59,"line":288},"start":{"column":29,"line":288}}},{"id":"981","mutatorName":"LogicalOperator","replacement":"text.match(englishWords) && []","statusReason":"expected 'Audio: Speech processing error: Canno…' to be 'This is a test transcription.' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["77"],"coveredBy":["77","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":59,"line":288},"start":{"column":29,"line":288}}},{"id":"980","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":4,"killedBy":["88"],"coveredBy":["77","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":59,"line":288},"start":{"column":29,"line":288}}},{"id":"983","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":4,"killedBy":["88"],"coveredBy":["77","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":59,"line":289},"start":{"column":29,"line":289}}},{"id":"982","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","statusReason":"expected 'en' to be 'unknown' // Object.is equality","status":"Killed","static":false,"testsCompleted":5,"killedBy":["90"],"coveredBy":["77","80","82","89","90","91","92","94","95"],"location":{"end":{"column":59,"line":288},"start":{"column":57,"line":288}}},{"id":"985","mutatorName":"LogicalOperator","replacement":"text.match(spanishWords) && []","statusReason":"expected 'unknown' to be 'es' // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["80"],"coveredBy":["77","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":59,"line":289},"start":{"column":29,"line":289}}},{"id":"984","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":4,"killedBy":["88"],"coveredBy":["77","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":59,"line":289},"start":{"column":29,"line":289}}},{"id":"986","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","statusReason":"expected 'es' to be 'unknown' // Object.is equality","status":"Killed","static":false,"testsCompleted":3,"killedBy":["90"],"coveredBy":["80","82","90","91","92","94","95"],"location":{"end":{"column":59,"line":289},"start":{"column":57,"line":289}}},{"id":"987","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":4,"killedBy":["88"],"coveredBy":["77","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":57,"line":290},"start":{"column":28,"line":290}}},{"id":"988","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":4,"killedBy":["88"],"coveredBy":["77","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":57,"line":290},"start":{"column":28,"line":290}}},{"id":"989","mutatorName":"LogicalOperator","replacement":"text.match(frenchWords) && []","statusReason":"expected 'Audio: Speech processing error: Canno…' to be 'This is a test transcription.' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["77"],"coveredBy":["77","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":57,"line":290},"start":{"column":28,"line":290}}},{"id":"990","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","statusReason":"expected 'fr' to be 'unknown' // Object.is equality","status":"Killed","static":false,"testsCompleted":5,"killedBy":["90"],"coveredBy":["77","80","82","88","90","91","92","94","95"],"location":{"end":{"column":57,"line":290},"start":{"column":55,"line":290}}},{"id":"991","mutatorName":"MethodExpression","replacement":"Math.min(englishMatches, spanishMatches, frenchMatches)","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":4,"killedBy":["88"],"coveredBy":["77","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":79,"line":292},"start":{"column":24,"line":292}}},{"id":"992","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":4,"killedBy":["88"],"coveredBy":["77","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":25,"line":294},"start":{"column":9,"line":294}}},{"id":"993","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'en' to be 'unknown' // Object.is equality","status":"Killed","static":false,"testsCompleted":6,"killedBy":["90"],"coveredBy":["77","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":25,"line":294},"start":{"column":9,"line":294}}},{"id":"995","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to be 'unknown' // Object.is equality","status":"Killed","static":false,"testsCompleted":3,"killedBy":["90"],"coveredBy":["80","82","90","91","92","94","95"],"location":{"end":{"column":43,"line":294},"start":{"column":34,"line":294}}},{"id":"994","mutatorName":"EqualityOperator","replacement":"maxMatches !== 0","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":4,"killedBy":["88"],"coveredBy":["77","80","82","88","89","90","91","92","94","95"],"location":{"end":{"column":25,"line":294},"start":{"column":9,"line":294}}},{"id":"996","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'en' to be 'es' // Object.is equality","status":"Killed","static":false,"testsCompleted":3,"killedBy":["89"],"coveredBy":["77","88","89"],"location":{"end":{"column":38,"line":295},"start":{"column":9,"line":295}}},{"id":"997","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["88"],"coveredBy":["77","88","89"],"location":{"end":{"column":38,"line":295},"start":{"column":9,"line":295}}},{"id":"999","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["88"],"coveredBy":["88"],"location":{"end":{"column":51,"line":295},"start":{"column":47,"line":295}}},{"id":"998","mutatorName":"EqualityOperator","replacement":"maxMatches !== englishMatches","statusReason":"expected 'unknown' to be 'en' // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["88"],"coveredBy":["77","88","89"],"location":{"end":{"column":38,"line":295},"start":{"column":9,"line":295}}},{"id":"1000","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["77","89"],"location":{"end":{"column":38,"line":296},"start":{"column":9,"line":296}}},{"id":"1001","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'unknown' to be 'es' // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["89"],"coveredBy":["77","89"],"location":{"end":{"column":38,"line":296},"start":{"column":9,"line":296}}},{"id":"1003","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to be 'es' // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["89"],"coveredBy":["77","89"],"location":{"end":{"column":51,"line":296},"start":{"column":47,"line":296}}},{"id":"1002","mutatorName":"EqualityOperator","replacement":"maxMatches !== spanishMatches","statusReason":"expected 'unknown' to be 'es' // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["89"],"coveredBy":["77","89"],"location":{"end":{"column":38,"line":296},"start":{"column":9,"line":296}}},{"id":"1010","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["93"],"location":{"end":{"column":24,"line":306},"start":{"column":9,"line":306}}},{"id":"1009","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected \"spy\" to be called at least once","status":"Killed","static":false,"testsCompleted":1,"killedBy":["93"],"coveredBy":["93"],"location":{"end":{"column":4,"line":315},"start":{"column":34,"line":305}}},{"id":"1011","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected \"spy\" to be called at least once","status":"Killed","static":false,"testsCompleted":1,"killedBy":["93"],"coveredBy":["93"],"location":{"end":{"column":24,"line":306},"start":{"column":9,"line":306}}},{"id":"1012","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected \"spy\" to be called at least once","status":"Killed","static":false,"testsCompleted":1,"killedBy":["93"],"coveredBy":["93"],"location":{"end":{"column":6,"line":309},"start":{"column":26,"line":306}}},{"id":"1013","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["93"],"location":{"end":{"column":19,"line":310},"start":{"column":9,"line":310}}},{"id":"1014","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected \"spy\" to be called at least once","status":"Killed","static":false,"testsCompleted":1,"killedBy":["93"],"coveredBy":["93"],"location":{"end":{"column":19,"line":310},"start":{"column":9,"line":310}}},{"id":"1016","mutatorName":"BooleanLiteral","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["93"],"location":{"end":{"column":29,"line":314},"start":{"column":24,"line":314}}},{"id":"1015","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected \"spy\" to be called at least once","status":"Killed","static":false,"testsCompleted":1,"killedBy":["93"],"coveredBy":["93"],"location":{"end":{"column":6,"line":313},"start":{"column":21,"line":310}}},{"id":"1017","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["91"],"coveredBy":["91","93"],"location":{"end":{"column":4,"line":322},"start":{"column":22,"line":320}}},{"id":"1018","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected true to be false // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["93"],"coveredBy":["91","93"],"location":{"end":{"column":56,"line":321},"start":{"column":12,"line":321}}},{"id":"1020","mutatorName":"LogicalOperator","replacement":"this.initialized || this.recognizer !== null","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["91","93"],"location":{"end":{"column":56,"line":321},"start":{"column":12,"line":321}}},{"id":"1019","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["91"],"coveredBy":["91","93"],"location":{"end":{"column":56,"line":321},"start":{"column":12,"line":321}}},{"id":"1021","mutatorName":"ConditionalExpression","replacement":"true","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["91"],"location":{"end":{"column":56,"line":321},"start":{"column":32,"line":321}}},{"id":"1022","mutatorName":"EqualityOperator","replacement":"this.recognizer === null","statusReason":"expected false to be true // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["91"],"coveredBy":["91"],"location":{"end":{"column":56,"line":321},"start":{"column":32,"line":321}}}],"source":"import {\n  createModel,\n  createRecognizer,\n  type ModelConfig,\n  type RecognizerConfig,\n} from \"sherpa-onnx\";\nimport { ContentType, ContentMetadata } from \"../multi-modal.js\";\nimport * as fs from \"fs\";\n\nexport interface SpeechMetadata {\n  duration?: number; // in seconds\n  sampleRate?: number;\n  channels?: number;\n  confidence?: number;\n  processingTime: number;\n  language: string;\n  engine: string;\n}\n\nexport interface SpeechContentMetadata extends ContentMetadata {\n  speechMetadata?: SpeechMetadata;\n  hasText: boolean;\n  wordCount: number;\n  characterCount: number;\n}\n\nexport class SpeechProcessor {\n  private model: any = null;\n  private recognizer: any = null;\n  private initialized = false;\n\n  /**\n   * Initialize the speech recognition model\n   */\n  async initialize(): Promise<void> {\n    if (this.initialized) return;\n\n    try {\n      // Configure the model for speech recognition\n      // Using a pre-built model configuration for English\n      const modelConfig: ModelConfig = {\n        encoder:\n          \"./models/sherpa-onnx-streaming-zipformer-en-2023-06-26/encoder-epoch-99-avg-1.onnx\",\n        decoder:\n          \"./models/sherpa-onnx-streaming-zipformer-en-2023-06-26/decoder-epoch-99-avg-1.onnx\",\n        joiner:\n          \"./models/sherpa-onnx-streaming-zipformer-en-2023-06-26/joiner-epoch-99-avg-1.onnx\",\n        tokens:\n          \"./models/sherpa-onnx-streaming-zipformer-en-2023-06-26/tokens.txt\",\n        numThreads: 2,\n        provider: \"cpu\",\n      };\n\n      const recognizerConfig: RecognizerConfig = {\n        modelConfig,\n        decodingMethod: \"greedy_search\",\n        maxActivePaths: 4,\n        enableEndpoint: true,\n        rule1MinTrailingSilence: 2.4,\n        rule2MinTrailingSilence: 1.2,\n        rule3MinUtteranceLength: 20,\n      };\n\n      // Create model and recognizer\n      this.model = createModel(modelConfig);\n      this.recognizer = createRecognizer(recognizerConfig);\n\n      this.initialized = true;\n    } catch (error) {\n      console.warn(\"Speech recognition model initialization failed:\", error);\n      // Continue with limited functionality\n    }\n  }\n\n  /**\n   * Transcribe audio from a buffer\n   */\n  async transcribeFromBuffer(\n    buffer: Buffer,\n    options: {\n      language?: string;\n      sampleRate?: number;\n    } = {}\n  ): Promise<{\n    text: string;\n    metadata: SpeechContentMetadata;\n  }> {\n    try {\n      await this.initialize();\n\n      const startTime = Date.now();\n\n      // If we don't have a working model, return a placeholder\n      if (!this.recognizer) {\n        return this.createFallbackResult(\n          \"Speech recognition model not available\",\n          startTime\n        );\n      }\n\n      // Convert buffer to the format expected by sherpa-onnx\n      // This is a simplified implementation - in practice, you'd need proper audio decoding\n      const audioData = this.convertBufferToAudioData(buffer);\n\n      if (!audioData) {\n        return this.createFallbackResult(\"Unsupported audio format\", startTime);\n      }\n\n      // Reset recognizer for new audio\n      this.recognizer.reset();\n\n      // Process audio in chunks\n      const stream = this.recognizer.createStream();\n      const samplesPerChunk = 1024; // Process in chunks\n\n      for (let i = 0; i < audioData.length; i += samplesPerChunk) {\n        const chunk = audioData.slice(i, i + samplesPerChunk);\n        stream.acceptWaveform(chunk);\n      }\n\n      // Get the final result\n      stream.inputFinished();\n      const result = this.recognizer.getResult();\n\n      const processingTime = Date.now() - startTime;\n      const text = result.text?.trim() || \"\";\n      const words = text.split(/\\s+/).filter((word) => word.length > 0);\n      const hasText = text.length > 0 && words.length > 0;\n\n      // Estimate confidence (simplified - sherpa-onnx doesn't provide direct confidence)\n      const confidence = hasText ? 0.8 : 0.0;\n\n      const speechMetadata: SpeechMetadata = {\n        duration: audioData.length / (options.sampleRate || 16000), // Estimate duration\n        sampleRate: options.sampleRate || 16000,\n        channels: 1, // Assume mono\n        confidence,\n        processingTime,\n        language: options.language || \"en\",\n        engine: \"sherpa-onnx\",\n      };\n\n      const contentMetadata: SpeechContentMetadata = {\n        type: ContentType.AUDIO,\n        language: this.detectLanguage(text),\n        encoding: \"utf-8\",\n        hasText,\n        wordCount: words.length,\n        characterCount: text.length,\n        speechMetadata,\n      };\n\n      return {\n        text: hasText\n          ? text\n          : \"Audio: No speech detected or transcription failed\",\n        metadata: contentMetadata,\n      };\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n      return this.createFallbackResult(\n        `Speech processing error: ${errorMessage}`,\n        Date.now()\n      );\n    }\n  }\n\n  /**\n   * Transcribe audio from a file\n   */\n  async transcribeFromFile(\n    filePath: string,\n    options: {\n      language?: string;\n      sampleRate?: number;\n    } = {}\n  ): Promise<{\n    text: string;\n    metadata: SpeechContentMetadata;\n  }> {\n    try {\n      const buffer = fs.readFileSync(filePath);\n      return await this.transcribeFromBuffer(buffer, options);\n    } catch (error) {\n      const errorMessage =\n        error instanceof Error ? error.message : String(error);\n\n      const contentMetadata: SpeechContentMetadata = {\n        type: ContentType.AUDIO,\n        language: \"unknown\",\n        encoding: \"unknown\",\n        hasText: false,\n        wordCount: 0,\n        characterCount: 0,\n      };\n\n      return {\n        text: `Audio File Error: Failed to read file - ${errorMessage}`,\n        metadata: contentMetadata,\n      };\n    }\n  }\n\n  /**\n   * Check if a file format is supported for speech recognition\n   */\n  isSupportedAudioFormat(buffer: Buffer): boolean {\n    // Check common audio file signatures\n    const signatures = [\n      Buffer.from([0x52, 0x49, 0x46, 0x46]), // RIFF (WAV)\n      Buffer.from([0x66, 0x74, 0x79, 0x70]), // ftyp (MP4/M4A)\n      Buffer.from([0x49, 0x44, 0x33]), // ID3 (MP3)\n      Buffer.from([0x4f, 0x67, 0x67, 0x53]), // OggS (OGG)\n      Buffer.from([0x66, 0x4c, 0x61, 0x43]), // fLaC (FLAC)\n    ];\n\n    return signatures.some(\n      (signature) =>\n        buffer.subarray(0, 4).equals(signature) ||\n        buffer.subarray(0, signature.length).equals(signature)\n    );\n  }\n\n  /**\n   * Convert audio buffer to float32 array (simplified implementation)\n   * In practice, you'd need proper audio decoding based on format\n   */\n  private convertBufferToAudioData(buffer: Buffer): Float32Array | null {\n    try {\n      // This is a very simplified implementation\n      // In practice, you'd need to:\n      // 1. Detect audio format (WAV, MP3, etc.)\n      // 2. Decode the audio to raw PCM data\n      // 3. Convert to Float32Array\n\n      // For now, return null to indicate unsupported format\n      // This would need to be implemented with proper audio decoding libraries\n      return null;\n    } catch (error) {\n      return null;\n    }\n  }\n\n  /**\n   * Create a fallback result when speech recognition is not available\n   */\n  private createFallbackResult(\n    reason: string,\n    startTime: number\n  ): {\n    text: string;\n    metadata: SpeechContentMetadata;\n  } {\n    const contentMetadata: SpeechContentMetadata = {\n      type: ContentType.AUDIO,\n      language: \"unknown\",\n      encoding: \"unknown\",\n      hasText: false,\n      wordCount: 0,\n      characterCount: 0,\n      speechMetadata: {\n        processingTime: Date.now() - startTime,\n        language: \"unknown\",\n        engine: \"none\",\n      },\n    };\n\n    return {\n      text: `Audio: ${reason}`,\n      metadata: contentMetadata,\n    };\n  }\n\n  /**\n   * Simple language detection based on common patterns\n   */\n  private detectLanguage(text: string): string {\n    if (!text || text.length === 0) return \"unknown\";\n\n    // Simple heuristics for language detection\n    const englishWords = /\\b(the|and|or|but|in|on|at|to|for|of|with|by)\\b/gi;\n    const spanishWords =\n      /\\b(el|la|los|las|y|o|pero|en|sobre|a|para|de|con|por)\\b/gi;\n    const frenchWords =\n      /\\b(le|la|les|et|ou|mais|dans|sur|à|pour|de|avec|par)\\b/gi;\n\n    const englishMatches = (text.match(englishWords) || []).length;\n    const spanishMatches = (text.match(spanishWords) || []).length;\n    const frenchMatches = (text.match(frenchWords) || []).length;\n\n    const maxMatches = Math.max(englishMatches, spanishMatches, frenchMatches);\n\n    if (maxMatches === 0) return \"unknown\";\n    if (maxMatches === englishMatches) return \"en\";\n    if (maxMatches === spanishMatches) return \"es\";\n    if (maxMatches === frenchMatches) return \"fr\";\n\n    return \"unknown\";\n  }\n\n  /**\n   * Clean up resources\n   */\n  async cleanup(): Promise<void> {\n    if (this.recognizer) {\n      this.recognizer.free();\n      this.recognizer = null;\n    }\n    if (this.model) {\n      this.model.free();\n      this.model = null;\n    }\n    this.initialized = false;\n  }\n\n  /**\n   * Check if the speech processor is ready\n   */\n  isReady(): boolean {\n    return this.initialized && this.recognizer !== null;\n  }\n}\n"},"src/lib/utils.ts":{"language":"typescript","mutants":[{"id":"1049","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":4,"line":40},"start":{"column":36,"line":38}}},{"id":"1050","mutatorName":"StringLiteral","replacement":"\"\"","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":59,"line":39},"start":{"column":21,"line":39}}},{"id":"1075","mutatorName":"BlockStatement","replacement":"{}","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":2,"line":72},"start":{"column":50,"line":70}}},{"id":"1076","mutatorName":"ArrowFunction","replacement":"() => undefined","status":"NoCoverage","static":false,"coveredBy":[],"location":{"end":{"column":58,"line":71},"start":{"column":22,"line":71}}},{"id":"1023","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to be 'Hello World' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["133"],"coveredBy":["133","134"],"location":{"end":{"column":2,"line":15},"start":{"column":49,"line":7}}},{"id":"1024","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["133","134"],"location":{"end":{"column":39,"line":8},"start":{"column":15,"line":8}}},{"id":"1025","mutatorName":"MethodExpression","replacement":"text.normalize(\"NFC\").replace(/\\r\\n?/g, \"\\n\").replace(/[ \\t]+/g, \" \").replace(/\\u200B|\\u200C|\\u200D|\\uFEFF/g, \"\") // zero-widths","statusReason":"expected ' Hello World ' to be 'Hello World' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["133"],"coveredBy":["133","134"],"location":{"end":{"column":12,"line":14},"start":{"column":10,"line":9}}},{"id":"1026","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"The normalization form should be one of NFC, NFD, NFKC, NFKD.","status":"Killed","static":false,"testsCompleted":1,"killedBy":["133"],"coveredBy":["133","134"],"location":{"end":{"column":21,"line":10},"start":{"column":16,"line":10}}},{"id":"1028","mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["133","134"],"location":{"end":{"column":28,"line":11},"start":{"column":24,"line":11}}},{"id":"1027","mutatorName":"Regex","replacement":"/\\r\\n/g","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["133","134"],"location":{"end":{"column":22,"line":11},"start":{"column":14,"line":11}}},{"id":"1029","mutatorName":"Regex","replacement":"/[ \\t]/g","statusReason":"expected 'Hello   World' to be 'Hello World' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["133"],"coveredBy":["133","134"],"location":{"end":{"column":23,"line":12},"start":{"column":14,"line":12}}},{"id":"1030","mutatorName":"Regex","replacement":"/[^ \\t]+/g","statusReason":"expected '' to be 'Hello World' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["133"],"coveredBy":["133","134"],"location":{"end":{"column":23,"line":12},"start":{"column":14,"line":12}}},{"id":"1032","mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived","static":false,"testsCompleted":2,"coveredBy":["133","134"],"location":{"end":{"column":48,"line":13},"start":{"column":46,"line":13}}},{"id":"1031","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected 'HelloWorld' to be 'Hello World' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["133"],"coveredBy":["133","134"],"location":{"end":{"column":28,"line":12},"start":{"column":25,"line":12}}},{"id":"1033","mutatorName":"BlockStatement","replacement":"{}","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["134"],"location":{"end":{"column":2,"line":23},"start":{"column":57,"line":20}}},{"id":"1034","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"Digest method not supported","status":"Killed","static":false,"testsCompleted":1,"killedBy":["134"],"coveredBy":["134"],"location":{"end":{"column":36,"line":22},"start":{"column":28,"line":22}}},{"id":"1036","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'reduce')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["135"],"coveredBy":["135"],"location":{"end":{"column":2,"line":32},"start":{"column":61,"line":28}}},{"id":"1035","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected Buffer[ 165, 145, 166, 212, 11, …(-211) ] to be Buffer[ 165, 145, 166, 212, 11, …(-211) ] // Object.is equality\n\nIf it should pass with deep equality, replace \"toBe\" with \"toStrictEqual\"\n\nExpected: Buffer[ 165, 145, 166, 212, 11, …(-211) ]\nReceived: serializes to the same string\n","status":"Killed","static":false,"testsCompleted":1,"killedBy":["134"],"coveredBy":["134"],"location":{"end":{"column":69,"line":22},"start":{"column":64,"line":22}}},{"id":"1037","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"expected NaN to be close to 1, received difference is NaN, but expected 5e-11","status":"Killed","static":false,"testsCompleted":1,"killedBy":["135"],"coveredBy":["135"],"location":{"end":{"column":63,"line":29},"start":{"column":40,"line":29}}},{"id":"1038","mutatorName":"ArithmeticOperator","replacement":"sum - x * x","statusReason":"expected NaN to be close to 1, received difference is NaN, but expected 5e-11","status":"Killed","static":false,"testsCompleted":1,"killedBy":["135"],"coveredBy":["135"],"location":{"end":{"column":63,"line":29},"start":{"column":52,"line":29}}},{"id":"1039","mutatorName":"ArithmeticOperator","replacement":"x / x","statusReason":"expected 3.5355339059327373 to be close to 1, received difference is 2.5355339059327373, but expected 5e-11","status":"Killed","static":false,"testsCompleted":1,"killedBy":["135"],"coveredBy":["135"],"location":{"end":{"column":63,"line":29},"start":{"column":58,"line":29}}},{"id":"1040","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 5 to be close to 1, received difference is 4, but expected 5e-11","status":"Killed","static":false,"testsCompleted":1,"killedBy":["135"],"coveredBy":["135"],"location":{"end":{"column":17,"line":30},"start":{"column":7,"line":30}}},{"id":"1041","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["135"],"location":{"end":{"column":17,"line":30},"start":{"column":7,"line":30}}},{"id":"1042","mutatorName":"EqualityOperator","replacement":"norm !== 0","statusReason":"expected 5 to be close to 1, received difference is 4, but expected 5e-11","status":"Killed","static":false,"testsCompleted":1,"killedBy":["135"],"coveredBy":["135"],"location":{"end":{"column":17,"line":30},"start":{"column":7,"line":30}}},{"id":"1043","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"expected NaN to be close to 1, received difference is NaN, but expected 5e-11","status":"Killed","static":false,"testsCompleted":1,"killedBy":["135"],"coveredBy":["135"],"location":{"end":{"column":36,"line":31},"start":{"column":21,"line":31}}},{"id":"1044","mutatorName":"ArithmeticOperator","replacement":"x * norm","statusReason":"expected 25 to be close to 1, received difference is 24, but expected 5e-11","status":"Killed","static":false,"testsCompleted":1,"killedBy":["135"],"coveredBy":["135"],"location":{"end":{"column":36,"line":31},"start":{"column":28,"line":31}}},{"id":"1045","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to be close to 1, received difference is NaN, but expected 5e-11","status":"Killed","static":false,"testsCompleted":1,"killedBy":["136"],"coveredBy":["136"],"location":{"end":{"column":2,"line":58},"start":{"column":74,"line":37}}},{"id":"1046","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Vectors must have the same dimension","status":"Killed","static":false,"testsCompleted":1,"killedBy":["136"],"coveredBy":["136"],"location":{"end":{"column":34,"line":38},"start":{"column":7,"line":38}}},{"id":"1047","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["136"],"location":{"end":{"column":34,"line":38},"start":{"column":7,"line":38}}},{"id":"1048","mutatorName":"EqualityOperator","replacement":"vecA.length === vecB.length","statusReason":"Vectors must have the same dimension","status":"Killed","static":false,"testsCompleted":1,"killedBy":["136"],"coveredBy":["136"],"location":{"end":{"column":34,"line":38},"start":{"column":7,"line":38}}},{"id":"1051","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected +0 to be close to 1, received difference is 1, but expected 5e-11","status":"Killed","static":false,"testsCompleted":1,"killedBy":["136"],"coveredBy":["136"],"location":{"end":{"column":34,"line":46},"start":{"column":19,"line":46}}},{"id":"1052","mutatorName":"EqualityOperator","replacement":"i <= vecA.length","statusReason":"expected NaN to be close to 1, received difference is NaN, but expected 5e-11","status":"Killed","static":false,"testsCompleted":1,"killedBy":["136"],"coveredBy":["136"],"location":{"end":{"column":34,"line":46},"start":{"column":19,"line":46}}},{"id":"1053","mutatorName":"EqualityOperator","replacement":"i >= vecA.length","statusReason":"expected +0 to be close to 1, received difference is 1, but expected 5e-11","status":"Killed","static":false,"testsCompleted":1,"killedBy":["136"],"coveredBy":["136"],"location":{"end":{"column":34,"line":46},"start":{"column":19,"line":46}}},{"id":"1054","mutatorName":"UpdateOperator","replacement":"i--","statusReason":"Hit limit reached (303/300)","status":"Timeout","static":false,"coveredBy":["136"],"location":{"end":{"column":39,"line":46},"start":{"column":36,"line":46}}},{"id":"1056","mutatorName":"AssignmentOperator","replacement":"dotProduct -= vecA[i] * vecB[i]","statusReason":"expected -1 to be close to 1, received difference is 2, but expected 5e-11","status":"Killed","static":false,"testsCompleted":1,"killedBy":["136"],"coveredBy":["136"],"location":{"end":{"column":36,"line":47},"start":{"column":5,"line":47}}},{"id":"1055","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected +0 to be close to 1, received difference is 1, but expected 5e-11","status":"Killed","static":false,"testsCompleted":1,"killedBy":["136"],"coveredBy":["136"],"location":{"end":{"column":4,"line":50},"start":{"column":41,"line":46}}},{"id":"1058","mutatorName":"AssignmentOperator","replacement":"normA -= vecA[i] * vecA[i]","statusReason":"expected NaN to be close to 1, received difference is NaN, but expected 5e-11","status":"Killed","static":false,"testsCompleted":1,"killedBy":["136"],"coveredBy":["136"],"location":{"end":{"column":31,"line":48},"start":{"column":5,"line":48}}},{"id":"1057","mutatorName":"ArithmeticOperator","replacement":"vecA[i] / vecB[i]","statusReason":"expected 0.21428571428571427 to be close to 1, received difference is 0.7857142857142857, but expected 5e-11","status":"Killed","static":false,"testsCompleted":1,"killedBy":["136"],"coveredBy":["136"],"location":{"end":{"column":36,"line":47},"start":{"column":19,"line":47}}},{"id":"1059","mutatorName":"ArithmeticOperator","replacement":"vecA[i] / vecA[i]","statusReason":"expected 2.160246899469287 to be close to 1, received difference is 1.160246899469287, but expected 5e-11","status":"Killed","static":false,"testsCompleted":1,"killedBy":["136"],"coveredBy":["136"],"location":{"end":{"column":31,"line":48},"start":{"column":14,"line":48}}},{"id":"1060","mutatorName":"AssignmentOperator","replacement":"normB -= vecB[i] * vecB[i]","statusReason":"expected NaN to be close to 1, received difference is NaN, but expected 5e-11","status":"Killed","static":false,"testsCompleted":1,"killedBy":["136"],"coveredBy":["136"],"location":{"end":{"column":31,"line":49},"start":{"column":5,"line":49}}},{"id":"1061","mutatorName":"ArithmeticOperator","replacement":"vecB[i] / vecB[i]","statusReason":"expected 2.160246899469287 to be close to 1, received difference is 1.160246899469287, but expected 5e-11","status":"Killed","static":false,"testsCompleted":1,"killedBy":["136"],"coveredBy":["136"],"location":{"end":{"column":31,"line":49},"start":{"column":14,"line":49}}},{"id":"1062","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected +0 to be close to 1, received difference is 1, but expected 5e-11","status":"Killed","static":false,"testsCompleted":1,"killedBy":["136"],"coveredBy":["136"],"location":{"end":{"column":33,"line":55},"start":{"column":7,"line":55}}},{"id":"1063","mutatorName":"ConditionalExpression","replacement":"false","status":"Timeout","static":false,"coveredBy":["136"],"location":{"end":{"column":33,"line":55},"start":{"column":7,"line":55}}},{"id":"1064","mutatorName":"LogicalOperator","replacement":"normA === 0 && normB === 0","status":"Timeout","static":false,"coveredBy":["136"],"location":{"end":{"column":33,"line":55},"start":{"column":7,"line":55}}},{"id":"1065","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["136"],"location":{"end":{"column":18,"line":55},"start":{"column":7,"line":55}}},{"id":"1066","mutatorName":"EqualityOperator","replacement":"normA !== 0","statusReason":"expected +0 to be close to 1, received difference is 1, but expected 5e-11","status":"Killed","static":false,"testsCompleted":1,"killedBy":["136"],"coveredBy":["136"],"location":{"end":{"column":18,"line":55},"start":{"column":7,"line":55}}},{"id":"1067","mutatorName":"ConditionalExpression","replacement":"false","status":"Survived","static":false,"testsCompleted":1,"coveredBy":["136"],"location":{"end":{"column":33,"line":55},"start":{"column":22,"line":55}}},{"id":"1068","mutatorName":"EqualityOperator","replacement":"normB !== 0","statusReason":"expected +0 to be close to 1, received difference is 1, but expected 5e-11","status":"Killed","static":false,"testsCompleted":1,"killedBy":["136"],"coveredBy":["136"],"location":{"end":{"column":33,"line":55},"start":{"column":22,"line":55}}},{"id":"1070","mutatorName":"ArithmeticOperator","replacement":"normA / normB","statusReason":"expected 14 to be close to 1, received difference is 13, but expected 5e-11","status":"Killed","static":false,"testsCompleted":1,"killedBy":["136"],"coveredBy":["136"],"location":{"end":{"column":37,"line":57},"start":{"column":24,"line":57}}},{"id":"1069","mutatorName":"ArithmeticOperator","replacement":"dotProduct * (normA * normB)","statusReason":"expected 196 to be close to 1, received difference is 195, but expected 5e-11","status":"Killed","static":false,"testsCompleted":1,"killedBy":["136"],"coveredBy":["136"],"location":{"end":{"column":38,"line":57},"start":{"column":10,"line":57}}},{"id":"1071","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to be 7 // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["137"],"coveredBy":["137","138","139"],"location":{"end":{"column":2,"line":65},"start":{"column":54,"line":63}}},{"id":"1072","mutatorName":"ArithmeticOperator","replacement":"text.split(/\\s+/).length * 0.75","statusReason":"expected 4 to be 7 // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["137"],"coveredBy":["137","138","139"],"location":{"end":{"column":51,"line":64},"start":{"column":20,"line":64}}},{"id":"1073","mutatorName":"Regex","replacement":"/\\s/","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["137","138","139"],"location":{"end":{"column":36,"line":64},"start":{"column":31,"line":64}}},{"id":"1074","mutatorName":"Regex","replacement":"/\\S+/","statusReason":"expected 8 to be 7 // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["137"],"coveredBy":["137","138","139"],"location":{"end":{"column":36,"line":64},"start":{"column":31,"line":64}}},{"id":"1077","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to deeply equal [ 'link', 'link2' ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["140"],"coveredBy":["140","141","142","143"],"location":{"end":{"column":2,"line":85},"start":{"column":58,"line":77}}},{"id":"1078","mutatorName":"Regex","replacement":"/\\[\\[([^\\]])\\]\\]/g","statusReason":"expected [] to deeply equal [ 'link', 'link2' ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["140"],"coveredBy":["140","141","142","143"],"location":{"end":{"column":44,"line":78},"start":{"column":25,"line":78}}},{"id":"1080","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","statusReason":"expected [ 'Stryker was here', 'link', 'link2' ] to deeply equal [ 'link', 'link2' ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["140"],"coveredBy":["140","141","142","143"],"location":{"end":{"column":33,"line":79},"start":{"column":31,"line":79}}},{"id":"1079","mutatorName":"Regex","replacement":"/\\[\\[([\\]]+)\\]\\]/g","statusReason":"expected [] to deeply equal [ 'link', 'link2' ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["140"],"coveredBy":["140","141","142","143"],"location":{"end":{"column":44,"line":78},"start":{"column":25,"line":78}}},{"id":"1082","mutatorName":"EqualityOperator","replacement":"(match = wikilinkRegex.exec(text)) === null","statusReason":"expected [] to deeply equal [ 'link', 'link2' ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["140"],"coveredBy":["140","141","142","143"],"location":{"end":{"column":53,"line":81},"start":{"column":10,"line":81}}},{"id":"1081","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected [] to deeply equal [ 'link', 'link2' ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["140"],"coveredBy":["140","141","142","143"],"location":{"end":{"column":53,"line":81},"start":{"column":10,"line":81}}},{"id":"1083","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected [] to deeply equal [ 'link', 'link2' ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["140"],"coveredBy":["140","141"],"location":{"end":{"column":4,"line":83},"start":{"column":55,"line":81}}},{"id":"1084","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected [] to deeply equal [ 'link', 'link2' ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["140"],"coveredBy":["140","141","142","143"],"location":{"end":{"column":33,"line":84},"start":{"column":10,"line":84}}},{"id":"1085","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to deeply equal [ 'tag', 'tag2' ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["144"],"coveredBy":["144","145","146","147","148"],"location":{"end":{"column":2,"line":98},"start":{"column":57,"line":90}}},{"id":"1086","mutatorName":"Regex","replacement":"/#([a-zA-Z0-9_/-])/g","statusReason":"expected [ 't' ] to deeply equal [ 'tag', 'tag2' ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["144"],"coveredBy":["144","145","146","147","148"],"location":{"end":{"column":41,"line":91},"start":{"column":20,"line":91}}},{"id":"1088","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","statusReason":"expected [ 'Stryker was here', 'tag', 'tag2' ] to deeply equal [ 'tag', 'tag2' ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["144"],"coveredBy":["144","145","146","147","148"],"location":{"end":{"column":28,"line":92},"start":{"column":26,"line":92}}},{"id":"1087","mutatorName":"Regex","replacement":"/#([^a-zA-Z0-9_/-]+)/g","statusReason":"expected [] to deeply equal [ 'tag', 'tag2' ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["144"],"coveredBy":["144","145","146","147","148"],"location":{"end":{"column":41,"line":91},"start":{"column":20,"line":91}}},{"id":"1089","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected [] to deeply equal [ 'tag', 'tag2' ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["144"],"coveredBy":["144","145","146","147","148"],"location":{"end":{"column":48,"line":94},"start":{"column":10,"line":94}}},{"id":"1090","mutatorName":"EqualityOperator","replacement":"(match = tagRegex.exec(text)) === null","statusReason":"expected [] to deeply equal [ 'tag', 'tag2' ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["144"],"coveredBy":["144","145","146","147","148"],"location":{"end":{"column":48,"line":94},"start":{"column":10,"line":94}}},{"id":"1091","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected [] to deeply equal [ 'tag', 'tag2' ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["144"],"coveredBy":["144","145","147"],"location":{"end":{"column":4,"line":96},"start":{"column":50,"line":94}}},{"id":"1092","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected [] to deeply equal [ 'tag', 'tag2' ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["144"],"coveredBy":["144","145","146","147","148"],"location":{"end":{"column":28,"line":97},"start":{"column":10,"line":97}}},{"id":"1094","mutatorName":"MethodExpression","replacement":"text\n// Remove frontmatter\n.replace(/^---[\\s\\S]*?---\\n?/, \"\")\n// Remove wikilinks but keep the text\n.replace(/\\[\\[([^\\]]+)\\]\\]/g, \"$1\")\n// Remove markdown links but keep the text\n.replace(/\\[([^\\]]+)\\]\\([^)]+\\)/g, \"$1\")\n// Remove markdown formatting\n.replace(/[*_`~]/g, \"\")\n// Remove headers\n.replace(/^#+\\s+/gm, \"\")\n// Clean up extra whitespace\n.replace(/\\n\\s*\\n/g, \"\\n\\n\")","status":"Survived","static":false,"testsCompleted":6,"coveredBy":["149","150","151","152","153","154"],"location":{"end":{"column":14,"line":118},"start":{"column":5,"line":105}}},{"id":"1093","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to be 'This is content' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["149"],"coveredBy":["149","150","151","152","153","154"],"location":{"end":{"column":2,"line":120},"start":{"column":53,"line":103}}},{"id":"1095","mutatorName":"Regex","replacement":"/---[\\s\\S]*?---\\n?/","status":"Survived","static":false,"testsCompleted":6,"coveredBy":["149","150","151","152","153","154"],"location":{"end":{"column":36,"line":107},"start":{"column":16,"line":107}}},{"id":"1096","mutatorName":"Regex","replacement":"/^---[\\s\\S]---\\n?/","statusReason":"expected '---\\ntitle: Test\\n---\\nThis is content' to be 'This is content' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["149"],"coveredBy":["149","150","151","152","153","154"],"location":{"end":{"column":36,"line":107},"start":{"column":16,"line":107}}},{"id":"1098","mutatorName":"Regex","replacement":"/^---[\\S\\S]*?---\\n?/","status":"Timeout","static":false,"coveredBy":["149","150","151","152","153","154"],"location":{"end":{"column":36,"line":107},"start":{"column":16,"line":107}}},{"id":"1097","mutatorName":"Regex","replacement":"/^---[^\\s\\S]*?---\\n?/","status":"Timeout","static":false,"coveredBy":["149","150","151","152","153","154"],"location":{"end":{"column":36,"line":107},"start":{"column":16,"line":107}}},{"id":"1100","mutatorName":"Regex","replacement":"/^---[\\s\\S]*?---\\n/","status":"Survived","static":false,"testsCompleted":6,"coveredBy":["149","150","151","152","153","154"],"location":{"end":{"column":36,"line":107},"start":{"column":16,"line":107}}},{"id":"1099","mutatorName":"Regex","replacement":"/^---[\\s\\s]*?---\\n?/","statusReason":"expected '---\\ntitle: Test\\n---\\nThis is content' to be 'This is content' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["149"],"coveredBy":["149","150","151","152","153","154"],"location":{"end":{"column":36,"line":107},"start":{"column":16,"line":107}}},{"id":"1102","mutatorName":"Regex","replacement":"/\\[\\[([^\\]])\\]\\]/g","statusReason":"expected 'This is a [[link]] in text' to be 'This is a link in text' // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["150"],"coveredBy":["149","150","151","152","153","154"],"location":{"end":{"column":35,"line":109},"start":{"column":16,"line":109}}},{"id":"1101","mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","statusReason":"expected 'Stryker was here!This is content' to be 'This is content' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["149"],"coveredBy":["149","150","151","152","153","154"],"location":{"end":{"column":40,"line":107},"start":{"column":38,"line":107}}},{"id":"1104","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected 'This is a  in text' to be 'This is a link in text' // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["150"],"coveredBy":["149","150","151","152","153","154"],"location":{"end":{"column":41,"line":109},"start":{"column":37,"line":109}}},{"id":"1103","mutatorName":"Regex","replacement":"/\\[\\[([\\]]+)\\]\\]/g","statusReason":"expected 'This is a [[link]] in text' to be 'This is a link in text' // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["150"],"coveredBy":["149","150","151","152","153","154"],"location":{"end":{"column":35,"line":109},"start":{"column":16,"line":109}}},{"id":"1106","mutatorName":"Regex","replacement":"/\\[([\\]]+)\\]\\([^)]+\\)/g","statusReason":"expected 'This is a [link](url) in text' to be 'This is a link in text' // Object.is equality","status":"Killed","static":false,"testsCompleted":3,"killedBy":["151"],"coveredBy":["149","150","151","152","153","154"],"location":{"end":{"column":40,"line":111},"start":{"column":16,"line":111}}},{"id":"1105","mutatorName":"Regex","replacement":"/\\[([^\\]])\\]\\([^)]+\\)/g","statusReason":"expected 'This is a [link](url) in text' to be 'This is a link in text' // Object.is equality","status":"Killed","static":false,"testsCompleted":3,"killedBy":["151"],"coveredBy":["149","150","151","152","153","154"],"location":{"end":{"column":40,"line":111},"start":{"column":16,"line":111}}},{"id":"1107","mutatorName":"Regex","replacement":"/\\[([^\\]]+)\\]\\([^)]\\)/g","statusReason":"expected 'This is a [link](url) in text' to be 'This is a link in text' // Object.is equality","status":"Killed","static":false,"testsCompleted":3,"killedBy":["151"],"coveredBy":["149","150","151","152","153","154"],"location":{"end":{"column":40,"line":111},"start":{"column":16,"line":111}}},{"id":"1108","mutatorName":"Regex","replacement":"/\\[([^\\]]+)\\]\\([)]+\\)/g","statusReason":"expected 'This is a [link](url) in text' to be 'This is a link in text' // Object.is equality","status":"Killed","static":false,"testsCompleted":3,"killedBy":["151"],"coveredBy":["149","150","151","152","153","154"],"location":{"end":{"column":40,"line":111},"start":{"column":16,"line":111}}},{"id":"1110","mutatorName":"Regex","replacement":"/[^*_`~]/g","statusReason":"expected '' to be 'This is content' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["149"],"coveredBy":["149","150","151","152","153","154"],"location":{"end":{"column":25,"line":113},"start":{"column":16,"line":113}}},{"id":"1109","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected 'This is a  in text' to be 'This is a link in text' // Object.is equality","status":"Killed","static":false,"testsCompleted":3,"killedBy":["151"],"coveredBy":["149","150","151","152","153","154"],"location":{"end":{"column":46,"line":111},"start":{"column":42,"line":111}}},{"id":"1112","mutatorName":"Regex","replacement":"/#+\\s+/gm","status":"Survived","static":false,"testsCompleted":6,"coveredBy":["149","150","151","152","153","154"],"location":{"end":{"column":26,"line":115},"start":{"column":16,"line":115}}},{"id":"1111","mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","statusReason":"expected 'Stryker was here!boldStryker was here…' to be 'bold italic code strikethrough' // Object.is equality","status":"Killed","static":false,"testsCompleted":4,"killedBy":["152"],"coveredBy":["149","150","151","152","153","154"],"location":{"end":{"column":29,"line":113},"start":{"column":27,"line":113}}},{"id":"1114","mutatorName":"Regex","replacement":"/^#+\\s/gm","status":"Survived","static":false,"testsCompleted":6,"coveredBy":["149","150","151","152","153","154"],"location":{"end":{"column":26,"line":115},"start":{"column":16,"line":115}}},{"id":"1113","mutatorName":"Regex","replacement":"/^#\\s+/gm","statusReason":"expected 'Header\\n## Subheader\\nContent' to be 'Header\\nSubheader\\nContent' // Object.is equality","status":"Killed","static":false,"testsCompleted":5,"killedBy":["153"],"coveredBy":["149","150","151","152","153","154"],"location":{"end":{"column":26,"line":115},"start":{"column":16,"line":115}}},{"id":"1115","mutatorName":"Regex","replacement":"/^#+\\S+/gm","statusReason":"expected '# Header\\n Subheader\\nContent' to be 'Header\\nSubheader\\nContent' // Object.is equality","status":"Killed","static":false,"testsCompleted":5,"killedBy":["153"],"coveredBy":["149","150","151","152","153","154"],"location":{"end":{"column":26,"line":115},"start":{"column":16,"line":115}}},{"id":"1116","mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","statusReason":"expected 'Stryker was here!Header\\nStryker was …' to be 'Header\\nSubheader\\nContent' // Object.is equality","status":"Killed","static":false,"testsCompleted":5,"killedBy":["153"],"coveredBy":["149","150","151","152","153","154"],"location":{"end":{"column":30,"line":115},"start":{"column":28,"line":115}}},{"id":"1117","mutatorName":"Regex","replacement":"/\\n\\s\\n/g","status":"Survived","static":false,"testsCompleted":6,"coveredBy":["149","150","151","152","153","154"],"location":{"end":{"column":26,"line":117},"start":{"column":16,"line":117}}},{"id":"1118","mutatorName":"Regex","replacement":"/\\n\\S*\\n/g","statusReason":"expected 'Header\\n\\nContent' to be 'Header\\nSubheader\\nContent' // Object.is equality","status":"Killed","static":false,"testsCompleted":5,"killedBy":["153"],"coveredBy":["149","150","151","152","153","154"],"location":{"end":{"column":26,"line":117},"start":{"column":16,"line":117}}},{"id":"1120","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to deeply equal [ 'folder' ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["155"],"coveredBy":["155","156","157"],"location":{"end":{"column":2,"line":133},"start":{"column":13,"line":128}}},{"id":"1119","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected 'Line 1Line 2' to be 'Line 1\\n\\nLine 2' // Object.is equality","status":"Killed","static":false,"testsCompleted":6,"killedBy":["154"],"coveredBy":["149","150","151","152","153","154"],"location":{"end":{"column":34,"line":117},"start":{"column":28,"line":117}}},{"id":"1122","mutatorName":"Regex","replacement":"/\\/+/","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["155","156","157"],"location":{"end":{"column":70,"line":129},"start":{"column":64,"line":129}}},{"id":"1121","mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","statusReason":"expected [ 'Stryker was here!', 'folder' ] to deeply equal [ 'folder' ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["155"],"coveredBy":["155","156","157"],"location":{"end":{"column":54,"line":129},"start":{"column":52,"line":129}}},{"id":"1123","mutatorName":"Regex","replacement":"/^\\//","status":"Survived","static":false,"testsCompleted":3,"coveredBy":["155","156","157"],"location":{"end":{"column":70,"line":129},"start":{"column":64,"line":129}}},{"id":"1124","mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","statusReason":"expected [ 'Stryker was here!folder' ] to deeply equal [ 'folder' ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["155"],"coveredBy":["155","156","157"],"location":{"end":{"column":74,"line":129},"start":{"column":72,"line":129}}},{"id":"1126","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected [] to deeply equal [ 'Root' ]","status":"Killed","static":false,"testsCompleted":2,"killedBy":["156"],"coveredBy":["155","156","157"],"location":{"end":{"column":30,"line":132},"start":{"column":10,"line":132}}},{"id":"1125","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected [ 'f', 'o', 'l', 'd', 'e', 'r', …(7) ] to deeply equal [ 'folder' ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["155"],"coveredBy":["155","156","157"],"location":{"end":{"column":43,"line":130},"start":{"column":40,"line":130}}},{"id":"1128","mutatorName":"EqualityOperator","replacement":"pathParts.length >= 0","statusReason":"expected [] to deeply equal [ 'Root' ]","status":"Killed","static":false,"testsCompleted":2,"killedBy":["156"],"coveredBy":["155","156","157"],"location":{"end":{"column":30,"line":132},"start":{"column":10,"line":132}}},{"id":"1127","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected [ 'Root' ] to deeply equal [ 'folder' ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["155"],"coveredBy":["155","156","157"],"location":{"end":{"column":30,"line":132},"start":{"column":10,"line":132}}},{"id":"1129","mutatorName":"EqualityOperator","replacement":"pathParts.length <= 0","statusReason":"expected [ 'Root' ] to deeply equal [ 'folder' ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["155"],"coveredBy":["155","156","157"],"location":{"end":{"column":30,"line":132},"start":{"column":10,"line":132}}},{"id":"1130","mutatorName":"ArrayDeclaration","replacement":"[]","statusReason":"expected [] to deeply equal [ 'Root' ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["156"],"coveredBy":["156"],"location":{"end":{"column":53,"line":132},"start":{"column":45,"line":132}}},{"id":"1131","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected [ '' ] to deeply equal [ 'Root' ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["156"],"coveredBy":["156"],"location":{"end":{"column":52,"line":132},"start":{"column":46,"line":132}}},{"id":"1132","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to be 'moc' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["158"],"coveredBy":["158","159","160","161","162","163","164"],"location":{"end":{"column":2,"line":157},"start":{"column":11,"line":142}}},{"id":"1134","mutatorName":"Regex","replacement":"/\\/+/","status":"Survived","static":false,"testsCompleted":7,"coveredBy":["158","159","160","161","162","163","164"],"location":{"end":{"column":70,"line":143},"start":{"column":64,"line":143}}},{"id":"1133","mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","statusReason":"expected 'note' to be 'moc' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["158"],"coveredBy":["158","159","160","161","162","163","164"],"location":{"end":{"column":54,"line":143},"start":{"column":52,"line":143}}},{"id":"1135","mutatorName":"Regex","replacement":"/^\\//","status":"Survived","static":false,"testsCompleted":7,"coveredBy":["158","159","160","161","162","163","164"],"location":{"end":{"column":70,"line":143},"start":{"column":64,"line":143}}},{"id":"1136","mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","statusReason":"expected 'note' to be 'moc' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["158"],"coveredBy":["158","159","160","161","162","163","164"],"location":{"end":{"column":74,"line":143},"start":{"column":72,"line":143}}},{"id":"1137","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'moc' to be 'article' // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["159"],"coveredBy":["158","159","160","161","162","163","164"],"location":{"end":{"column":39,"line":145},"start":{"column":7,"line":145}}},{"id":"1138","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'note' to be 'moc' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["158"],"coveredBy":["158","159","160","161","162","163","164"],"location":{"end":{"column":39,"line":145},"start":{"column":7,"line":145}}},{"id":"1140","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected 'moc' to be 'article' // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["159"],"coveredBy":["158","159","160","161","162","163","164"],"location":{"end":{"column":38,"line":145},"start":{"column":31,"line":145}}},{"id":"1139","mutatorName":"MethodExpression","replacement":"relativePath.endsWith(\"MOCs/\")","statusReason":"expected 'note' to be 'moc' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["158"],"coveredBy":["158","159","160","161","162","163","164"],"location":{"end":{"column":39,"line":145},"start":{"column":7,"line":145}}},{"id":"1141","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to be 'moc' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["158"],"coveredBy":["158"],"location":{"end":{"column":53,"line":145},"start":{"column":48,"line":145}}},{"id":"1142","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'article' to be 'conversation' // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["160"],"coveredBy":["159","160","161","162","163","164"],"location":{"end":{"column":43,"line":146},"start":{"column":7,"line":146}}},{"id":"1143","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'note' to be 'article' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["159"],"coveredBy":["159","160","161","162","163","164"],"location":{"end":{"column":43,"line":146},"start":{"column":7,"line":146}}},{"id":"1144","mutatorName":"MethodExpression","replacement":"relativePath.endsWith(\"Articles/\")","statusReason":"expected 'note' to be 'article' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["159"],"coveredBy":["159","160","161","162","163","164"],"location":{"end":{"column":43,"line":146},"start":{"column":7,"line":146}}},{"id":"1146","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to be 'article' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["159"],"coveredBy":["159"],"location":{"end":{"column":61,"line":146},"start":{"column":52,"line":146}}},{"id":"1145","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected 'article' to be 'conversation' // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["160"],"coveredBy":["159","160","161","162","163","164"],"location":{"end":{"column":42,"line":146},"start":{"column":31,"line":146}}},{"id":"1148","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'note' to be 'conversation' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["160"],"coveredBy":["160","161","162","163","164"],"location":{"end":{"column":42,"line":147},"start":{"column":7,"line":147}}},{"id":"1147","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'conversation' to be 'book-note' // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["161"],"coveredBy":["160","161","162","163","164"],"location":{"end":{"column":42,"line":147},"start":{"column":7,"line":147}}},{"id":"1150","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected 'conversation' to be 'book-note' // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["161"],"coveredBy":["160","161","162","163","164"],"location":{"end":{"column":41,"line":147},"start":{"column":31,"line":147}}},{"id":"1149","mutatorName":"MethodExpression","replacement":"relativePath.endsWith(\"AIChats/\")","statusReason":"expected 'note' to be 'conversation' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["160"],"coveredBy":["160","161","162","163","164"],"location":{"end":{"column":42,"line":147},"start":{"column":7,"line":147}}},{"id":"1151","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to be 'conversation' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["160"],"coveredBy":["160"],"location":{"end":{"column":65,"line":147},"start":{"column":51,"line":147}}},{"id":"1152","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'book-note' to be 'template' // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["162"],"coveredBy":["161","162","163","164"],"location":{"end":{"column":40,"line":148},"start":{"column":7,"line":148}}},{"id":"1154","mutatorName":"MethodExpression","replacement":"relativePath.endsWith(\"Books/\")","statusReason":"expected 'note' to be 'book-note' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["161"],"coveredBy":["161","162","163","164"],"location":{"end":{"column":40,"line":148},"start":{"column":7,"line":148}}},{"id":"1153","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'note' to be 'book-note' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["161"],"coveredBy":["161","162","163","164"],"location":{"end":{"column":40,"line":148},"start":{"column":7,"line":148}}},{"id":"1155","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected 'book-note' to be 'template' // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["162"],"coveredBy":["161","162","163","164"],"location":{"end":{"column":39,"line":148},"start":{"column":31,"line":148}}},{"id":"1156","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to be 'book-note' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["161"],"coveredBy":["161"],"location":{"end":{"column":60,"line":148},"start":{"column":49,"line":148}}},{"id":"1157","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected 'template' to be 'custom' // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["163"],"coveredBy":["162","163","164"],"location":{"end":{"column":44,"line":149},"start":{"column":7,"line":149}}},{"id":"1158","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'note' to be 'template' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["162"],"coveredBy":["162","163","164"],"location":{"end":{"column":44,"line":149},"start":{"column":7,"line":149}}},{"id":"1159","mutatorName":"MethodExpression","replacement":"relativePath.endsWith(\"templates/\")","statusReason":"expected 'note' to be 'template' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["162"],"coveredBy":["162","163","164"],"location":{"end":{"column":44,"line":149},"start":{"column":7,"line":149}}},{"id":"1160","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected 'template' to be 'custom' // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["163"],"coveredBy":["162","163","164"],"location":{"end":{"column":43,"line":149},"start":{"column":31,"line":149}}},{"id":"1161","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to be 'template' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["162"],"coveredBy":["162"],"location":{"end":{"column":63,"line":149},"start":{"column":53,"line":149}}},{"id":"1162","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"expected undefined to be 'note' // Object.is equality","status":"Killed","static":false,"testsCompleted":2,"killedBy":["164"],"coveredBy":["163","164"],"location":{"end":{"column":23,"line":152},"start":{"column":7,"line":152}}},{"id":"1163","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"expected 'note' to be 'custom' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["163"],"coveredBy":["163","164"],"location":{"end":{"column":23,"line":152},"start":{"column":7,"line":152}}},{"id":"1164","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'note' to be 'custom' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["163"],"coveredBy":["163"],"location":{"end":{"column":4,"line":154},"start":{"column":25,"line":152}}},{"id":"1165","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to be 'note' // Object.is equality","status":"Killed","static":false,"testsCompleted":1,"killedBy":["164"],"coveredBy":["164"],"location":{"end":{"column":16,"line":156},"start":{"column":10,"line":156}}}],"source":"import crypto from \"node:crypto\";\n\n/**\n * Normalize text for consistent embedding and caching\n * Following the best practices from the instructions\n */\nexport function normalize(text: string): string {\n  console.log(\"normalize called with:\", text);\n  return text\n    .normalize(\"NFC\")\n    .replace(/\\r\\n?/g, \"\\n\")\n    .replace(/[ \\t]+/g, \" \")\n    .replace(/\\u200B|\\u200C|\\u200D|\\uFEFF/g, \"\") // zero-widths\n    .trim();\n}\n\n/**\n * Create a stable content hash for deterministic IDs\n */\nexport function createContentHash(text: string): string {\n  const normalized = normalize(text);\n  return crypto.createHash(\"sha256\").update(normalized).digest(\"hex\");\n}\n\n/**\n * L2 normalize a vector (ensures cosine similarity is in [-1, 1] range)\n */\nexport function normalizeVector(vector: number[]): number[] {\n  const norm = Math.sqrt(vector.reduce((sum, x) => sum + x * x, 0));\n  if (norm === 0) return vector; // Avoid division by zero for zero vectors\n  return vector.map((x) => x / norm);\n}\n\n/**\n * Calculate cosine similarity between two normalized vectors\n */\nexport function cosineSimilarity(vecA: number[], vecB: number[]): number {\n  if (vecA.length !== vecB.length) {\n    throw new Error(\"Vectors must have the same dimension\");\n  }\n\n  let dotProduct = 0;\n  let normA = 0;\n  let normB = 0;\n\n  for (let i = 0; i < vecA.length; i++) {\n    dotProduct += vecA[i] * vecB[i];\n    normA += vecA[i] * vecA[i];\n    normB += vecB[i] * vecB[i];\n  }\n\n  normA = Math.sqrt(normA);\n  normB = Math.sqrt(normB);\n\n  if (normA === 0 || normB === 0) return 0;\n\n  return dotProduct / (normA * normB);\n}\n\n/**\n * Estimate token count (crude approximation: words/0.75)\n */\nexport function estimateTokens(text: string): number {\n  return Math.ceil(text.split(/\\s+/).length / 0.75);\n}\n\n/**\n * Sleep utility for rate limiting\n */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n/**\n * Extract Obsidian wikilinks from text\n */\nexport function extractWikilinks(text: string): string[] {\n  const wikilinkRegex = /\\[\\[([^\\]]+)\\]\\]/g;\n  const wikilinks: string[] = [];\n  let match;\n  while ((match = wikilinkRegex.exec(text)) !== null) {\n    wikilinks.push(match[1]);\n  }\n  return [...new Set(wikilinks)]; // Remove duplicates\n}\n\n/**\n * Extract hashtags from text\n */\nexport function extractHashtags(text: string): string[] {\n  const tagRegex = /#([a-zA-Z0-9_/-]+)/g;\n  const tags: string[] = [];\n  let match;\n  while ((match = tagRegex.exec(text)) !== null) {\n    tags.push(match[1]);\n  }\n  return [...new Set(tags)]; // Remove duplicates\n}\n\n/**\n * Clean markdown content for better embedding\n */\nexport function cleanMarkdown(text: string): string {\n  return (\n    text\n      // Remove frontmatter\n      .replace(/^---[\\s\\S]*?---\\n?/, \"\")\n      // Remove wikilinks but keep the text\n      .replace(/\\[\\[([^\\]]+)\\]\\]/g, \"$1\")\n      // Remove markdown links but keep the text\n      .replace(/\\[([^\\]]+)\\]\\([^)]+\\)/g, \"$1\")\n      // Remove markdown formatting\n      .replace(/[*_`~]/g, \"\")\n      // Remove headers\n      .replace(/^#+\\s+/gm, \"\")\n      // Clean up extra whitespace\n      .replace(/\\n\\s*\\n/g, \"\\n\\n\")\n      .trim()\n  );\n}\n\n/**\n * Generate breadcrumbs from file path\n */\nexport function generateBreadcrumbs(\n  filePath: string,\n  vaultPath: string\n): string[] {\n  const relativePath = filePath.replace(vaultPath, \"\").replace(/^\\/+/, \"\");\n  const pathParts = relativePath.split(\"/\");\n  pathParts.pop(); // Remove filename\n  return pathParts.length > 0 ? pathParts : [\"Root\"];\n}\n\n/**\n * Determine content type from file path and frontmatter\n */\nexport function determineContentType(\n  filePath: string,\n  vaultPath: string,\n  frontmatter: Record<string, any>\n): string {\n  const relativePath = filePath.replace(vaultPath, \"\").replace(/^\\/+/, \"\");\n\n  if (relativePath.startsWith(\"MOCs/\")) return \"moc\";\n  if (relativePath.startsWith(\"Articles/\")) return \"article\";\n  if (relativePath.startsWith(\"AIChats/\")) return \"conversation\";\n  if (relativePath.startsWith(\"Books/\")) return \"book-note\";\n  if (relativePath.startsWith(\"templates/\")) return \"template\";\n\n  // Check frontmatter type\n  if (frontmatter.type) {\n    return frontmatter.type;\n  }\n\n  return \"note\";\n}\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":30,"break":null},"testFiles":{"tests/e2e/api.e2e.test.ts":{"tests":[{"id":"0","name":"Obsidian RAG API E2E Health Check API should return healthy status"},{"id":"1","name":"Obsidian RAG API E2E Search API should perform semantic search"},{"id":"2","name":"Obsidian RAG API E2E Search API should handle search with filters"},{"id":"3","name":"Obsidian RAG API E2E Search API should handle empty search gracefully"},{"id":"4","name":"Obsidian RAG API E2E Search API should handle pagination"},{"id":"5","name":"Obsidian RAG API E2E Document API should retrieve document by ID"},{"id":"6","name":"Obsidian RAG API E2E Document API should return 404 for non-existent document"},{"id":"7","name":"Obsidian RAG API E2E Document API should retrieve document chunks"},{"id":"8","name":"Obsidian RAG API E2E Analytics API should return vault analytics"},{"id":"9","name":"Obsidian RAG API E2E Stats API should return database statistics"},{"id":"10","name":"Obsidian RAG API E2E Ingestion API should reject ingestion without auth"},{"id":"11","name":"Obsidian RAG API E2E Error Handling should handle malformed JSON gracefully"},{"id":"12","name":"Obsidian RAG API E2E Error Handling should handle invalid HTTP methods"},{"id":"13","name":"Obsidian RAG API E2E Performance Benchmarks should respond within acceptable time limits"},{"id":"14","name":"Obsidian RAG API E2E Performance Benchmarks should handle concurrent requests"}],"source":"import { describe, it, expect, beforeAll, afterAll, beforeEach } from \"vitest\";\nimport {\n  PostgreSqlContainer,\n  StartedPostgreSqlContainer,\n} from \"@testcontainers/postgresql\";\nimport { execSync, spawn } from \"child_process\";\nimport { promisify } from \"util\";\nimport fs from \"fs\";\nimport path from \"path\";\n\nconst sleep = promisify(setTimeout);\n\ndescribe(\"Obsidian RAG API E2E\", () => {\n  let postgresContainer: StartedPostgreSqlContainer;\n  let serverProcess: any;\n  let apiBaseUrl: string;\n\n  beforeAll(async () => {\n    // Start PostgreSQL container\n    postgresContainer = await new PostgreSqlContainer()\n      .withDatabase(\"testdb\")\n      .withUsername(\"testuser\")\n      .withPassword(\"testpass\")\n      .start();\n\n    const connectionString = postgresContainer.getConnectionUri();\n\n    // Set up environment\n    process.env.DATABASE_URL = connectionString;\n    process.env.NODE_ENV = \"test\";\n    process.env.OBSIDIAN_VAULT_PATH = path.join(__dirname, \"../../test-vault\");\n\n    // Create test vault directory with sample files\n    await createTestVault();\n\n    // Initialize database\n    execSync(\"npm run setup\", {\n      stdio: \"inherit\",\n      env: { ...process.env, DATABASE_URL: connectionString },\n    });\n\n    // Ingest test data\n    execSync(\"npm run ingest\", {\n      stdio: \"inherit\",\n      env: {\n        ...process.env,\n        DATABASE_URL: connectionString,\n        OBSIDIAN_VAULT_PATH: process.env.OBSIDIAN_VAULT_PATH,\n      },\n    });\n\n    // Start the server\n    apiBaseUrl = \"http://localhost:3001\";\n    serverProcess = spawn(\"npm\", [\"run\", \"dev\"], {\n      stdio: [\"pipe\", \"pipe\", \"pipe\"],\n      env: { ...process.env, DATABASE_URL: connectionString, PORT: \"3001\" },\n    });\n\n    // Wait for server to start\n    await waitForServer(apiBaseUrl, 30000);\n  }, 60000);\n\n  afterAll(async () => {\n    // Clean up\n    if (serverProcess) {\n      serverProcess.kill();\n    }\n    if (postgresContainer) {\n      await postgresContainer.stop();\n    }\n\n    // Clean up test vault\n    try {\n      fs.rmSync(process.env.OBSIDIAN_VAULT_PATH!, {\n        recursive: true,\n        force: true,\n      });\n    } catch (e) {\n      // Ignore cleanup errors\n    }\n  });\n\n  describe(\"Health Check API\", () => {\n    it(\"should return healthy status\", async () => {\n      const response = await fetch(`${apiBaseUrl}/health`);\n      expect(response.status).toBe(200);\n\n      const health = await response.json();\n      expect(health.status).toBe(\"healthy\");\n      expect(health.version).toBeDefined();\n      expect(health.services).toBeDefined();\n      expect(health.metrics).toBeDefined();\n    });\n  });\n\n  describe(\"Search API\", () => {\n    it(\"should perform semantic search\", async () => {\n      const response = await fetch(`${apiBaseUrl}/search`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          query: \"design system components\",\n        }),\n      });\n\n      expect(response.status).toBe(200);\n      const result = await response.json();\n\n      expect(result.query).toBe(\"design system components\");\n      expect(Array.isArray(result.results)).toBe(true);\n      expect(typeof result.totalFound).toBe(\"number\");\n      expect(result.performance).toBeDefined();\n      expect(typeof result.performance.totalTime).toBe(\"number\");\n    });\n\n    it(\"should handle search with filters\", async () => {\n      const response = await fetch(`${apiBaseUrl}/search`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          query: \"test\",\n          options: {\n            contentTypes: [\"note\"],\n            limit: 5,\n          },\n        }),\n      });\n\n      expect(response.status).toBe(200);\n      const result = await response.json();\n\n      expect(result.results.length).toBeLessThanOrEqual(5);\n      // All results should be notes if filter is applied\n      result.results.forEach((r: any) => {\n        if (r.meta.contentType) {\n          expect([\"note\", \"moc\", \"article\"]).toContain(r.meta.contentType);\n        }\n      });\n    });\n\n    it(\"should handle empty search gracefully\", async () => {\n      const response = await fetch(`${apiBaseUrl}/search`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          query: \"\",\n        }),\n      });\n\n      expect(response.status).toBe(400);\n      const error = await response.json();\n      expect(error.error).toBeDefined();\n    });\n\n    it(\"should handle pagination\", async () => {\n      const response = await fetch(`${apiBaseUrl}/search`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          query: \"test\",\n          pagination: {\n            limit: 2,\n            offset: 0,\n          },\n        }),\n      });\n\n      expect(response.status).toBe(200);\n      const result = await response.json();\n\n      expect(result.results.length).toBeLessThanOrEqual(2);\n      expect(result.pagination).toBeDefined();\n      expect(result.pagination.hasMore).toBeDefined();\n    });\n  });\n\n  describe(\"Document API\", () => {\n    it(\"should retrieve document by ID\", async () => {\n      // First get a document ID from search\n      const searchResponse = await fetch(`${apiBaseUrl}/search`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          query: \"test\",\n          pagination: { limit: 1 },\n        }),\n      });\n\n      const searchResult = await searchResponse.json();\n      const documentId = searchResult.results[0]?.id;\n\n      if (documentId) {\n        const response = await fetch(\n          `${apiBaseUrl}/documents/${encodeURIComponent(documentId)}`\n        );\n        expect(response.status).toBe(200);\n\n        const doc = await response.json();\n        expect(doc.document).toBeDefined();\n        expect(doc.document.id).toBe(documentId);\n        expect(doc.document.content).toBeDefined();\n      }\n    });\n\n    it(\"should return 404 for non-existent document\", async () => {\n      const response = await fetch(`${apiBaseUrl}/documents/non-existent-doc`);\n      expect(response.status).toBe(404);\n\n      const error = await response.json();\n      expect(error.error).toBeDefined();\n    });\n\n    it(\"should retrieve document chunks\", async () => {\n      // First get a document ID\n      const searchResponse = await fetch(`${apiBaseUrl}/search`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          query: \"test\",\n          pagination: { limit: 1 },\n        }),\n      });\n\n      const searchResult = await searchResponse.json();\n      const documentId = searchResult.results[0]?.id;\n\n      if (documentId) {\n        const response = await fetch(\n          `${apiBaseUrl}/documents/${encodeURIComponent(documentId)}/chunks`\n        );\n        expect(response.status).toBe(200);\n\n        const chunkResult = await response.json();\n        expect(chunkResult.documentId).toBe(documentId);\n        expect(Array.isArray(chunkResult.chunks)).toBe(true);\n        expect(typeof chunkResult.total).toBe(\"number\");\n      }\n    });\n  });\n\n  describe(\"Analytics API\", () => {\n    it(\"should return vault analytics\", async () => {\n      const response = await fetch(`${apiBaseUrl}/analytics`);\n      expect(response.status).toBe(200);\n\n      const analytics = await response.json();\n      expect(analytics.analytics).toBeDefined();\n      expect(analytics.analytics.overview).toBeDefined();\n      expect(analytics.analytics.contentDistribution).toBeDefined();\n      expect(analytics.generated).toBeDefined();\n      expect(analytics.computationTime).toBeDefined();\n    });\n  });\n\n  describe(\"Stats API\", () => {\n    it(\"should return database statistics\", async () => {\n      const response = await fetch(`${apiBaseUrl}/stats`);\n      expect(response.status).toBe(200);\n\n      const stats = await response.json();\n      expect(typeof stats.totalChunks).toBe(\"number\");\n      expect(stats.byContentType).toBeDefined();\n      expect(stats.byFolder).toBeDefined();\n      expect(stats.tagDistribution).toBeDefined();\n    });\n  });\n\n  describe(\"Ingestion API\", () => {\n    it(\"should reject ingestion without auth\", async () => {\n      const response = await fetch(`${apiBaseUrl}/ingest`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          vaultPath: \"/tmp/test-vault\",\n        }),\n      });\n\n      expect(response.status).toBe(401);\n      const error = await response.json();\n      expect(error.error).toBeDefined();\n    });\n  });\n\n  describe(\"Error Handling\", () => {\n    it(\"should handle malformed JSON gracefully\", async () => {\n      const response = await fetch(`${apiBaseUrl}/search`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: \"{invalid json\",\n      });\n\n      expect(response.status).toBe(400);\n      const error = await response.json();\n      expect(error.error).toBeDefined();\n    });\n\n    it(\"should handle invalid HTTP methods\", async () => {\n      const response = await fetch(`${apiBaseUrl}/search`, {\n        method: \"PUT\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ query: \"test\" }),\n      });\n\n      expect(response.status).toBe(405);\n    });\n  });\n\n  describe(\"Performance Benchmarks\", () => {\n    it(\"should respond within acceptable time limits\", async () => {\n      const startTime = Date.now();\n\n      const response = await fetch(`${apiBaseUrl}/search`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          query: \"performance test query\",\n        }),\n      });\n\n      const endTime = Date.now();\n      const responseTime = endTime - startTime;\n\n      expect(response.status).toBe(200);\n      expect(responseTime).toBeLessThan(2000); // Should respond within 2 seconds\n    });\n\n    it(\"should handle concurrent requests\", async () => {\n      const requests = Array(5)\n        .fill(null)\n        .map(() =>\n          fetch(`${apiBaseUrl}/search`, {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n              query: \"concurrent test\",\n            }),\n          })\n        );\n\n      const responses = await Promise.all(requests);\n\n      responses.forEach((response) => {\n        expect(response.status).toBe(200);\n      });\n    });\n  });\n});\n\nasync function createTestVault(): Promise<void> {\n  const vaultPath = process.env.OBSIDIAN_VAULT_PATH!;\n  const fs = require(\"fs\");\n  const path = require(\"path\");\n\n  // Create vault structure\n  fs.mkdirSync(vaultPath, { recursive: true });\n  fs.mkdirSync(path.join(vaultPath, \"MOCs\"), { recursive: true });\n  fs.mkdirSync(path.join(vaultPath, \"Articles\"), { recursive: true });\n  fs.mkdirSync(path.join(vaultPath, \"Notes\"), { recursive: true });\n\n  // Create test documents\n  const documents = [\n    {\n      path: \"MOCs/Design Systems.md\",\n      content: `---\ntitle: Design Systems\ncreated: 2024-01-01\ntags: [design, system, ui]\n---\n\n# Design Systems\n\nDesign systems are crucial for maintaining consistency across products and teams. They provide a unified approach to design and development.\n\n## Components\n\nDesign systems typically include:\n- UI components and patterns\n- Design tokens and variables\n- Documentation and guidelines\n- Code implementation examples\n\n## Benefits\n\n- Consistency across products\n- Faster development cycles\n- Better user experience\n- Easier maintenance\n\n## Related Concepts\n\nSee also: [[UI Components]], [[Design Tokens]], [[Style Guides]]`,\n    },\n    {\n      path: \"Articles/Atomic Design.md\",\n      content: `---\ntitle: Atomic Design Methodology\ncreated: 2024-01-02\ntags: [design, methodology, components]\n---\n\n# Atomic Design: A Methodology\n\nAtomic design is a methodology for creating design systems. It breaks down interfaces into fundamental building blocks.\n\n## Atoms\n\nThe smallest, indivisible elements:\n- Buttons\n- Input fields\n- Labels\n- Icons\n\n## Molecules\n\nCombinations of atoms:\n- Search forms\n- Navigation menus\n- Card headers\n\n## Organisms\n\nComplex UI sections:\n- Headers\n- Sidebars\n- Product cards\n\n## Templates & Pages\n\nFull page layouts and specific page implementations.\n\n## Benefits\n\n- Scalable design systems\n- Consistent component usage\n- Easier maintenance\n- Better collaboration`,\n    },\n    {\n      path: \"Notes/UI Components.md\",\n      content: `---\ntitle: UI Components\ncreated: 2024-01-03\ntags: [ui, components, development]\n---\n\n# UI Components\n\nReusable interface elements that form the building blocks of user interfaces.\n\n## Button Component\n\n\\`\\`\\`typescript\ninterface ButtonProps {\n  variant: 'primary' | 'secondary' | 'outline';\n  size: 'small' | 'medium' | 'large';\n  disabled?: boolean;\n  children: React.ReactNode;\n}\n\nfunction Button({ variant, size, disabled, children }: ButtonProps) {\n  return (\n    <button\n      className={\\`btn btn-\\${variant} btn-\\${size}\\`}\n      disabled={disabled}\n    >\n      {children}\n    </button>\n  );\n}\n\\`\\`\\`\n\n## Usage Examples\n\n- Primary buttons for main actions\n- Secondary buttons for alternative actions\n- Outline buttons for less important actions\n\n## Accessibility\n\n- Keyboard navigation support\n- Screen reader compatibility\n- Focus management\n- Color contrast compliance`,\n    },\n    {\n      path: \"Notes/Testing Strategies.md\",\n      content: `---\ntitle: Testing Strategies\ncreated: 2024-01-04\ntags: [testing, quality, development]\n---\n\n# Testing Strategies for Software Development\n\nComprehensive testing approaches ensure software reliability and quality.\n\n## Unit Testing\n\nTests individual functions and methods:\n- Fast execution\n- Isolated testing\n- Easy to maintain\n\n## Integration Testing\n\nTests component interactions:\n- API endpoint testing\n- Database operations\n- External service calls\n\n## End-to-End Testing\n\nTests complete user workflows:\n- User interface testing\n- Full application flows\n- Cross-browser compatibility\n\n## Performance Testing\n\nEvaluates system performance:\n- Load testing\n- Stress testing\n- Scalability assessment\n\n## Benefits\n\n- Early bug detection\n- Improved code quality\n- Regression prevention\n- Documentation of expected behavior`,\n    },\n  ];\n\n  // Write documents to vault\n  documents.forEach((doc) => {\n    const fullPath = path.join(vaultPath, doc.path);\n    fs.mkdirSync(path.dirname(fullPath), { recursive: true });\n    fs.writeFileSync(fullPath, doc.content);\n  });\n}\n\nasync function waitForServer(url: string, timeout: number): Promise<void> {\n  const startTime = Date.now();\n\n  while (Date.now() - startTime < timeout) {\n    try {\n      const response = await fetch(url);\n      if (response.status === 200) {\n        return;\n      }\n    } catch (e) {\n      // Server not ready yet\n    }\n\n    await sleep(1000);\n  }\n\n  throw new Error(`Server at ${url} did not start within ${timeout}ms`);\n}\n"},"tests/integration/database.integration.test.ts":{"tests":[{"id":"15","name":"ObsidianDatabase Integration Database Initialization should create the obsidian_chunks table"},{"id":"16","name":"ObsidianDatabase Integration Database Initialization should create required indexes"},{"id":"17","name":"ObsidianDatabase Integration Chunk Operations should upsert a chunk successfully"},{"id":"18","name":"ObsidianDatabase Integration Chunk Operations should retrieve a chunk by ID"},{"id":"19","name":"ObsidianDatabase Integration Chunk Operations should return null for non-existent chunk"},{"id":"20","name":"ObsidianDatabase Integration Chunk Operations should update existing chunk on upsert"},{"id":"21","name":"ObsidianDatabase Integration Batch Operations should batch upsert chunks"},{"id":"22","name":"ObsidianDatabase Integration Search Operations should search by vector similarity"},{"id":"23","name":"ObsidianDatabase Integration Search Operations should filter by content type"},{"id":"24","name":"ObsidianDatabase Integration Search Operations should respect limit parameter"},{"id":"25","name":"ObsidianDatabase Integration Search Operations should filter by minimum similarity"},{"id":"26","name":"ObsidianDatabase Integration File-based Operations should retrieve all chunks for a file"},{"id":"27","name":"ObsidianDatabase Integration File-based Operations should delete all chunks for a file"},{"id":"28","name":"ObsidianDatabase Integration Statistics should provide accurate statistics"},{"id":"29","name":"ObsidianDatabase Integration Statistics should track content types correctly"},{"id":"30","name":"ObsidianDatabase Integration Error Handling should handle dimension mismatch gracefully"},{"id":"31","name":"ObsidianDatabase Integration Error Handling should handle search with wrong embedding dimensions"}],"source":"import { describe, it, expect, beforeAll, afterAll } from \"vitest\";\nimport {\n  PostgreSqlContainer,\n  StartedPostgreSqlContainer,\n} from \"@testcontainers/postgresql\";\nimport { ObsidianDatabase } from \"../../src/lib/database.js\";\n\ndescribe(\"ObsidianDatabase Integration\", () => {\n  let postgresContainer: StartedPostgreSqlContainer;\n  let database: ObsidianDatabase;\n\n  beforeAll(async () => {\n    // Start PostgreSQL container\n    postgresContainer = await new PostgreSqlContainer()\n      .withDatabase(\"testdb\")\n      .withUsername(\"testuser\")\n      .withPassword(\"testpass\")\n      .start();\n\n    // Create database instance with container connection\n    const connectionString = postgresContainer.getConnectionUri();\n    database = new ObsidianDatabase(connectionString);\n\n    // Initialize database schema\n    await database.initialize();\n  }, 60000); // 60 second timeout for container startup\n\n  afterAll(async () => {\n    if (database) {\n      await database.close();\n    }\n    if (postgresContainer) {\n      await postgresContainer.stop();\n    }\n  });\n\n  describe(\"Database Initialization\", () => {\n    it(\"should create the obsidian_chunks table\", async () => {\n      // This is implicitly tested by the beforeAll, but we can verify the table exists\n      const stats = await database.getStats();\n      expect(stats.totalChunks).toBe(0); // Should start empty\n    });\n\n    it(\"should create required indexes\", async () => {\n      // Test that we can query the database without errors\n      const results = await database.search([0.1, 0.2, 0.3], 10);\n      expect(results).toBeInstanceOf(Array);\n      expect(results.length).toBe(0); // Should be empty initially\n    });\n  });\n\n  describe(\"Chunk Operations\", () => {\n    const testChunk = {\n      id: \"test-chunk-1\",\n      text: \"This is a test chunk of content for integration testing\",\n      meta: {\n        uri: \"obsidian://test/file.md\",\n        section: \"Test Section\",\n        breadcrumbs: [\"Root\", \"Test\"],\n        contentType: \"note\",\n        sourceType: \"obsidian\",\n        sourceDocumentId: \"test-file\",\n        lang: \"en\",\n        acl: \"public\",\n        updatedAt: new Date(\"2024-01-01T00:00:00Z\"),\n        createdAt: new Date(\"2024-01-01T00:00:00Z\"),\n      },\n      embedding: [0.1, 0.2, 0.3, 0.4, 0.5], // 5 dimensions for testing\n    };\n\n    it(\"should upsert a chunk successfully\", async () => {\n      await database.upsertChunk(testChunk);\n\n      // Verify it was stored\n      const retrieved = await database.getChunkById(testChunk.id);\n      expect(retrieved).toBeTruthy();\n      expect(retrieved!.text).toBe(testChunk.text);\n      expect(retrieved!.meta.section).toBe(testChunk.meta.section);\n    });\n\n    it(\"should retrieve a chunk by ID\", async () => {\n      const retrieved = await database.getChunkById(testChunk.id);\n      expect(retrieved).toBeTruthy();\n      expect(retrieved!.id).toBe(testChunk.id);\n      expect(retrieved!.text).toBe(testChunk.text);\n    });\n\n    it(\"should return null for non-existent chunk\", async () => {\n      const retrieved = await database.getChunkById(\"non-existent-id\");\n      expect(retrieved).toBeNull();\n    });\n\n    it(\"should update existing chunk on upsert\", async () => {\n      const updatedChunk = {\n        ...testChunk,\n        text: \"Updated test chunk content\",\n      };\n\n      await database.upsertChunk(updatedChunk);\n\n      const retrieved = await database.getChunkById(testChunk.id);\n      expect(retrieved!.text).toBe(\"Updated test chunk content\");\n    });\n  });\n\n  describe(\"Batch Operations\", () => {\n    const batchChunks = [\n      {\n        id: \"batch-chunk-1\",\n        text: \"First batch chunk\",\n        meta: {\n          uri: \"obsidian://batch/file1.md\",\n          section: \"Batch Section 1\",\n          breadcrumbs: [\"Root\"],\n          contentType: \"note\",\n          sourceType: \"obsidian\",\n          sourceDocumentId: \"batch-file1\",\n          lang: \"en\",\n          acl: \"public\",\n          updatedAt: new Date(),\n          createdAt: new Date(),\n        },\n        embedding: [0.1, 0.2, 0.3, 0.4, 0.5],\n      },\n      {\n        id: \"batch-chunk-2\",\n        text: \"Second batch chunk\",\n        meta: {\n          uri: \"obsidian://batch/file2.md\",\n          section: \"Batch Section 2\",\n          breadcrumbs: [\"Root\"],\n          contentType: \"note\",\n          sourceType: \"obsidian\",\n          sourceDocumentId: \"batch-file2\",\n          lang: \"en\",\n          acl: \"public\",\n          updatedAt: new Date(),\n          createdAt: new Date(),\n        },\n        embedding: [0.2, 0.3, 0.4, 0.5, 0.6],\n      },\n    ];\n\n    it(\"should batch upsert chunks\", async () => {\n      await database.batchUpsertChunks(batchChunks);\n\n      // Verify both chunks were stored\n      const chunk1 = await database.getChunkById(\"batch-chunk-1\");\n      const chunk2 = await database.getChunkById(\"batch-chunk-2\");\n\n      expect(chunk1).toBeTruthy();\n      expect(chunk2).toBeTruthy();\n      expect(chunk1!.text).toBe(\"First batch chunk\");\n      expect(chunk2!.text).toBe(\"Second batch chunk\");\n    });\n  });\n\n  describe(\"Search Operations\", () => {\n    beforeAll(async () => {\n      // Add test data for search\n      const searchChunks = [\n        {\n          id: \"search-design-1\",\n          text: \"Design systems are crucial for maintaining consistency across products\",\n          meta: {\n            uri: \"obsidian://search/design1.md\",\n            section: \"Design Systems\",\n            breadcrumbs: [\"Design\"],\n            contentType: \"article\",\n            sourceType: \"obsidian\",\n            sourceDocumentId: \"design1\",\n            lang: \"en\",\n            acl: \"public\",\n            updatedAt: new Date(),\n            createdAt: new Date(),\n          },\n          embedding: [0.8, 0.1, 0.2, 0.3, 0.4], // High similarity to design queries\n        },\n        {\n          id: \"search-code-1\",\n          text: \"TypeScript provides type safety for JavaScript applications\",\n          meta: {\n            uri: \"obsidian://search/code1.md\",\n            section: \"TypeScript\",\n            breadcrumbs: [\"Development\"],\n            contentType: \"note\",\n            sourceType: \"obsidian\",\n            sourceDocumentId: \"code1\",\n            lang: \"en\",\n            acl: \"public\",\n            updatedAt: new Date(),\n            createdAt: new Date(),\n          },\n          embedding: [0.1, 0.8, 0.2, 0.3, 0.4], // High similarity to code queries\n        },\n        {\n          id: \"search-moc-1\",\n          text: \"Maps of Content help organize knowledge in Obsidian vaults\",\n          meta: {\n            uri: \"obsidian://MOCs/knowledge.md\",\n            section: \"Knowledge Management\",\n            breadcrumbs: [\"MOCs\"],\n            contentType: \"moc\",\n            sourceType: \"obsidian\",\n            sourceDocumentId: \"knowledge\",\n            lang: \"en\",\n            acl: \"public\",\n            updatedAt: new Date(),\n            createdAt: new Date(),\n          },\n          embedding: [0.3, 0.2, 0.8, 0.1, 0.4], // Moderate similarity\n        },\n      ];\n\n      for (const chunk of searchChunks) {\n        await database.upsertChunk(chunk);\n      }\n    });\n\n    it(\"should search by vector similarity\", async () => {\n      const queryEmbedding = [0.8, 0.1, 0.2, 0.3, 0.4]; // Similar to design chunk\n      const results = await database.search(queryEmbedding, 5);\n\n      expect(results.length).toBeGreaterThan(0);\n      expect(results[0].id).toBe(\"search-design-1\"); // Should be most similar\n      expect(results[0].cosineSimilarity).toBeGreaterThan(0.9);\n    });\n\n    it(\"should filter by content type\", async () => {\n      const queryEmbedding = [0.5, 0.5, 0.5, 0.5, 0.5];\n      const results = await database.search(queryEmbedding, 10, undefined, [\n        \"moc\",\n      ]);\n\n      // Should only return MOC content\n      results.forEach((result) => {\n        expect(result.meta.contentType).toBe(\"moc\");\n      });\n    });\n\n    it(\"should respect limit parameter\", async () => {\n      const queryEmbedding = [0.5, 0.5, 0.5, 0.5, 0.5];\n      const results = await database.search(queryEmbedding, 2);\n\n      expect(results.length).toBeLessThanOrEqual(2);\n    });\n\n    it(\"should filter by minimum similarity\", async () => {\n      const queryEmbedding = [0.8, 0.1, 0.2, 0.3, 0.4];\n      const results = await database.search(\n        queryEmbedding,\n        10,\n        undefined,\n        undefined,\n        undefined,\n        undefined,\n        undefined,\n        0.5\n      );\n\n      results.forEach((result) => {\n        expect(result.cosineSimilarity).toBeGreaterThanOrEqual(0.5);\n      });\n    });\n  });\n\n  describe(\"File-based Operations\", () => {\n    beforeAll(async () => {\n      // Add chunks for the same file\n      const fileChunks = [\n        {\n          id: \"file-test-md-chunk-1\",\n          text: \"First chunk of test.md\",\n          meta: {\n            uri: \"obsidian://test.md\",\n            section: \"Introduction\",\n            breadcrumbs: [\"Root\"],\n            contentType: \"note\",\n            sourceType: \"obsidian\",\n            sourceDocumentId: \"test\",\n            lang: \"en\",\n            acl: \"public\",\n            updatedAt: new Date(),\n            createdAt: new Date(),\n            chunkIndex: 0,\n          },\n          embedding: [0.1, 0.2, 0.3, 0.4, 0.5],\n        },\n        {\n          id: \"file-test-md-chunk-2\",\n          text: \"Second chunk of test.md\",\n          meta: {\n            uri: \"obsidian://test.md\",\n            section: \"Conclusion\",\n            breadcrumbs: [\"Root\"],\n            contentType: \"note\",\n            sourceType: \"obsidian\",\n            sourceDocumentId: \"test\",\n            lang: \"en\",\n            acl: \"public\",\n            updatedAt: new Date(),\n            createdAt: new Date(),\n            chunkIndex: 1,\n          },\n          embedding: [0.2, 0.3, 0.4, 0.5, 0.6],\n        },\n      ];\n\n      for (const chunk of fileChunks) {\n        await database.upsertChunk(chunk);\n      }\n    });\n\n    it(\"should retrieve all chunks for a file\", async () => {\n      const chunks = await database.getChunksByFile(\"test\");\n\n      expect(chunks.length).toBe(2);\n      expect(chunks.map((c) => c.id)).toEqual(\n        expect.arrayContaining([\"file-test-md-chunk-1\", \"file-test-md-chunk-2\"])\n      );\n    });\n\n    it(\"should delete all chunks for a file\", async () => {\n      await database.deleteChunksByFile(\"test\");\n\n      const chunks = await database.getChunksByFile(\"test\");\n      expect(chunks.length).toBe(0);\n    });\n  });\n\n  describe(\"Statistics\", () => {\n    it(\"should provide accurate statistics\", async () => {\n      const stats = await database.getStats();\n\n      expect(typeof stats.totalChunks).toBe(\"number\");\n      expect(stats.totalChunks).toBeGreaterThanOrEqual(0);\n      expect(typeof stats.byContentType).toBe(\"object\");\n      expect(typeof stats.byFolder).toBe(\"object\");\n      expect(typeof stats.tagDistribution).toBe(\"object\");\n    });\n\n    it(\"should track content types correctly\", async () => {\n      const stats = await database.getStats();\n\n      // Should have some content types from our test data\n      expect(Object.keys(stats.byContentType).length).toBeGreaterThan(0);\n    });\n  });\n\n  describe(\"Error Handling\", () => {\n    it(\"should handle dimension mismatch gracefully\", async () => {\n      const invalidChunk = {\n        id: \"invalid-chunk\",\n        text: \"Test\",\n        meta: {\n          uri: \"obsidian://test.md\",\n          section: \"Test\",\n          breadcrumbs: [],\n          contentType: \"note\",\n          sourceType: \"obsidian\",\n          sourceDocumentId: \"test\",\n          lang: \"en\",\n          acl: \"public\",\n          updatedAt: new Date(),\n          createdAt: new Date(),\n        },\n        embedding: [0.1, 0.2], // Wrong dimension (should be 768)\n      };\n\n      await expect(database.upsertChunk(invalidChunk)).rejects.toThrow(\n        \"Embedding dimension mismatch\"\n      );\n    });\n\n    it(\"should handle search with wrong embedding dimensions\", async () => {\n      const wrongDimensionEmbedding = [0.1, 0.2, 0.3]; // Wrong dimension\n\n      await expect(database.search(wrongDimensionEmbedding, 5)).rejects.toThrow(\n        \"Query embedding dimension mismatch\"\n      );\n    });\n  });\n});\n"},"tests/unit/database.test.ts":{"tests":[{"id":"32","name":"ObsidianDatabase should initialize successfully"},{"id":"33","name":"ObsidianDatabase should have correct table name"},{"id":"34","name":"ObsidianDatabase should have correct dimension"},{"id":"35","name":"ObsidianDatabase should have default table name"},{"id":"36","name":"ObsidianDatabase should have a pool instance"},{"id":"37","name":"ObsidianDatabase should validate dimension is positive"},{"id":"38","name":"ObsidianDatabase upsertChunk should insert new chunk successfully"},{"id":"39","name":"ObsidianDatabase upsertChunk should update existing chunk"},{"id":"40","name":"ObsidianDatabase upsertChunk should reject chunks with wrong embedding dimension"},{"id":"41","name":"ObsidianDatabase upsertChunk should reject chunks with null embedding"},{"id":"42","name":"ObsidianDatabase batchUpsertChunks should insert multiple chunks successfully"},{"id":"43","name":"ObsidianDatabase batchUpsertChunks should handle empty batch"},{"id":"44","name":"ObsidianDatabase search should search by embedding similarity"},{"id":"45","name":"ObsidianDatabase search should filter by tags"},{"id":"46","name":"ObsidianDatabase search should filter by file types"},{"id":"47","name":"ObsidianDatabase search should filter by folders"},{"id":"48","name":"ObsidianDatabase search should filter by wikilinks presence"},{"id":"49","name":"ObsidianDatabase search should reject queries with wrong embedding dimension"},{"id":"50","name":"ObsidianDatabase getChunkById should return null for non-existent chunk"},{"id":"51","name":"ObsidianDatabase getChunksByFile should return empty array for file with no chunks"},{"id":"52","name":"ObsidianDatabase deleteChunksByFile should handle deleting non-existent file"}],"source":"import { describe, it, expect, beforeEach, afterEach } from \"vitest\";\nimport { ObsidianDatabase } from \"../../src/lib/database.js\";\n\ndescribe(\"ObsidianDatabase\", () => {\n  let db: ObsidianDatabase;\n\n  beforeEach(async () => {\n    // Use test database URL\n    const testUrl =\n      process.env.DATABASE_URL ||\n      \"postgresql://postgres:password@localhost:5432/obsidian_rag_test\";\n    db = new ObsidianDatabase(testUrl);\n\n    try {\n      await db.initialize();\n    } catch (error) {\n      // Skip tests if database is not available\n      console.warn(\"Database not available for tests, skipping...\");\n      return;\n    }\n  });\n\n  afterEach(async () => {\n    if (db) {\n      await db.close();\n    }\n  });\n\n  it(\"should initialize successfully\", async () => {\n    // Test passes if no error thrown in beforeEach\n    expect(true).toBe(true);\n  });\n\n  it(\"should have correct table name\", () => {\n    expect((db as any).tableName).toBe(\"obsidian_chunks\");\n  });\n\n  it(\"should have correct dimension\", () => {\n    expect((db as any).dimension).toBe(768);\n  });\n\n  it(\"should have default table name\", () => {\n    expect((db as any).tableName).toBe(\"obsidian_chunks\");\n  });\n\n  it(\"should have a pool instance\", () => {\n    expect((db as any).pool).toBeDefined();\n  });\n\n  it(\"should validate dimension is positive\", () => {\n    expect((db as any).dimension).toBeGreaterThan(0);\n  });\n\n  describe(\"upsertChunk\", () => {\n    it(\"should insert new chunk successfully\", async () => {\n      try {\n        const chunk = {\n          id: \"test-insert\",\n          text: \"Insert test\",\n          meta: {\n            obsidianFile: {\n              fileName: \"insert.md\",\n              filePath: \"insert.md\",\n              tags: [],\n              wikilinks: []\n            },\n            contentType: \"markdown\",\n            updatedAt: new Date().toISOString()\n          },\n          embedding: new Array(768).fill(0.1)\n        };\n\n        await db.upsertChunk(chunk as any);\n\n        const retrieved = await db.getChunkById(\"test-insert\");\n        expect(retrieved).not.toBeNull();\n        expect(retrieved!.text).toBe(\"Insert test\");\n      } catch (error: any) {\n        if (error.code === '28000' || error.message?.includes('role') || error.message?.includes('does not exist')) {\n          console.warn(\"Database not available for tests, skipping...\");\n          expect(true).toBe(true); // Skip test\n        } else {\n          throw error;\n        }\n      }\n    });\n\n    it(\"should update existing chunk\", async () => {\n      try {\n        const chunk = {\n          id: \"test-update\",\n          text: \"Original content\",\n          meta: {\n            obsidianFile: {\n              fileName: \"update.md\",\n              filePath: \"update.md\",\n              tags: [],\n              wikilinks: []\n            },\n            contentType: \"markdown\",\n            updatedAt: new Date().toISOString()\n          },\n          embedding: new Array(768).fill(0.1)\n        };\n\n        await db.upsertChunk(chunk as any);\n\n        // Update the chunk\n        const updatedChunk = {\n          ...chunk,\n          text: \"Updated content\"\n        };\n\n        await db.upsertChunk(updatedChunk as any);\n\n        const retrieved = await db.getChunkById(\"test-update\");\n        expect(retrieved!.text).toBe(\"Updated content\");\n      } catch (error: any) {\n        if (error.code === '28000' || error.message?.includes('role') || error.message?.includes('does not exist')) {\n          console.warn(\"Database not available for tests, skipping...\");\n          expect(true).toBe(true); // Skip test\n        } else {\n          throw error;\n        }\n      }\n    });\n\n    it(\"should reject chunks with wrong embedding dimension\", async () => {\n      const chunk = {\n        id: \"test-dimension\",\n        text: \"Wrong dimension\",\n        meta: {\n          obsidianFile: {\n            fileName: \"dimension.md\",\n            filePath: \"dimension.md\",\n            tags: [],\n            wikilinks: []\n          },\n          contentType: \"markdown\",\n          updatedAt: new Date().toISOString()\n        },\n        embedding: new Array(500).fill(0.1) // Wrong dimension\n      };\n\n      await expect(db.upsertChunk(chunk as any)).rejects.toThrow(\"Embedding dimension mismatch\");\n    });\n\n    it(\"should reject chunks with null embedding\", async () => {\n      const chunk = {\n        id: \"test-null-embedding\",\n        text: \"Null embedding\",\n        meta: {\n          obsidianFile: {\n            fileName: \"null.md\",\n            filePath: \"null.md\",\n            tags: [],\n            wikilinks: []\n          },\n          contentType: \"markdown\",\n          updatedAt: new Date().toISOString()\n        },\n        embedding: null\n      };\n\n      await expect(db.upsertChunk(chunk as any)).rejects.toThrow(\"Embedding dimension mismatch\");\n    });\n  });\n\n  describe(\"batchUpsertChunks\", () => {\n    it(\"should insert multiple chunks successfully\", async () => {\n      try {\n        const chunks = [\n          {\n            id: \"batch-1\",\n            text: \"Batch content 1\",\n            meta: {\n              obsidianFile: {\n                fileName: \"batch1.md\",\n                filePath: \"batch1.md\",\n                tags: [],\n                wikilinks: []\n              },\n              contentType: \"markdown\",\n              updatedAt: new Date().toISOString()\n            },\n            embedding: new Array(768).fill(0.1)\n          },\n          {\n            id: \"batch-2\",\n            text: \"Batch content 2\",\n            meta: {\n              obsidianFile: {\n                fileName: \"batch2.md\",\n                filePath: \"batch2.md\",\n                tags: [],\n                wikilinks: []\n              },\n              contentType: \"markdown\",\n              updatedAt: new Date().toISOString()\n            },\n            embedding: new Array(768).fill(0.2)\n          }\n        ];\n\n        await db.batchUpsertChunks(chunks as any);\n\n        const retrieved1 = await db.getChunkById(\"batch-1\");\n        const retrieved2 = await db.getChunkById(\"batch-2\");\n\n        expect(retrieved1).not.toBeNull();\n        expect(retrieved2).not.toBeNull();\n        expect(retrieved1!.text).toBe(\"Batch content 1\");\n        expect(retrieved2!.text).toBe(\"Batch content 2\");\n      } catch (error: any) {\n        if (error.code === '28000' || error.message?.includes('role') || error.message?.includes('does not exist')) {\n          console.warn(\"Database not available for tests, skipping...\");\n          expect(true).toBe(true); // Skip test\n        } else {\n          throw error;\n        }\n      }\n    });\n\n    it(\"should handle empty batch\", async () => {\n      await expect(db.batchUpsertChunks([])).resolves.not.toThrow();\n    });\n  });\n\n  describe(\"search\", () => {\n    beforeEach(async () => {\n      try {\n        // Insert test data\n        const chunks = [\n          {\n            id: \"search-1\",\n            text: \"This is about artificial intelligence and machine learning\",\n            meta: {\n              obsidianFile: {\n                fileName: \"ai.md\",\n                filePath: \"Tech/ai.md\",\n                tags: [\"AI\", \"ML\"],\n                wikilinks: [\"Machine Learning\"]\n              },\n              contentType: \"markdown\",\n              updatedAt: new Date(\"2024-01-01\").toISOString()\n            },\n            embedding: new Array(768).fill(0.1)\n          },\n          {\n            id: \"search-2\",\n            text: \"This is about web development and JavaScript\",\n            meta: {\n              obsidianFile: {\n                fileName: \"web.md\",\n                filePath: \"Tech/web.md\",\n                tags: [\"JavaScript\", \"Web\"],\n                wikilinks: []\n              },\n              contentType: \"markdown\",\n              updatedAt: new Date(\"2024-01-02\").toISOString()\n            },\n            embedding: new Array(768).fill(0.2)\n          }\n        ];\n\n        for (const chunk of chunks) {\n          await db.upsertChunk(chunk as any);\n        }\n      } catch (error: any) {\n        if (error.code === '28000' || error.message?.includes('role') || error.message?.includes('does not exist')) {\n          console.warn(\"Database not available for tests, skipping setup...\");\n          // Don't throw, just skip setup\n        } else {\n          throw error;\n        }\n      }\n    });\n\n    it(\"should search by embedding similarity\", async () => {\n      try {\n        const results = await db.search(new Array(768).fill(0.1), 10);\n        expect(results.length).toBeGreaterThan(0);\n        expect(results[0].id).toBe(\"search-1\"); // Most similar to query vector\n      } catch (error: any) {\n        if (error.code === '28000' || error.message?.includes('role') || error.message?.includes('does not exist')) {\n          console.warn(\"Database not available for tests, skipping...\");\n          expect(true).toBe(true); // Skip test\n        } else {\n          throw error;\n        }\n      }\n    });\n\n    it(\"should filter by tags\", async () => {\n      try {\n        const results = await db.search(new Array(768).fill(0.1), 10, {\n          tags: [\"AI\"]\n        });\n        expect(results.length).toBe(1);\n        expect(results[0].id).toBe(\"search-1\");\n      } catch (error: any) {\n        if (error.code === '28000' || error.message?.includes('role') || error.message?.includes('does not exist')) {\n          console.warn(\"Database not available for tests, skipping...\");\n          expect(true).toBe(true); // Skip test\n        } else {\n          throw error;\n        }\n      }\n    });\n\n    it(\"should filter by file types\", async () => {\n      try {\n        const results = await db.search(new Array(768).fill(0.1), 10, {\n          fileTypes: [\"markdown\"]\n        });\n        expect(results.length).toBe(2);\n      } catch (error: any) {\n        if (error.code === '28000' || error.message?.includes('role') || error.message?.includes('does not exist')) {\n          console.warn(\"Database not available for tests, skipping...\");\n          expect(true).toBe(true); // Skip test\n        } else {\n          throw error;\n        }\n      }\n    });\n\n    it(\"should filter by folders\", async () => {\n      try {\n        const results = await db.search(new Array(768).fill(0.1), 10, {\n          folders: [\"Tech\"]\n        });\n        expect(results.length).toBe(2);\n      } catch (error: any) {\n        if (error.code === '28000' || error.message?.includes('role') || error.message?.includes('does not exist')) {\n          console.warn(\"Database not available for tests, skipping...\");\n          expect(true).toBe(true); // Skip test\n        } else {\n          throw error;\n        }\n      }\n    });\n\n    it(\"should filter by wikilinks presence\", async () => {\n      try {\n        const results = await db.search(new Array(768).fill(0.1), 10, {\n          hasWikilinks: true\n        });\n        expect(results.length).toBe(1); // Only search-1 has wikilinks\n      } catch (error: any) {\n        if (error.code === '28000' || error.message?.includes('role') || error.message?.includes('does not exist')) {\n          console.warn(\"Database not available for tests, skipping...\");\n          expect(true).toBe(true); // Skip test\n        } else {\n          throw error;\n        }\n      }\n    });\n\n    it(\"should reject queries with wrong embedding dimension\", async () => {\n      await expect(db.search(new Array(500).fill(0.1), 10)).rejects.toThrow(\"Query embedding dimension mismatch\");\n    });\n  });\n\n  describe(\"getChunkById\", () => {\n    it(\"should return null for non-existent chunk\", async () => {\n      try {\n        const retrieved = await db.getChunkById(\"non-existent\");\n        expect(retrieved).toBeNull();\n      } catch (error: any) {\n        if (error.code === '28000' || error.message?.includes('role') || error.message?.includes('does not exist')) {\n          console.warn(\"Database not available for tests, skipping...\");\n          expect(true).toBe(true); // Skip test\n        } else {\n          throw error;\n        }\n      }\n    });\n  });\n\n  describe(\"getChunksByFile\", () => {\n    it(\"should return empty array for file with no chunks\", async () => {\n      try {\n        const retrieved = await db.getChunksByFile(\"empty.md\");\n        expect(retrieved).toEqual([]);\n      } catch (error: any) {\n        if (error.code === '28000' || error.message?.includes('role') || error.message?.includes('does not exist')) {\n          console.warn(\"Database not available for tests, skipping...\");\n          expect(true).toBe(true); // Skip test\n        } else {\n          throw error;\n        }\n      }\n    });\n  });\n\n  describe(\"deleteChunksByFile\", () => {\n    it(\"should handle deleting non-existent file\", async () => {\n      try {\n        await db.deleteChunksByFile(\"non-existent.md\");\n      } catch (error: any) {\n        if (error.code === '28000' || error.message?.includes('role') || error.message?.includes('does not exist')) {\n          console.warn(\"Database not available for tests, skipping...\");\n          expect(true).toBe(true); // Skip test\n        } else {\n          throw error;\n        }\n      }\n    });\n  });\n});\n"},"tests/unit/ingest-multi-modal.test.ts":{"tests":[{"id":"53","name":"Multi-Modal Ingestion CLI File Discovery should respect include patterns"},{"id":"54","name":"Multi-Modal Ingestion CLI File Discovery should respect exclude patterns"},{"id":"55","name":"Multi-Modal Ingestion CLI Configuration Parsing should parse basic file arguments"},{"id":"56","name":"Multi-Modal Ingestion CLI Configuration Parsing should parse configuration options"},{"id":"57","name":"Multi-Modal Ingestion CLI Configuration Parsing should parse pattern options"},{"id":"58","name":"Multi-Modal Ingestion CLI Content Type Analysis should analyze content type breakdown"},{"id":"59","name":"Multi-Modal Ingestion CLI Content Type Analysis should handle unknown extensions"},{"id":"60","name":"Multi-Modal Ingestion CLI Validation Logic should validate successful ingestion"},{"id":"61","name":"Multi-Modal Ingestion CLI Validation Logic should detect missing multi-modal chunks"},{"id":"62","name":"Multi-Modal Ingestion CLI Validation Logic should handle database errors gracefully"}],"source":"import { describe, it, expect, beforeEach, vi, afterEach } from \"vitest\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\n// Mock the modules that would be imported in the CLI script\nvi.mock(\"../../src/lib/database.js\", () => ({\n  ObsidianDatabase: vi.fn(),\n}));\n\nvi.mock(\"../../src/lib/embeddings.js\", () => ({\n  ObsidianEmbeddingService: vi.fn(),\n}));\n\nvi.mock(\"../../src/lib/multi-modal-ingest.js\", () => ({\n  MultiModalIngestionPipeline: vi.fn(),\n}));\n\nimport { ObsidianDatabase } from \"../../src/lib/database.js\";\nimport { ObsidianEmbeddingService } from \"../../src/lib/embeddings.js\";\nimport { MultiModalIngestionPipeline } from \"../../src/lib/multi-modal-ingest.js\";\n\ndescribe(\"Multi-Modal Ingestion CLI\", () => {\n  let mockDatabase: any;\n  let mockEmbeddings: any;\n  let mockPipeline: any;\n  let testDir: string;\n\n  beforeEach(() => {\n    mockDatabase = {\n      initialize: vi.fn().mockResolvedValue(undefined),\n      clearAll: vi.fn().mockResolvedValue(undefined),\n      close: vi.fn().mockResolvedValue(undefined),\n      search: vi.fn().mockResolvedValue([]),\n    };\n\n    mockEmbeddings = {};\n\n    mockPipeline = {\n      ingestFiles: vi.fn(),\n    };\n\n    // Mock constructors\n    ObsidianDatabase.mockReturnValue(mockDatabase);\n    ObsidianEmbeddingService.mockReturnValue(mockEmbeddings);\n    MultiModalIngestionPipeline.mockReturnValue(mockPipeline);\n\n    // Create test directory\n    testDir = path.join(process.cwd(), \"test-cli-temp\");\n    if (!fs.existsSync(testDir)) {\n      fs.mkdirSync(testDir, { recursive: true });\n    }\n  });\n\n  afterEach(() => {\n    vi.clearAllMocks();\n    vi.resetModules();\n\n    // Clean up test directory\n    if (fs.existsSync(testDir)) {\n      fs.rmSync(testDir, { recursive: true, force: true });\n    }\n  });\n\n  describe(\"File Discovery\", () => {\n    // Note: These tests would normally test the file discovery logic\n    // from the CLI script, but since it's a script file, we're testing\n    // the core logic that would be extracted into a testable function\n\n    it.skip(\"should discover files recursively\", () => {\n      // TODO: Fix file system mocking for this test\n      // The fs module mocking interferes with directory traversal\n      expect(true).toBe(true);\n    });\n\n    it(\"should respect include patterns\", () => {\n      fs.writeFileSync(path.join(testDir, \"test.txt\"), \"text content\");\n      fs.writeFileSync(path.join(testDir, \"test.json\"), \"json content\");\n      fs.writeFileSync(path.join(testDir, \"test.pdf\"), \"pdf content\");\n\n      const files = discoverTestFiles(testDir, {\n        includePatterns: [\"**/*.txt\", \"**/*.json\"],\n        excludePatterns: [],\n      });\n\n      expect(files).toHaveLength(2);\n      expect(files).toContain(path.join(testDir, \"test.txt\"));\n      expect(files).toContain(path.join(testDir, \"test.json\"));\n      expect(files).not.toContain(path.join(testDir, \"test.pdf\"));\n    });\n\n    it(\"should respect exclude patterns\", () => {\n      const excludeDir = path.join(testDir, \"node_modules\");\n      fs.mkdirSync(excludeDir);\n      fs.writeFileSync(path.join(excludeDir, \"excluded.txt\"), \"excluded\");\n\n      fs.writeFileSync(path.join(testDir, \"included.txt\"), \"included\");\n\n      const files = discoverTestFiles(testDir, {\n        includePatterns: [\"**/*\"],\n        excludePatterns: [\"node_modules/**\"],\n      });\n\n      expect(files).toHaveLength(1);\n      expect(files).toContain(path.join(testDir, \"included.txt\"));\n      expect(files).not.toContain(path.join(excludeDir, \"excluded.txt\"));\n    });\n  });\n\n  describe(\"Configuration Parsing\", () => {\n    it(\"should parse basic file arguments\", () => {\n      const args = [\"file1.txt\", \"file2.json\"];\n\n      const { filePaths, options } = parseTestArgs(args);\n\n      expect(filePaths).toEqual([\"file1.txt\", \"file2.json\"]);\n      expect(options.batchSize).toBe(5); // default\n      expect(options.skipExisting).toBe(true); // default\n    });\n\n    it(\"should parse configuration options\", () => {\n      const args = [\n        \"--batch-size\",\n        \"10\",\n        \"--rate-limit\",\n        \"500\",\n        \"--no-skip-existing\",\n        \"--max-file-size\",\n        \"1048576\",\n        \"test.txt\",\n      ];\n\n      const { filePaths, options } = parseTestArgs(args);\n\n      expect(filePaths).toEqual([\"test.txt\"]);\n      expect(options.batchSize).toBe(10);\n      expect(options.rateLimitMs).toBe(500);\n      expect(options.skipExisting).toBe(false);\n      expect(options.maxFileSize).toBe(1048576);\n    });\n\n    it(\"should parse pattern options\", () => {\n      const args = [\n        \"--include\",\n        \"**/*.{txt,json}\",\n        \"--exclude\",\n        \"temp/**,**/backup/**\",\n        \"dir/\",\n      ];\n\n      const { filePaths, options } = parseTestArgs(args);\n\n      expect(filePaths).toEqual([\"dir/\"]);\n      expect(options.includePatterns).toEqual([\"**/*.{txt\", \"json}\"]);\n      expect(options.excludePatterns).toEqual([\"temp/**\", \"**/backup/**\"]);\n    });\n  });\n\n  describe(\"Content Type Analysis\", () => {\n    it(\"should analyze content type breakdown\", () => {\n      const files = [\n        \"/test/file1.txt\",\n        \"/test/file2.json\",\n        \"/test/file3.md\",\n        \"/test/file4.pdf\",\n        \"/test/file5.txt\",\n      ];\n\n      const breakdown = getTestContentTypeBreakdown(files);\n\n      expect(breakdown[\"Text\"]).toBe(2);\n      expect(breakdown[\"JSON\"]).toBe(1);\n      expect(breakdown[\"Markdown\"]).toBe(1);\n      expect(breakdown[\"PDF\"]).toBe(1);\n    });\n\n    it(\"should handle unknown extensions\", () => {\n      const files = [\"/test/file.unknown\"];\n\n      const breakdown = getTestContentTypeBreakdown(files);\n\n      expect(breakdown[\"Other\"]).toBe(1);\n    });\n  });\n\n  describe(\"Validation Logic\", () => {\n    it(\"should validate successful ingestion\", async () => {\n      mockDatabase.search.mockResolvedValue([\n        { meta: { multiModalFile: { contentType: \"plain_text\" } } },\n      ]);\n\n      const validation = await validateTestIngestion(mockDatabase, 5);\n\n      expect(validation.isValid).toBe(true);\n      expect(validation.errors).toHaveLength(0);\n    });\n\n    it(\"should detect missing multi-modal chunks\", async () => {\n      mockDatabase.search.mockResolvedValue([\n        { meta: {} }, // No multiModalFile\n      ]);\n\n      const validation = await validateTestIngestion(mockDatabase, 1);\n\n      expect(validation.isValid).toBe(false);\n      expect(validation.errors).toContain(\n        \"No multi-modal chunks found - ingestion may have failed\"\n      );\n    });\n\n    it(\"should handle database errors gracefully\", async () => {\n      mockDatabase.search.mockRejectedValue(new Error(\"Database error\"));\n\n      const validation = await validateTestIngestion(mockDatabase, 1);\n\n      expect(validation.isValid).toBe(false);\n      expect(validation.errors).toContain(\n        \"Validation failed: Error: Database error\"\n      );\n    });\n  });\n});\n\n// Test helper functions (duplicating logic from CLI for testing)\n\nfunction discoverFiles(\n  inputPaths: string[],\n  options: {\n    includePatterns: string[];\n    excludePatterns: string[];\n  }\n): string[] {\n  const files: string[] = [];\n\n  for (const inputPath of inputPaths) {\n    if (fs.existsSync(inputPath)) {\n      const stat = fs.statSync(inputPath);\n\n      if (stat.isDirectory()) {\n        walkTestDirectory(inputPath, files, options);\n      } else if (stat.isFile()) {\n        if (shouldIncludeTestFile(inputPath, options)) {\n          files.push(inputPath);\n        }\n      }\n    }\n  }\n\n  return files;\n}\n\nfunction discoverTestFiles(\n  dirPath: string,\n  options: {\n    includePatterns: string[];\n    excludePatterns: string[];\n  }\n): string[] {\n  return discoverFiles([dirPath], options);\n}\n\nfunction walkTestDirectory(\n  dirPath: string,\n  files: string[],\n  options: {\n    includePatterns: string[];\n    excludePatterns: string[];\n  }\n): void {\n  try {\n    // Skip system directories that might cause permission issues\n    if (\n      dirPath.includes(\"/Library/\") ||\n      dirPath.includes(\"/System/\") ||\n      dirPath.includes(\"/private/\") ||\n      !dirPath.startsWith(process.cwd())\n    ) {\n      return;\n    }\n\n    const entries = fs.readdirSync(dirPath, { withFileTypes: true });\n\n    for (const entry of entries) {\n      const fullPath = path.join(dirPath, entry.name);\n      const relativePath = path.relative(process.cwd(), fullPath);\n\n      if (\n        options.excludePatterns.some((pattern) =>\n          matchesTestPattern(relativePath, pattern)\n        )\n      ) {\n        continue;\n      }\n\n      if (entry.isDirectory()) {\n        walkTestDirectory(fullPath, files, options);\n      } else if (entry.isFile()) {\n        if (shouldIncludeTestFile(relativePath, options)) {\n          files.push(fullPath);\n        }\n      }\n    }\n  } catch (error) {\n    // Skip directories we can't access\n    return;\n  }\n}\n\nfunction shouldIncludeTestFile(\n  filePath: string,\n  options: {\n    includePatterns: string[];\n    excludePatterns: string[];\n  }\n): boolean {\n  if (\n    options.excludePatterns.some((pattern) =>\n      matchesTestPattern(filePath, pattern)\n    )\n  ) {\n    return false;\n  }\n\n  return options.includePatterns.some((pattern) =>\n    matchesTestPattern(filePath, pattern)\n  );\n}\n\nfunction matchesTestPattern(filePath: string, pattern: string): boolean {\n  const regexPattern = pattern\n    .replace(/\\*\\*/g, \".*\")\n    .replace(/\\*/g, \"[^/]*\")\n    .replace(/\\?/g, \".\");\n  const regex = new RegExp(`^${regexPattern}$`);\n  return regex.test(filePath);\n}\n\nfunction parseTestArgs(args: string[]): { filePaths: string[]; options: any } {\n  const filePaths: string[] = [];\n  const options: any = {\n    batchSize: 5,\n    rateLimitMs: 200,\n    skipExisting: true,\n    maxFileSize: 50 * 1024 * 1024,\n    includePatterns: [\"**/*\"],\n    excludePatterns: [\"node_modules/**\", \".git/**\", \"**/.*/**\"],\n  };\n\n  let i = 0;\n  while (i < args.length) {\n    const arg = args[i];\n\n    if (arg.startsWith(\"--\")) {\n      switch (arg) {\n        case \"--batch-size\":\n          options.batchSize = parseInt(args[++i]);\n          break;\n        case \"--rate-limit\":\n          options.rateLimitMs = parseInt(args[++i]);\n          break;\n        case \"--max-file-size\":\n          options.maxFileSize = parseInt(args[++i]);\n          break;\n        case \"--include\":\n          options.includePatterns = args[++i].split(\",\");\n          break;\n        case \"--exclude\":\n          options.excludePatterns = args[++i].split(\",\");\n          break;\n        case \"--skip-existing\":\n          options.skipExisting = true;\n          break;\n        case \"--no-skip-existing\":\n          options.skipExisting = false;\n          break;\n        default:\n          throw new Error(`Unknown option: ${arg}`);\n      }\n    } else {\n      filePaths.push(arg);\n    }\n    i++;\n  }\n\n  return { filePaths, options };\n}\n\nfunction getTestContentTypeBreakdown(files: string[]): Record<string, number> {\n  const breakdown: Record<string, number> = {};\n\n  files.forEach((file) => {\n    const ext = path.extname(file).toLowerCase();\n    const type = getTestContentTypeFromExtension(ext);\n    breakdown[type] = (breakdown[type] || 0) + 1;\n  });\n\n  return breakdown;\n}\n\nfunction getTestContentTypeFromExtension(ext: string): string {\n  const extMap: Record<string, string> = {\n    \".md\": \"Markdown\",\n    \".txt\": \"Text\",\n    \".pdf\": \"PDF\",\n    \".docx\": \"Word Document\",\n    \".doc\": \"Word Document\",\n    \".xlsx\": \"Excel Spreadsheet\",\n    \".xls\": \"Excel Spreadsheet\",\n    \".pptx\": \"PowerPoint\",\n    \".ppt\": \"PowerPoint\",\n    \".jpg\": \"Image\",\n    \".jpeg\": \"Image\",\n    \".png\": \"Image\",\n    \".gif\": \"Image\",\n    \".mp3\": \"Audio\",\n    \".wav\": \"Audio\",\n    \".mp4\": \"Video\",\n    \".avi\": \"Video\",\n    \".json\": \"JSON\",\n    \".xml\": \"XML\",\n    \".csv\": \"CSV\",\n  };\n\n  return extMap[ext] || \"Other\";\n}\n\nasync function validateTestIngestion(\n  database: any,\n  expectedChunks: number\n): Promise<{ isValid: boolean; errors: string[] }> {\n  try {\n    const sampleChunks = await database.search(new Array(768).fill(0), 5);\n    const errors: string[] = [];\n\n    if (sampleChunks.length === 0 && expectedChunks > 0) {\n      errors.push(\"No chunks found in database\");\n    }\n\n    const hasMultiModal = sampleChunks.some(\n      (chunk: any) => chunk.meta.multiModalFile !== undefined\n    );\n\n    if (!hasMultiModal && expectedChunks > 0) {\n      errors.push(\"No multi-modal chunks found - ingestion may have failed\");\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n    };\n  } catch (error) {\n    return {\n      isValid: false,\n      errors: [`Validation failed: ${error}`],\n    };\n  }\n}\n"},"tests/contract/api.contract.test.ts":{"tests":[{"id":"63","name":"API Contract Compliance Search API Contracts should validate search response structure"},{"id":"64","name":"API Contract Compliance Search API Contracts should reject invalid search responses"},{"id":"65","name":"API Contract Compliance Search API Contracts should validate search response with optional facets"},{"id":"66","name":"API Contract Compliance Health API Contracts should validate healthy response"},{"id":"67","name":"API Contract Compliance Health API Contracts should validate degraded response"},{"id":"68","name":"API Contract Compliance Document API Contracts should validate document response"},{"id":"69","name":"API Contract Compliance Analytics API Contracts should validate analytics response"},{"id":"70","name":"API Contract Compliance Error Response Contracts should validate error response structure"},{"id":"71","name":"API Contract Compliance Error Response Contracts should validate minimal error response"},{"id":"72","name":"API Contract Compliance Request Validation should validate valid search requests"},{"id":"73","name":"API Contract Compliance Request Validation should reject invalid search requests"},{"id":"74","name":"API Contract Compliance Data Integrity Contracts should validate document chunk relationships"},{"id":"75","name":"API Contract Compliance Data Integrity Contracts should validate wikilink structure"},{"id":"76","name":"API Contract Compliance API Version Compatibility should maintain backward compatibility"}],"source":"import { describe, it, expect } from \"vitest\";\nimport Ajv from \"ajv\";\nimport fs from \"fs\";\nimport path from \"path\";\n\n// Load OpenAPI schema\nconst openApiPath = path.join(__dirname, \"../../contracts/api.yaml\");\nconst openApiContent = fs.readFileSync(openApiPath, \"utf-8\");\n\n// Parse OpenAPI spec (simplified for testing - in production use a proper OpenAPI parser)\nconst ajv = new Ajv({\n  allErrors: true,\n  coerceTypes: true,\n  strict: false,\n  formats: {\n    \"date-time\": true, // Enable date-time format validation\n  },\n});\n\ndescribe(\"API Contract Compliance\", () => {\n  describe(\"Search API Contracts\", () => {\n    const searchResponseSchema = {\n      type: \"object\",\n      required: [\"query\", \"results\", \"totalFound\", \"performance\"],\n      properties: {\n        query: { type: \"string\" },\n        results: {\n          type: \"array\",\n          items: {\n            type: \"object\",\n            required: [\"id\", \"text\", \"meta\", \"cosineSimilarity\", \"rank\"],\n            properties: {\n              id: { type: \"string\" },\n              text: { type: \"string\" },\n              meta: {\n                type: \"object\",\n                required: [\"section\", \"contentType\"],\n                properties: {\n                  section: { type: \"string\" },\n                  contentType: { type: \"string\" },\n                  breadcrumbs: {\n                    type: \"array\",\n                    items: { type: \"string\" },\n                  },\n                },\n              },\n              cosineSimilarity: { type: \"number\", minimum: 0, maximum: 1 },\n              rank: { type: \"integer\", minimum: 1 },\n            },\n          },\n        },\n        totalFound: { type: \"integer\", minimum: 0 },\n        performance: {\n          type: \"object\",\n          required: [\"totalTime\", \"searchTime\", \"processingTime\"],\n          properties: {\n            totalTime: { type: \"number\", minimum: 0 },\n            searchTime: { type: \"number\", minimum: 0 },\n            processingTime: { type: \"number\", minimum: 0 },\n          },\n        },\n      },\n    };\n\n    const validateSearchResponse = ajv.compile(searchResponseSchema);\n\n    it(\"should validate search response structure\", () => {\n      const mockResponse = {\n        query: \"test query\",\n        results: [\n          {\n            id: \"chunk-1\",\n            text: \"This is test content\",\n            meta: {\n              section: \"Test Section\",\n              contentType: \"note\",\n              breadcrumbs: [\"Root\", \"Test\"],\n            },\n            cosineSimilarity: 0.85,\n            rank: 1,\n          },\n        ],\n        totalFound: 1,\n        performance: {\n          totalTime: 150,\n          searchTime: 120,\n          processingTime: 30,\n        },\n      };\n\n      const valid = validateSearchResponse(mockResponse);\n      expect(valid).toBe(true);\n\n      if (!valid) {\n        console.error(\"Validation errors:\", validateSearchResponse.errors);\n      }\n    });\n\n    it(\"should reject invalid search responses\", () => {\n      const invalidResponse = {\n        query: \"test query\",\n        results: [\n          {\n            // Missing required fields\n            text: \"This is test content\",\n          },\n        ],\n        totalFound: 1,\n        // Missing performance field\n      };\n\n      const valid = validateSearchResponse(invalidResponse);\n      expect(valid).toBe(false);\n    });\n\n    it(\"should validate search response with optional facets\", () => {\n      const responseWithFacets = {\n        query: \"test query\",\n        results: [\n          {\n            id: \"chunk-1\",\n            text: \"This is test content\",\n            meta: {\n              section: \"Test Section\",\n              contentType: \"note\",\n            },\n            cosineSimilarity: 0.85,\n            rank: 1,\n          },\n        ],\n        totalFound: 1,\n        performance: {\n          totalTime: 150,\n          searchTime: 120,\n          processingTime: 30,\n        },\n        facets: {\n          contentTypes: [\n            { type: \"note\", count: 5 },\n            { type: \"article\", count: 2 },\n          ],\n          tags: [\n            { tag: \"test\", count: 3 },\n            { tag: \"example\", count: 2 },\n          ],\n        },\n      };\n\n      const valid = validateSearchResponse(responseWithFacets);\n      expect(valid).toBe(true);\n    });\n  });\n\n  describe(\"Health API Contracts\", () => {\n    const healthResponseSchema = {\n      type: \"object\",\n      required: [\"status\", \"timestamp\", \"version\", \"services\", \"metrics\"],\n      properties: {\n        status: {\n          type: \"string\",\n          enum: [\"healthy\", \"degraded\", \"unhealthy\"],\n        },\n        timestamp: { type: \"string\", format: \"date-time\" },\n        version: { type: \"string\" },\n        services: {\n          type: \"object\",\n          required: [\"database\", \"embeddings\", \"indexing\"],\n          properties: {\n            database: { type: \"string\", enum: [\"up\", \"down\"] },\n            embeddings: { type: \"string\", enum: [\"up\", \"down\"] },\n            indexing: { type: \"string\", enum: [\"up\", \"down\"] },\n          },\n        },\n        metrics: {\n          type: \"object\",\n          required: [\n            \"totalDocuments\",\n            \"totalChunks\",\n            \"lastIngestion\",\n            \"uptime\",\n          ],\n          properties: {\n            totalDocuments: { type: \"integer\", minimum: 0 },\n            totalChunks: { type: \"integer\", minimum: 0 },\n            lastIngestion: {\n              anyOf: [\n                { type: \"string\", format: \"date-time\" },\n                { type: \"null\" },\n              ],\n            },\n            uptime: { type: \"number\", minimum: 0 },\n          },\n        },\n      },\n    };\n\n    const validateHealthResponse = ajv.compile(healthResponseSchema);\n\n    it(\"should validate healthy response\", () => {\n      const healthyResponse = {\n        status: \"healthy\",\n        timestamp: \"2024-01-15T10:30:00Z\",\n        version: \"1.0.0\",\n        services: {\n          database: \"up\",\n          embeddings: \"up\",\n          indexing: \"up\",\n        },\n        metrics: {\n          totalDocuments: 150,\n          totalChunks: 1250,\n          lastIngestion: \"2024-01-15T09:00:00Z\",\n          uptime: 3600,\n        },\n      };\n\n      const valid = validateHealthResponse(healthyResponse);\n      expect(valid).toBe(true);\n    });\n\n    it(\"should validate degraded response\", () => {\n      const degradedResponse = {\n        status: \"degraded\",\n        timestamp: \"2024-01-15T10:30:00Z\",\n        version: \"1.0.0\",\n        services: {\n          database: \"up\",\n          embeddings: \"down\",\n          indexing: \"up\",\n        },\n        metrics: {\n          totalDocuments: 150,\n          totalChunks: 1250,\n          lastIngestion: null,\n          uptime: 3600,\n        },\n      };\n\n      const valid = validateHealthResponse(degradedResponse);\n      if (!valid) {\n        console.log(\n          \"Health validation errors:\",\n          JSON.stringify(validateHealthResponse.errors, null, 2)\n        );\n      }\n      expect(valid).toBe(true);\n    });\n  });\n\n  describe(\"Document API Contracts\", () => {\n    const documentResponseSchema = {\n      type: \"object\",\n      required: [\"document\"],\n      properties: {\n        document: {\n          type: \"object\",\n          required: [\"id\", \"path\", \"name\", \"content\", \"metadata\"],\n          properties: {\n            id: { type: \"string\" },\n            path: { type: \"string\" },\n            name: { type: \"string\" },\n            extension: { type: \"string\", enum: [\"md\", \"canvas\"] },\n            content: { type: \"string\" },\n            frontmatter: { type: \"object\" },\n            stats: {\n              type: \"object\",\n              required: [\"wordCount\", \"characterCount\", \"lineCount\"],\n              properties: {\n                wordCount: { type: \"integer\", minimum: 0 },\n                characterCount: { type: \"integer\", minimum: 0 },\n                lineCount: { type: \"integer\", minimum: 0 },\n                headingCount: { type: \"integer\", minimum: 0 },\n                linkCount: { type: \"integer\", minimum: 0 },\n                tagCount: { type: \"integer\", minimum: 0 },\n              },\n            },\n          },\n        },\n      },\n    };\n\n    const validateDocumentResponse = ajv.compile(documentResponseSchema);\n\n    it(\"should validate document response\", () => {\n      const documentResponse = {\n        document: {\n          id: \"doc-1\",\n          path: \"Documents/Test.md\",\n          name: \"Test\",\n          extension: \"md\",\n          content: \"# Test Document\\n\\nContent here.\",\n          frontmatter: { title: \"Test Document\" },\n          stats: {\n            wordCount: 25,\n            characterCount: 150,\n            lineCount: 5,\n            headingCount: 1,\n            linkCount: 0,\n            tagCount: 2,\n          },\n          relationships: {\n            wikilinks: [],\n            tags: [\"test\", \"example\"],\n            backlinks: [],\n          },\n          metadata: {\n            created: \"2024-01-01T00:00:00Z\",\n            modified: \"2024-01-15T00:00:00Z\",\n            checksum: \"abc123\",\n            lastIndexed: \"2024-01-15T00:00:00Z\",\n            processingErrors: [],\n          },\n        },\n      };\n\n      const valid = validateDocumentResponse(documentResponse);\n      expect(valid).toBe(true);\n    });\n  });\n\n  describe(\"Analytics API Contracts\", () => {\n    const analyticsResponseSchema = {\n      type: \"object\",\n      required: [\"analytics\", \"generated\", \"computationTime\"],\n      properties: {\n        analytics: {\n          type: \"object\",\n          required: [\n            \"overview\",\n            \"contentDistribution\",\n            \"networkAnalysis\",\n            \"temporalAnalysis\",\n            \"qualityMetrics\",\n          ],\n          properties: {\n            overview: {\n              type: \"object\",\n              required: [\n                \"totalDocuments\",\n                \"totalWords\",\n                \"totalLinks\",\n                \"totalTags\",\n                \"vaultAge\",\n              ],\n              properties: {\n                totalDocuments: { type: \"integer\", minimum: 0 },\n                totalWords: { type: \"integer\", minimum: 0 },\n                totalLinks: { type: \"integer\", minimum: 0 },\n                totalTags: { type: \"integer\", minimum: 0 },\n                vaultAge: { type: \"integer\", minimum: 0 },\n              },\n            },\n          },\n        },\n        generated: { type: \"string\", format: \"date-time\" },\n        computationTime: { type: \"number\", minimum: 0 },\n      },\n    };\n\n    const validateAnalyticsResponse = ajv.compile(analyticsResponseSchema);\n\n    it(\"should validate analytics response\", () => {\n      const analyticsResponse = {\n        analytics: {\n          overview: {\n            totalDocuments: 150,\n            totalWords: 25000,\n            totalLinks: 450,\n            totalTags: 120,\n            vaultAge: 365,\n          },\n          contentDistribution: {\n            byType: { note: 100, article: 30, moc: 20 },\n            byFolder: { Documents: 80, Projects: 50, Archive: 20 },\n            byTag: { project: 25, important: 15, review: 10 },\n          },\n          networkAnalysis: {\n            hubDocuments: [\n              { document: \"Main.md\", connections: 25, centrality: 0.8 },\n            ],\n            clusters: [],\n            orphans: [\"Orphan.md\"],\n            linkHealth: {\n              brokenLinks: 0,\n              missingReferences: 2,\n              circularReferences: 0,\n            },\n          },\n          temporalAnalysis: {\n            creationTimeline: [\n              { period: \"2024-01\", count: 45 },\n              { period: \"2024-02\", count: 38 },\n            ],\n            modificationTimeline: [\n              { period: \"2024-01\", count: 25 },\n              { period: \"2024-02\", count: 50 },\n            ],\n            activityPatterns: {\n              mostActiveDays: [\"Monday\", \"Wednesday\"],\n              mostActiveHours: [9, 14, 16],\n            },\n          },\n          qualityMetrics: {\n            averageDocumentLength: 167,\n            averageLinksPerDocument: 3.0,\n            tagConsistency: 0.85,\n            formattingConsistency: 0.92,\n          },\n        },\n        generated: \"2024-01-15T10:30:00Z\",\n        computationTime: 2500,\n      };\n\n      const valid = validateAnalyticsResponse(analyticsResponse);\n      expect(valid).toBe(true);\n    });\n  });\n\n  describe(\"Error Response Contracts\", () => {\n    const errorResponseSchema = {\n      type: \"object\",\n      required: [\"error\", \"message\"],\n      properties: {\n        error: { type: \"string\" },\n        message: { type: \"string\" },\n        details: { type: \"object\" },\n        timestamp: { type: \"string\", format: \"date-time\" },\n      },\n    };\n\n    const validateErrorResponse = ajv.compile(errorResponseSchema);\n\n    it(\"should validate error response structure\", () => {\n      const errorResponse = {\n        error: \"VALIDATION_ERROR\",\n        message: \"Invalid search query parameters\",\n        details: {\n          query: \"Query must be at least 1 character long\",\n        },\n        timestamp: \"2024-01-15T10:30:00Z\",\n      };\n\n      const valid = validateErrorResponse(errorResponse);\n      expect(valid).toBe(true);\n    });\n\n    it(\"should validate minimal error response\", () => {\n      const minimalError = {\n        error: \"INTERNAL_ERROR\",\n        message: \"An unexpected error occurred\",\n      };\n\n      const valid = validateErrorResponse(minimalError);\n      expect(valid).toBe(true);\n    });\n  });\n\n  describe(\"Request Validation\", () => {\n    const searchRequestSchema = {\n      type: \"object\",\n      required: [\"query\"],\n      properties: {\n        query: {\n          type: \"string\",\n          minLength: 1,\n          maxLength: 500,\n        },\n        options: {\n          type: \"object\",\n          properties: {\n            limit: { type: \"integer\", minimum: 1, maximum: 50 },\n            minSimilarity: { type: \"number\", minimum: 0, maximum: 1 },\n            contentTypes: {\n              type: \"array\",\n              items: {\n                type: \"string\",\n                enum: [\n                  \"note\",\n                  \"moc\",\n                  \"article\",\n                  \"conversation\",\n                  \"template\",\n                  \"book-note\",\n                ],\n              },\n            },\n            tags: {\n              type: \"array\",\n              items: { type: \"string\" },\n            },\n            folders: {\n              type: \"array\",\n              items: { type: \"string\" },\n            },\n            searchMode: {\n              type: \"string\",\n              enum: [\"semantic\", \"hybrid\", \"graph\", \"comprehensive\"],\n            },\n          },\n        },\n        pagination: {\n          type: \"object\",\n          properties: {\n            limit: { type: \"integer\", minimum: 1, maximum: 50, default: 20 },\n            offset: { type: \"integer\", minimum: 0, default: 0 },\n          },\n        },\n      },\n    };\n\n    const validateSearchRequest = ajv.compile(searchRequestSchema);\n\n    it(\"should validate valid search requests\", () => {\n      const validRequests = [\n        { query: \"test search\" },\n        {\n          query: \"advanced search\",\n          options: {\n            limit: 25,\n            contentTypes: [\"note\", \"article\"],\n            tags: [\"important\"],\n            searchMode: \"comprehensive\",\n          },\n          pagination: { limit: 25, offset: 0 },\n        },\n      ];\n\n      validRequests.forEach((request) => {\n        const valid = validateSearchRequest(request);\n        expect(valid).toBe(true);\n      });\n    });\n\n    it(\"should reject invalid search requests\", () => {\n      const invalidRequests = [\n        { query: \"\" }, // Empty query\n        { query: \"a\".repeat(501) }, // Query too long\n        {\n          query: \"test\",\n          options: { limit: 0 }, // Invalid limit\n        },\n        {\n          query: \"test\",\n          options: { minSimilarity: 1.5 }, // Invalid similarity\n        },\n      ];\n\n      invalidRequests.forEach((request) => {\n        const valid = validateSearchRequest(request);\n        expect(valid).toBe(false);\n      });\n    });\n  });\n\n  describe(\"Data Integrity Contracts\", () => {\n    it(\"should validate document chunk relationships\", () => {\n      // Test that chunks reference valid documents\n      const chunkSchema = {\n        type: \"object\",\n        required: [\"id\", \"text\", \"meta\"],\n        properties: {\n          id: { type: \"string\" },\n          text: { type: \"string\" },\n          meta: {\n            type: \"object\",\n            required: [\"section\", \"contentType\"],\n            properties: {\n              section: { type: \"string\" },\n              contentType: {\n                type: \"string\",\n                enum: [\n                  \"note\",\n                  \"moc\",\n                  \"article\",\n                  \"conversation\",\n                  \"template\",\n                  \"book-note\",\n                ],\n              },\n              breadcrumbs: {\n                type: \"array\",\n                items: { type: \"string\" },\n              },\n            },\n          },\n          embedding: {\n            type: \"array\",\n            items: { type: \"number\" },\n            minItems: 768,\n            maxItems: 768,\n          },\n        },\n      };\n\n      const validateChunk = ajv.compile(chunkSchema);\n\n      const validChunk = {\n        id: \"chunk-1\",\n        text: \"This is chunk content\",\n        meta: {\n          section: \"Introduction\",\n          contentType: \"note\",\n          breadcrumbs: [\"Root\", \"Docs\"],\n        },\n        embedding: Array.from({ length: 768 }, () => Math.random()),\n      };\n\n      const valid = validateChunk(validChunk);\n      expect(valid).toBe(true);\n    });\n\n    it(\"should validate wikilink structure\", () => {\n      const wikilinkSchema = {\n        type: \"object\",\n        required: [\"target\", \"type\", \"position\"],\n        properties: {\n          target: { type: \"string\" },\n          display: { type: \"string\" },\n          type: { type: \"string\", enum: [\"document\", \"heading\", \"block\"] },\n          position: {\n            type: \"object\",\n            required: [\"line\", \"column\", \"offset\"],\n            properties: {\n              line: { type: \"integer\", minimum: 0 },\n              column: { type: \"integer\", minimum: 0 },\n              offset: { type: \"integer\", minimum: 0 },\n            },\n          },\n          context: { type: \"string\" },\n        },\n      };\n\n      const validateWikilink = ajv.compile(wikilinkSchema);\n\n      const validWikilink = {\n        target: \"Another Note\",\n        display: \"Link Text\",\n        type: \"document\",\n        position: { line: 5, column: 10, offset: 150 },\n        context: \"See also: [[Another Note]] for details\",\n      };\n\n      const valid = validateWikilink(validWikilink);\n      expect(valid).toBe(true);\n    });\n  });\n\n  describe(\"API Version Compatibility\", () => {\n    it(\"should maintain backward compatibility\", () => {\n      // Test that new optional fields don't break existing clients\n      const minimalSearchResponse = {\n        query: \"test\",\n        results: [\n          {\n            id: \"chunk-1\",\n            text: \"content\",\n            meta: { section: \"Test\", contentType: \"note\" },\n            cosineSimilarity: 0.8,\n            rank: 1,\n          },\n        ],\n        totalFound: 1,\n        performance: {\n          totalTime: 100,\n          searchTime: 80,\n          processingTime: 20,\n        },\n      };\n\n      // This should still validate with our schema\n      const searchSchema = {\n        type: \"object\",\n        required: [\"query\", \"results\", \"totalFound\", \"performance\"],\n        properties: {\n          query: { type: \"string\" },\n          results: { type: \"array\" },\n          totalFound: { type: \"integer\" },\n          performance: { type: \"object\" },\n          // Optional fields should not break validation\n          facets: { type: \"object\" },\n          graphInsights: { type: \"object\" },\n          pagination: { type: \"object\" },\n        },\n      };\n\n      const validate = ajv.compile(searchSchema);\n      const valid = validate(minimalSearchResponse);\n      expect(valid).toBe(true);\n    });\n  });\n});\n"},"tests/unit/speech-processor.test.ts":{"tests":[{"id":"77","name":"SpeechProcessor transcribeFromBuffer should transcribe audio successfully"},{"id":"78","name":"SpeechProcessor transcribeFromBuffer should handle audio with no speech"},{"id":"79","name":"SpeechProcessor transcribeFromBuffer should handle transcription errors gracefully"},{"id":"80","name":"SpeechProcessor transcribeFromBuffer should accept custom language option"},{"id":"81","name":"SpeechProcessor transcribeFromBuffer should handle unsupported audio formats"},{"id":"82","name":"SpeechProcessor transcribeFromFile should read file and transcribe audio"},{"id":"83","name":"SpeechProcessor transcribeFromFile should handle file read errors"},{"id":"84","name":"SpeechProcessor isSupportedAudioFormat should validate WAV files"},{"id":"85","name":"SpeechProcessor isSupportedAudioFormat should validate MP3 files"},{"id":"86","name":"SpeechProcessor isSupportedAudioFormat should validate MP4/M4A files"},{"id":"87","name":"SpeechProcessor isSupportedAudioFormat should reject unsupported formats"},{"id":"88","name":"SpeechProcessor Language detection should detect English in transcription"},{"id":"89","name":"SpeechProcessor Language detection should detect Spanish in transcription"},{"id":"90","name":"SpeechProcessor Language detection should return unknown for ambiguous text"},{"id":"91","name":"SpeechProcessor Initialization and cleanup should initialize on first use"},{"id":"92","name":"SpeechProcessor Initialization and cleanup should reuse initialized processor"},{"id":"93","name":"SpeechProcessor Initialization and cleanup should cleanup resources"},{"id":"94","name":"SpeechProcessor Processing metadata should estimate audio duration"},{"id":"95","name":"SpeechProcessor Processing metadata should include confidence when text is detected"}],"source":"import { describe, it, expect, beforeEach, vi } from \"vitest\";\nimport { SpeechProcessor } from \"../../src/lib/processors/speech-processor.js\";\nimport { ContentType } from \"../../src/lib/multi-modal.js\";\n\n// Mock sherpa-onnx\nvi.mock(\"sherpa-onnx\", () => ({\n  createModel: vi.fn(),\n  createRecognizer: vi.fn(),\n}));\n\n// Mock pdf-parse to prevent initialization issues\nvi.mock(\"pdf-parse\", () => ({\n  default: vi.fn().mockResolvedValue({\n    text: \"mock pdf text\",\n    numpages: 1,\n    info: {},\n  }),\n}));\n\n// Mock fs module\nvi.mock(\"fs\", () => ({\n  default: {\n    readFileSync: vi.fn(),\n  },\n  readFileSync: vi.fn(),\n}));\n\nimport { createModel, createRecognizer } from \"sherpa-onnx\";\n\ndescribe(\"SpeechProcessor\", () => {\n  let processor: SpeechProcessor;\n  let mockModel: any;\n  let mockRecognizer: any;\n  let mockStream: any;\n\n  beforeEach(() => {\n    processor = new SpeechProcessor();\n\n    mockStream = {\n      acceptWaveform: vi.fn(),\n      inputFinished: vi.fn(),\n    };\n\n    mockRecognizer = {\n      reset: vi.fn(),\n      createStream: vi.fn().mockReturnValue(mockStream),\n      getResult: vi.fn(),\n      free: vi.fn(),\n    };\n\n    mockModel = {\n      free: vi.fn(),\n    };\n\n    (createModel as any).mockReturnValue(mockModel);\n    (createRecognizer as any).mockReturnValue(mockRecognizer);\n  });\n\n  describe(\"transcribeFromBuffer\", () => {\n    it(\"should transcribe audio successfully\", async () => {\n      mockRecognizer.getResult.mockReturnValue({\n        text: \"This is a test transcription.\",\n      });\n\n      // Mock the audio conversion to return valid data\n      const mockAudioData = new Float32Array([0.1, 0.2, 0.3]);\n      vi.spyOn(processor as any, \"convertBufferToAudioData\").mockReturnValue(\n        mockAudioData\n      );\n\n      const buffer = Buffer.from(\"fake audio data\");\n      const result = await processor.transcribeFromBuffer(buffer);\n\n      expect(result.text).toBe(\"This is a test transcription.\");\n      expect(result.metadata.type).toBe(ContentType.AUDIO);\n      expect(result.metadata.hasText).toBe(true);\n      expect(result.metadata.wordCount).toBe(5); // \"This is a test transcription.\"\n      expect(result.metadata.speechMetadata?.language).toBe(\"en\");\n      expect(result.metadata.speechMetadata?.engine).toBe(\"sherpa-onnx\");\n    });\n\n    it(\"should handle audio with no speech\", async () => {\n      mockRecognizer.getResult.mockReturnValue({\n        text: \"\",\n      });\n\n      // Mock the audio conversion\n      const mockAudioData = new Float32Array([0.1, 0.2, 0.3]);\n      vi.spyOn(processor as any, \"convertBufferToAudioData\").mockReturnValue(\n        mockAudioData\n      );\n\n      const buffer = Buffer.from(\"fake audio data\");\n      const result = await processor.transcribeFromBuffer(buffer);\n\n      expect(result.text).toContain(\"No speech detected\");\n      expect(result.metadata.hasText).toBe(false);\n      expect(result.metadata.wordCount).toBe(0);\n    });\n\n    it(\"should handle transcription errors gracefully\", async () => {\n      mockRecognizer.createStream.mockImplementation(() => {\n        throw new Error(\"Audio processing failed\");\n      });\n\n      // Mock the audio conversion\n      const mockAudioData = new Float32Array([0.1, 0.2, 0.3]);\n      vi.spyOn(processor as any, \"convertBufferToAudioData\").mockReturnValue(\n        mockAudioData\n      );\n\n      const buffer = Buffer.from(\"fake audio data\");\n      const result = await processor.transcribeFromBuffer(buffer);\n\n      expect(result.text).toContain(\"Speech processing error\");\n      expect(result.metadata.hasText).toBe(false);\n    });\n\n    it(\"should accept custom language option\", async () => {\n      mockRecognizer.getResult.mockReturnValue({\n        text: \"Hola mundo\",\n      });\n\n      // Mock the audio conversion\n      const mockAudioData = new Float32Array([0.1, 0.2, 0.3]);\n      vi.spyOn(processor as any, \"convertBufferToAudioData\").mockReturnValue(\n        mockAudioData\n      );\n\n      const buffer = Buffer.from(\"fake audio data\");\n      const result = await processor.transcribeFromBuffer(buffer, {\n        language: \"es\",\n      });\n\n      expect(result.metadata.speechMetadata?.language).toBe(\"es\");\n    });\n\n    it(\"should handle unsupported audio formats\", async () => {\n      // Mock the convertBufferToAudioData to return null\n      const originalMethod = processor[\"convertBufferToAudioData\"];\n      processor[\"convertBufferToAudioData\"] = vi.fn().mockReturnValue(null);\n\n      const buffer = Buffer.from(\"unsupported format\");\n      const result = await processor.transcribeFromBuffer(buffer);\n\n      expect(result.text).toContain(\"Unsupported audio format\");\n      expect(result.metadata.hasText).toBe(false);\n\n      // Restore original method\n      processor[\"convertBufferToAudioData\"] = originalMethod;\n    });\n  });\n\n  describe(\"transcribeFromFile\", () => {\n    it(\"should read file and transcribe audio\", async () => {\n      // Mock fs.readFileSync\n      const fs = await import(\"fs\");\n      vi.spyOn(fs, \"readFileSync\").mockReturnValue(\n        Buffer.from(\"audio file data\")\n      );\n\n      mockRecognizer.getResult.mockReturnValue({\n        text: \"File transcription result\",\n      });\n\n      // Mock the audio conversion for this specific test\n      vi.spyOn(processor as any, \"convertBufferToAudioData\").mockReturnValue(\n        new Float32Array([0.1, 0.2, 0.3])\n      );\n\n      const result = await processor.transcribeFromFile(\"/test/audio.wav\");\n\n      expect(result.text).toBe(\"File transcription result\");\n      expect(result.metadata.type).toBe(ContentType.AUDIO);\n    });\n\n    it(\"should handle file read errors\", async () => {\n      const fs = await import(\"fs\");\n      vi.spyOn(fs, \"readFileSync\").mockImplementation(() => {\n        throw new Error(\"File not found\");\n      });\n\n      const result = await processor.transcribeFromFile(\"/test/missing.wav\");\n\n      expect(result.text).toContain(\"Failed to read file\");\n      expect(result.metadata.hasText).toBe(false);\n    });\n  });\n\n  describe(\"isSupportedAudioFormat\", () => {\n    it(\"should validate WAV files\", () => {\n      const wavBuffer = Buffer.from([0x52, 0x49, 0x46, 0x46]); // RIFF\n      expect(processor.isSupportedAudioFormat(wavBuffer)).toBe(true);\n    });\n\n    it(\"should validate MP3 files\", () => {\n      const mp3Buffer = Buffer.from([0x49, 0x44, 0x33]); // ID3\n      expect(processor.isSupportedAudioFormat(mp3Buffer)).toBe(true);\n    });\n\n    it(\"should validate MP4/M4A files\", () => {\n      const mp4Buffer = Buffer.from([0x66, 0x74, 0x79, 0x70]); // ftyp\n      expect(processor.isSupportedAudioFormat(mp4Buffer)).toBe(true);\n    });\n\n    it(\"should reject unsupported formats\", () => {\n      const textBuffer = Buffer.from(\"not audio data\");\n      expect(processor.isSupportedAudioFormat(textBuffer)).toBe(false);\n    });\n  });\n\n  describe(\"Language detection\", () => {\n    it(\"should detect English in transcription\", async () => {\n      mockRecognizer.getResult.mockReturnValue({\n        text: \"This is a test with the and or but words for language detection.\",\n      });\n\n      // Mock the audio conversion\n      const mockAudioData = new Float32Array([0.1, 0.2, 0.3]);\n      vi.spyOn(processor as any, \"convertBufferToAudioData\").mockReturnValue(\n        mockAudioData\n      );\n\n      const buffer = Buffer.from(\"fake audio\");\n      const result = await processor.transcribeFromBuffer(buffer);\n\n      expect(result.metadata.language).toBe(\"en\");\n    });\n\n    it(\"should detect Spanish in transcription\", async () => {\n      mockRecognizer.getResult.mockReturnValue({\n        text: \"Este es un test con el la los las y o pero palabras.\",\n      });\n\n      // Mock the audio conversion\n      const mockAudioData = new Float32Array([0.1, 0.2, 0.3]);\n      vi.spyOn(processor as any, \"convertBufferToAudioData\").mockReturnValue(\n        mockAudioData\n      );\n\n      const buffer = Buffer.from(\"fake audio\");\n      const result = await processor.transcribeFromBuffer(buffer);\n\n      expect(result.metadata.language).toBe(\"es\");\n    });\n\n    it(\"should return unknown for ambiguous text\", async () => {\n      mockRecognizer.getResult.mockReturnValue({\n        text: \"xyz abc def random words\",\n      });\n\n      // Mock the audio conversion\n      const mockAudioData = new Float32Array([0.1, 0.2, 0.3]);\n      vi.spyOn(processor as any, \"convertBufferToAudioData\").mockReturnValue(\n        mockAudioData\n      );\n\n      const buffer = Buffer.from(\"fake audio\");\n      const result = await processor.transcribeFromBuffer(buffer);\n\n      expect(result.metadata.language).toBe(\"unknown\");\n    });\n  });\n\n  describe(\"Initialization and cleanup\", () => {\n    it(\"should initialize on first use\", async () => {\n      mockRecognizer.getResult.mockReturnValue({ text: \"test\" });\n\n      // Mock the audio conversion\n      const mockAudioData = new Float32Array([0.1, 0.2, 0.3]);\n      vi.spyOn(processor as any, \"convertBufferToAudioData\").mockReturnValue(\n        mockAudioData\n      );\n\n      await processor.transcribeFromBuffer(Buffer.from(\"test\"));\n\n      expect(createModel).toHaveBeenCalled();\n      expect(createRecognizer).toHaveBeenCalled();\n      expect(processor.isReady()).toBe(true);\n    });\n\n    it(\"should reuse initialized processor\", async () => {\n      mockRecognizer.getResult.mockReturnValue({ text: \"test\" });\n\n      // Clear previous mock calls\n      (createModel as any).mockClear();\n      (createRecognizer as any).mockClear();\n\n      // Mock the audio conversion\n      const mockAudioData = new Float32Array([0.1, 0.2, 0.3]);\n      vi.spyOn(processor as any, \"convertBufferToAudioData\").mockReturnValue(\n        mockAudioData\n      );\n\n      await processor.transcribeFromBuffer(Buffer.from(\"test1\"));\n      await processor.transcribeFromBuffer(Buffer.from(\"test2\"));\n\n      // Should be called at least once but allow for test isolation issues\n      expect(createModel).toHaveBeenCalled();\n      expect(createRecognizer).toHaveBeenCalled();\n    });\n\n    it(\"should cleanup resources\", async () => {\n      // Initialize the processor first\n      await processor.transcribeFromBuffer(Buffer.from(\"test\"));\n      await processor.cleanup();\n\n      expect(mockRecognizer.free).toHaveBeenCalled();\n      expect(mockModel.free).toHaveBeenCalled();\n      expect(processor.isReady()).toBe(false);\n    });\n  });\n\n  describe(\"Processing metadata\", () => {\n    it.skip(\"should include processing time in metadata\", async () => {\n      // Ensure the processor is initialized\n      await processor.transcribeFromBuffer(Buffer.from(\"init\"));\n\n      mockRecognizer.getResult.mockReturnValue({\n        text: \"Test transcription\",\n      });\n\n      // Mock the audio conversion\n      const mockAudioData = new Float32Array([0.1, 0.2, 0.3]);\n      vi.spyOn(processor as any, \"convertBufferToAudioData\").mockReturnValue(\n        mockAudioData\n      );\n\n      const buffer = Buffer.from(\"fake audio\");\n      const result = await processor.transcribeFromBuffer(buffer);\n\n      expect(result.metadata.speechMetadata?.processingTime).toBeGreaterThan(0);\n      expect(typeof result.metadata.speechMetadata?.processingTime).toBe(\n        \"number\"\n      );\n    });\n\n    it(\"should estimate audio duration\", async () => {\n      mockRecognizer.getResult.mockReturnValue({\n        text: \"Test transcription\",\n      });\n\n      // Mock the audio conversion\n      const mockAudioData = new Float32Array([0.1, 0.2, 0.3]);\n      vi.spyOn(processor as any, \"convertBufferToAudioData\").mockReturnValue(\n        mockAudioData\n      );\n\n      const buffer = Buffer.from(\"fake audio\");\n      const result = await processor.transcribeFromBuffer(buffer, {\n        sampleRate: 16000,\n      });\n\n      expect(result.metadata.speechMetadata?.sampleRate).toBe(16000);\n      expect(result.metadata.speechMetadata?.duration).toBeDefined();\n    });\n\n    it(\"should include confidence when text is detected\", async () => {\n      mockRecognizer.getResult.mockReturnValue({\n        text: \"Confident transcription result\",\n      });\n\n      // Mock the audio conversion\n      const mockAudioData = new Float32Array([0.1, 0.2, 0.3]);\n      vi.spyOn(processor as any, \"convertBufferToAudioData\").mockReturnValue(\n        mockAudioData\n      );\n\n      const buffer = Buffer.from(\"fake audio\");\n      const result = await processor.transcribeFromBuffer(buffer);\n\n      expect(result.metadata.speechMetadata?.confidence).toBe(0.8);\n      expect(result.metadata.speechMetadata?.engine).toBe(\"sherpa-onnx\");\n    });\n  });\n});\n"},"tests/unit/ocr-processor.test.ts":{"tests":[{"id":"96","name":"OCRProcessor extractTextFromBuffer should extract text with high confidence"},{"id":"97","name":"OCRProcessor extractTextFromBuffer should handle low confidence OCR results"},{"id":"98","name":"OCRProcessor extractTextFromBuffer should handle images with no text"},{"id":"99","name":"OCRProcessor extractTextFromBuffer should handle OCR errors gracefully"},{"id":"100","name":"OCRProcessor extractTextFromBuffer should accept custom confidence threshold"},{"id":"101","name":"OCRProcessor extractTextFromFile should read file and perform OCR"},{"id":"102","name":"OCRProcessor extractTextFromFile should handle file read errors"},{"id":"103","name":"OCRProcessor isSupportedImage should validate JPEG images"},{"id":"104","name":"OCRProcessor isSupportedImage should validate PNG images"},{"id":"105","name":"OCRProcessor isSupportedImage should validate BMP images"},{"id":"106","name":"OCRProcessor isSupportedImage should reject unsupported formats"},{"id":"107","name":"OCRProcessor Language detection should detect English text"},{"id":"108","name":"OCRProcessor Language detection should detect Spanish text"},{"id":"109","name":"OCRProcessor Language detection should return unknown for ambiguous text"},{"id":"110","name":"OCRProcessor Worker management should initialize worker on first use"},{"id":"111","name":"OCRProcessor Worker management should terminate worker"},{"id":"112","name":"OCRProcessor Worker management should reuse initialized worker"},{"id":"113","name":"OCRProcessor Supported languages should return list of supported languages"}],"source":"import { describe, it, expect, beforeEach, vi } from \"vitest\";\nimport { OCRProcessor } from \"../../src/lib/processors/ocr-processor.js\";\n\n// Mock Tesseract.js\nvi.mock(\"tesseract.js\", () => ({\n  createWorker: vi.fn(),\n}));\n\n// Mock pdf-parse to prevent initialization issues\nvi.mock(\"pdf-parse\", () => ({\n  default: vi.fn().mockResolvedValue({\n    text: \"mock pdf text\",\n    numpages: 1,\n    info: {},\n  }),\n}));\n\n// Mock fs module\nvi.mock(\"fs\", () => ({\n  default: {\n    readFileSync: vi.fn(),\n  },\n  readFileSync: vi.fn(),\n}));\n\nimport { createWorker } from \"tesseract.js\";\nimport * as fs from \"fs\";\n\ndescribe(\"OCRProcessor\", () => {\n  let processor: OCRProcessor;\n  let mockWorker: any;\n\n  beforeEach(() => {\n    processor = new OCRProcessor();\n    mockWorker = {\n      setParameters: vi.fn(),\n      recognize: vi.fn(),\n      terminate: vi.fn(),\n    };\n    (createWorker as any).mockResolvedValue(mockWorker);\n  });\n\n  describe(\"extractTextFromBuffer\", () => {\n    it(\"should extract text with high confidence\", async () => {\n      mockWorker.recognize.mockResolvedValue({\n        data: {\n          text: \"This is a test document with clear text.\",\n          confidence: 85,\n        },\n      });\n\n      const buffer = Buffer.from(\"fake image data\");\n      const result = await processor.extractTextFromBuffer(buffer);\n\n      expect(result.text).toBe(\"This is a test document with clear text.\");\n      expect(result.metadata.confidence).toBe(85);\n      expect(result.metadata.hasText).toBe(true);\n      expect(result.metadata.wordCount).toBe(8); // \"This is a test document with clear text.\"\n      expect(result.metadata.ocrMetadata?.confidence).toBe(85);\n      expect(result.metadata.ocrMetadata?.language).toBe(\"eng\");\n    });\n\n    it(\"should handle low confidence OCR results\", async () => {\n      mockWorker.recognize.mockResolvedValue({\n        data: {\n          text: \"unclear text\",\n          confidence: 15, // Below default threshold of 30\n        },\n      });\n\n      const buffer = Buffer.from(\"fake image data\");\n      const result = await processor.extractTextFromBuffer(buffer);\n\n      expect(result.text).toContain(\"Low confidence\");\n      expect(result.metadata.confidence).toBe(15);\n      expect(result.metadata.hasText).toBe(false); // Below confidence threshold\n    });\n\n    it(\"should handle images with no text\", async () => {\n      mockWorker.recognize.mockResolvedValue({\n        data: {\n          text: \"\",\n          confidence: 0,\n        },\n      });\n\n      const buffer = Buffer.from(\"fake image data\");\n      const result = await processor.extractTextFromBuffer(buffer);\n\n      expect(result.text).toContain(\"No text detected\");\n      expect(result.metadata.hasText).toBe(false);\n      expect(result.metadata.wordCount).toBe(0);\n    });\n\n    it(\"should handle OCR errors gracefully\", async () => {\n      mockWorker.recognize.mockRejectedValue(\n        new Error(\"OCR processing failed\")\n      );\n\n      const buffer = Buffer.from(\"fake image data\");\n      const result = await processor.extractTextFromBuffer(buffer);\n\n      expect(result.text).toContain(\"OCR Error\");\n      expect(result.metadata.confidence).toBe(0);\n      expect(result.metadata.hasText).toBe(false);\n    });\n\n    it(\"should accept custom confidence threshold\", async () => {\n      mockWorker.recognize.mockResolvedValue({\n        data: {\n          text: \"some text\",\n          confidence: 25, // Above custom threshold of 20\n        },\n      });\n\n      const buffer = Buffer.from(\"fake image data\");\n      const result = await processor.extractTextFromBuffer(buffer, {\n        confidence: 20,\n      });\n\n      expect(result.metadata.hasText).toBe(true);\n    });\n  });\n\n  describe(\"extractTextFromFile\", () => {\n    it(\"should read file and perform OCR\", async () => {\n      // Mock fs.readFileSync\n      (fs.readFileSync as any).mockReturnValue(Buffer.from(\"image data\"));\n\n      mockWorker.recognize.mockResolvedValue({\n        data: {\n          text: \"File OCR text\",\n          confidence: 90,\n        },\n      });\n\n      const result = await processor.extractTextFromFile(\"/test/image.jpg\");\n\n      expect(result.text).toBe(\"File OCR text\");\n      expect(result.metadata.confidence).toBe(90);\n    });\n\n    it(\"should handle file read errors\", async () => {\n      (fs.readFileSync as any).mockImplementation(() => {\n        throw new Error(\"File not found\");\n      });\n\n      const result = await processor.extractTextFromFile(\"/test/missing.jpg\");\n\n      expect(result.text).toContain(\"Failed to read file\");\n      expect(result.metadata.hasText).toBe(false);\n    });\n  });\n\n  describe(\"isSupportedImage\", () => {\n    it(\"should validate JPEG images\", () => {\n      const jpegBuffer = Buffer.from([0xff, 0xd8, 0xff, 0xe0]);\n      expect(processor.isSupportedImage(jpegBuffer)).toBe(true);\n    });\n\n    it(\"should validate PNG images\", () => {\n      const pngBuffer = Buffer.from([0x89, 0x50, 0x4e, 0x47]);\n      expect(processor.isSupportedImage(pngBuffer)).toBe(true);\n    });\n\n    it(\"should validate BMP images\", () => {\n      const bmpBuffer = Buffer.from([0x42, 0x4d]);\n      expect(processor.isSupportedImage(bmpBuffer)).toBe(true);\n    });\n\n    it(\"should reject unsupported formats\", () => {\n      const textBuffer = Buffer.from(\"not an image\");\n      expect(processor.isSupportedImage(textBuffer)).toBe(false);\n    });\n  });\n\n  describe(\"Language detection\", () => {\n    it(\"should detect English text\", async () => {\n      mockWorker.recognize.mockResolvedValue({\n        data: {\n          text: \"The quick brown fox jumps over the lazy dog. This is a test.\",\n          confidence: 80,\n        },\n      });\n\n      const buffer = Buffer.from(\"fake image\");\n      const result = await processor.extractTextFromBuffer(buffer);\n\n      expect(result.metadata.language).toBe(\"en\");\n    });\n\n    it(\"should detect Spanish text\", async () => {\n      mockWorker.recognize.mockResolvedValue({\n        data: {\n          text: \"El rápido zorro marrón salta sobre el perro perezoso. Esto es una prueba.\",\n          confidence: 80,\n        },\n      });\n\n      const buffer = Buffer.from(\"fake image\");\n      const result = await processor.extractTextFromBuffer(buffer);\n\n      expect(result.metadata.language).toBe(\"es\");\n    });\n\n    it(\"should return unknown for ambiguous text\", async () => {\n      mockWorker.recognize.mockResolvedValue({\n        data: {\n          text: \"xyz abc 123\", // No common words\n          confidence: 80,\n        },\n      });\n\n      const buffer = Buffer.from(\"fake image\");\n      const result = await processor.extractTextFromBuffer(buffer);\n\n      expect(result.metadata.language).toBe(\"unknown\");\n    });\n  });\n\n  describe(\"Worker management\", () => {\n    it(\"should initialize worker on first use\", async () => {\n      mockWorker.recognize.mockResolvedValue({\n        data: { text: \"test\", confidence: 80 },\n      });\n\n      await processor.extractTextFromBuffer(Buffer.from(\"test\"));\n\n      expect(createWorker).toHaveBeenCalledWith(\"eng\");\n    });\n\n    it(\"should terminate worker\", async () => {\n      // Initialize worker first\n      await processor.extractTextFromBuffer(Buffer.from(\"test\"));\n      // Reset mock call count\n      mockWorker.terminate.mockClear();\n\n      await processor.terminate();\n\n      expect(mockWorker.terminate).toHaveBeenCalled();\n    });\n\n    it(\"should reuse initialized worker\", async () => {\n      // Clear previous calls\n      (createWorker as any).mockClear();\n\n      mockWorker.recognize.mockResolvedValue({\n        data: { text: \"test\", confidence: 80 },\n      });\n\n      await processor.extractTextFromBuffer(Buffer.from(\"test1\"));\n      await processor.extractTextFromBuffer(Buffer.from(\"test2\"));\n\n      expect(createWorker).toHaveBeenCalledTimes(1);\n      expect(mockWorker.recognize).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe(\"Supported languages\", () => {\n    it(\"should return list of supported languages\", () => {\n      const languages = processor.getSupportedLanguages();\n\n      expect(languages).toContain(\"eng\");\n      expect(languages).toContain(\"spa\");\n      expect(languages).toContain(\"fra\");\n      expect(languages.length).toBeGreaterThan(5);\n    });\n  });\n});\n"},"tests/unit/office-processor.test.ts":{"tests":[{"id":"114","name":"OfficeProcessor extractTextFromBuffer - DOCX should extract text from a valid DOCX buffer"},{"id":"115","name":"OfficeProcessor extractTextFromBuffer - DOCX should handle DOCX files with no text"},{"id":"116","name":"OfficeProcessor extractTextFromBuffer - DOCX should handle DOCX processing errors"},{"id":"117","name":"OfficeProcessor extractTextFromBuffer - XLSX should extract data from a valid XLSX buffer"},{"id":"118","name":"OfficeProcessor extractTextFromBuffer - XLSX should handle XLSX files with no data"},{"id":"119","name":"OfficeProcessor extractTextFromBuffer - XLSX should handle XLSX processing errors"},{"id":"120","name":"OfficeProcessor extractTextFromBuffer - PPTX should handle PPTX files (placeholder implementation)"},{"id":"121","name":"OfficeProcessor extractTextFromFile should read file and process Office document"},{"id":"122","name":"OfficeProcessor extractTextFromFile should handle file read errors"},{"id":"123","name":"OfficeProcessor isSupportedOfficeDocument should validate DOCX files"},{"id":"124","name":"OfficeProcessor isSupportedOfficeDocument should validate XLSX files"},{"id":"125","name":"OfficeProcessor isSupportedOfficeDocument should validate PPTX files"},{"id":"126","name":"OfficeProcessor isSupportedOfficeDocument should reject non-Office files"},{"id":"127","name":"OfficeProcessor isSupportedOfficeDocument should reject non-ZIP files"},{"id":"128","name":"OfficeProcessor Language detection should detect English text in Office documents"},{"id":"129","name":"OfficeProcessor Language detection should detect Spanish text in Office documents"},{"id":"130","name":"OfficeProcessor Language detection should return unknown for ambiguous text"},{"id":"131","name":"OfficeProcessor Error handling should handle unsupported Office document types"},{"id":"132","name":"OfficeProcessor Error handling should provide meaningful error messages"}],"source":"import { describe, it, expect, beforeEach, vi } from \"vitest\";\nimport { OfficeProcessor } from \"../../src/lib/processors/office-processor.js\";\nimport { ContentType } from \"../../src/lib/multi-modal.js\";\n\n// Mock mammoth and xlsx\nvi.mock(\"mammoth\", () => ({\n  extractRawText: vi.fn(),\n}));\n\nvi.mock(\"xlsx\", () => ({\n  read: vi.fn(),\n  utils: {\n    sheet_to_csv: vi.fn(),\n    decode_range: vi.fn(),\n    encode_cell: vi.fn(),\n  },\n}));\n\n// Mock pdf-parse to prevent initialization issues\nvi.mock(\"pdf-parse\", () => ({\n  default: vi.fn().mockResolvedValue({\n    text: \"mock pdf text\",\n    numpages: 1,\n    info: {},\n  }),\n}));\n\n// Mock fs module\nvi.mock(\"fs\", () => ({\n  default: {\n    readFileSync: vi.fn(),\n  },\n  readFileSync: vi.fn(),\n}));\n\nimport * as mammoth from \"mammoth\";\nimport * as XLSX from \"xlsx\";\nimport * as fs from \"fs\";\n\ndescribe(\"OfficeProcessor\", () => {\n  let processor: OfficeProcessor;\n  let mockMammoth: any;\n  let mockXLSX: any;\n\n  beforeEach(() => {\n    processor = new OfficeProcessor();\n    mockMammoth = vi.mocked(mammoth.extractRawText);\n    mockXLSX = {\n      read: vi.mocked(XLSX.read),\n      utils: {\n        sheet_to_csv: vi.mocked(XLSX.utils.sheet_to_csv),\n        decode_range: vi.mocked(XLSX.utils.decode_range),\n        encode_cell: vi.mocked(XLSX.utils.encode_cell),\n      },\n    };\n  });\n\n  describe(\"extractTextFromBuffer - DOCX\", () => {\n    it(\"should extract text from a valid DOCX buffer\", async () => {\n      mockMammoth.mockResolvedValue({\n        value: \"This is the content of a Word document.\",\n      });\n\n      const buffer = Buffer.from(\"fake docx content\");\n      const result = await processor.extractTextFromBuffer(\n        buffer,\n        ContentType.OFFICE_DOC\n      );\n\n      expect(result.text).toBe(\"This is the content of a Word document.\");\n      expect(result.metadata.type).toBe(ContentType.OFFICE_DOC);\n      expect(result.metadata.hasText).toBe(true);\n      expect(result.metadata.wordCount).toBe(8); // \"This is the content of a Word document.\"\n      expect(result.metadata.language).toBe(\"en\");\n    });\n\n    it(\"should handle DOCX files with no text\", async () => {\n      mockMammoth.mockResolvedValue({\n        value: \"\",\n      });\n\n      const buffer = Buffer.from(\"fake docx content\");\n      const result = await processor.extractTextFromBuffer(\n        buffer,\n        ContentType.OFFICE_DOC\n      );\n\n      expect(result.text).toBe(\"Word Document: No readable text content found\");\n      expect(result.metadata.hasText).toBe(false);\n      expect(result.metadata.wordCount).toBe(0);\n    });\n\n    it(\"should handle DOCX processing errors\", async () => {\n      mockMammoth.mockRejectedValue(new Error(\"Invalid DOCX format\"));\n\n      const buffer = Buffer.from(\"fake docx content\");\n      const result = await processor.extractTextFromBuffer(\n        buffer,\n        ContentType.OFFICE_DOC\n      );\n\n      expect(result.text).toContain(\"Word Document Error\");\n      expect(result.metadata.hasText).toBe(false);\n    });\n  });\n\n  describe(\"extractTextFromBuffer - XLSX\", () => {\n    it(\"should extract data from a valid XLSX buffer\", async () => {\n      const mockWorkbook = {\n        SheetNames: [\"Sheet1\", \"Sheet2\"],\n        Sheets: {\n          Sheet1: {\n            A1: { v: \"Name\" },\n            B1: { v: \"Age\" },\n            A2: { v: \"John\" },\n            B2: { v: 25 },\n          },\n          Sheet2: {\n            A1: { v: \"Product\" },\n            B1: { v: \"Price\" },\n          },\n        },\n      };\n\n      mockXLSX.read.mockReturnValue(mockWorkbook);\n      mockXLSX.utils.sheet_to_csv.mockReturnValue(\"Name,Age\\nJohn,25\");\n      mockXLSX.utils.decode_range.mockReturnValue({\n        s: { r: 0, c: 0 },\n        e: { r: 1, c: 1 },\n      });\n\n      const buffer = Buffer.from(\"fake xlsx content\");\n      const result = await processor.extractTextFromBuffer(\n        buffer,\n        ContentType.OFFICE_SHEET\n      );\n\n      expect(result.text).toContain(\"=== Sheet1 ===\");\n      expect(result.text).toContain(\"Name,Age\");\n      expect(result.metadata.type).toBe(ContentType.OFFICE_SHEET);\n      expect(result.metadata.officeMetadata?.sheetCount).toBe(2);\n      expect(result.metadata.hasText).toBe(true);\n    });\n\n    it(\"should handle XLSX files with no data\", async () => {\n      const mockWorkbook = {\n        SheetNames: [\"Sheet1\"],\n        Sheets: {\n          Sheet1: {},\n        },\n      };\n\n      mockXLSX.read.mockReturnValue(mockWorkbook);\n      mockXLSX.utils.sheet_to_csv.mockReturnValue(\"\");\n      mockXLSX.utils.decode_range.mockReturnValue({\n        s: { r: 0, c: 0 },\n        e: { r: 0, c: 0 },\n      });\n\n      const buffer = Buffer.from(\"fake xlsx content\");\n      const result = await processor.extractTextFromBuffer(\n        buffer,\n        ContentType.OFFICE_SHEET\n      );\n\n      expect(result.text).toContain(\"Excel Spreadsheet\");\n      expect(result.metadata.hasText).toBe(false);\n    });\n\n    it(\"should handle XLSX processing errors\", async () => {\n      mockXLSX.read.mockImplementation(() => {\n        throw new Error(\"Invalid XLSX format\");\n      });\n\n      const buffer = Buffer.from(\"fake xlsx content\");\n      const result = await processor.extractTextFromBuffer(\n        buffer,\n        ContentType.OFFICE_SHEET\n      );\n\n      expect(result.text).toContain(\"Excel Document Error\");\n      expect(result.metadata.hasText).toBe(false);\n    });\n  });\n\n  describe(\"extractTextFromBuffer - PPTX\", () => {\n    it(\"should handle PPTX files (placeholder implementation)\", async () => {\n      const buffer = Buffer.from(\"fake pptx content\");\n      const result = await processor.extractTextFromBuffer(\n        buffer,\n        ContentType.OFFICE_PRESENTATION\n      );\n\n      expect(result.text).toContain(\n        \"Text extraction not yet implemented for PPTX files\"\n      );\n      expect(result.metadata.type).toBe(ContentType.OFFICE_PRESENTATION);\n      expect(result.metadata.hasText).toBe(false);\n    });\n  });\n\n  describe(\"extractTextFromFile\", () => {\n    it(\"should read file and process Office document\", async () => {\n      // Mock fs.readFileSync\n      (fs.readFileSync as any).mockReturnValue(Buffer.from(\"file content\"));\n\n      mockMammoth.mockResolvedValue({\n        value: \"File content extracted\",\n      });\n\n      const result = await processor.extractTextFromFile(\n        \"/test/document.docx\",\n        ContentType.OFFICE_DOC\n      );\n\n      expect(result.text).toBe(\"File content extracted\");\n      expect(result.metadata.type).toBe(ContentType.OFFICE_DOC);\n    });\n\n    it(\"should handle file read errors\", async () => {\n      (fs.readFileSync as any).mockImplementation(() => {\n        throw new Error(\"File not found\");\n      });\n\n      const result = await processor.extractTextFromFile(\n        \"/test/missing.docx\",\n        ContentType.OFFICE_DOC\n      );\n\n      expect(result.text).toContain(\"Failed to read file\");\n      expect(result.metadata.hasText).toBe(false);\n    });\n  });\n\n  describe(\"isSupportedOfficeDocument\", () => {\n    it(\"should validate DOCX files\", () => {\n      const docxBuffer = Buffer.from(\"PK\\x03\\x04fake docx content with word/\");\n      const result = processor.isSupportedOfficeDocument(docxBuffer);\n\n      expect(result.supported).toBe(true);\n      expect(result.type).toBe(ContentType.OFFICE_DOC);\n    });\n\n    it(\"should validate XLSX files\", () => {\n      const xlsxBuffer = Buffer.from(\"PK\\x03\\x04fake xlsx content with xl/\");\n      const result = processor.isSupportedOfficeDocument(xlsxBuffer);\n\n      expect(result.supported).toBe(true);\n      expect(result.type).toBe(ContentType.OFFICE_SHEET);\n    });\n\n    it(\"should validate PPTX files\", () => {\n      const pptxBuffer = Buffer.from(\"PK\\x03\\x04fake pptx content with ppt/\");\n      const result = processor.isSupportedOfficeDocument(pptxBuffer);\n\n      expect(result.supported).toBe(true);\n      expect(result.type).toBe(ContentType.OFFICE_PRESENTATION);\n    });\n\n    it(\"should reject non-Office files\", () => {\n      const textBuffer = Buffer.from(\"not an office document\");\n      const result = processor.isSupportedOfficeDocument(textBuffer);\n\n      expect(result.supported).toBe(false);\n      expect(result.type).toBeUndefined();\n    });\n\n    it(\"should reject non-ZIP files\", () => {\n      const nonZipBuffer = Buffer.from(\"not a zip file\");\n      const result = processor.isSupportedOfficeDocument(nonZipBuffer);\n\n      expect(result.supported).toBe(false);\n    });\n  });\n\n  describe(\"Language detection\", () => {\n    it(\"should detect English text in Office documents\", async () => {\n      mockMammoth.mockResolvedValue({\n        value: \"This document contains English text for testing purposes.\",\n      });\n\n      const buffer = Buffer.from(\"fake docx content\");\n      const result = await processor.extractTextFromBuffer(\n        buffer,\n        ContentType.OFFICE_DOC\n      );\n\n      expect(result.metadata.language).toBe(\"en\");\n    });\n\n    it(\"should detect Spanish text in Office documents\", async () => {\n      mockMammoth.mockResolvedValue({\n        value: \"Este documento contiene texto en español para pruebas.\",\n      });\n\n      const buffer = Buffer.from(\"fake docx content\");\n      const result = await processor.extractTextFromBuffer(\n        buffer,\n        ContentType.OFFICE_DOC\n      );\n\n      expect(result.metadata.language).toBe(\"es\");\n    });\n\n    it(\"should return unknown for ambiguous text\", async () => {\n      mockMammoth.mockResolvedValue({\n        value: \"xyz abc 123\", // No common words\n      });\n\n      const buffer = Buffer.from(\"fake docx content\");\n      const result = await processor.extractTextFromBuffer(\n        buffer,\n        ContentType.OFFICE_DOC\n      );\n\n      expect(result.metadata.language).toBe(\"unknown\");\n    });\n  });\n\n  describe(\"Error handling\", () => {\n    it(\"should handle unsupported Office document types\", async () => {\n      const buffer = Buffer.from(\"fake content\");\n\n      const result = await processor.extractTextFromBuffer(\n        buffer,\n        ContentType.UNKNOWN\n      );\n\n      expect(result.text).toContain(\"Unsupported Office document type\");\n      expect(result.metadata.hasText).toBe(false);\n    });\n\n    it(\"should provide meaningful error messages\", async () => {\n      mockMammoth.mockRejectedValue(new Error(\"Corrupted DOCX file\"));\n\n      const buffer = Buffer.from(\"fake docx content\");\n      const result = await processor.extractTextFromBuffer(\n        buffer,\n        ContentType.OFFICE_DOC\n      );\n\n      expect(result.text).toContain(\"Corrupted DOCX file\");\n      expect(result.metadata.hasText).toBe(false);\n    });\n  });\n});\n"},"tests/unit/utils.test.ts":{"tests":[{"id":"133","name":"normalize should normalize basic text"},{"id":"134","name":"createContentHash should create consistent hashes for same content"},{"id":"135","name":"normalizeVector should normalize a vector to unit length"},{"id":"136","name":"cosineSimilarity should calculate similarity between identical vectors"},{"id":"137","name":"estimateTokens should estimate tokens based on word count"},{"id":"138","name":"estimateTokens should handle empty text"},{"id":"139","name":"estimateTokens should handle single word"},{"id":"140","name":"extractWikilinks should extract wikilinks from text"},{"id":"141","name":"extractWikilinks should remove duplicates"},{"id":"142","name":"extractWikilinks should handle text without wikilinks"},{"id":"143","name":"extractWikilinks should handle empty text"},{"id":"144","name":"extractHashtags should extract hashtags from text"},{"id":"145","name":"extractHashtags should remove duplicates"},{"id":"146","name":"extractHashtags should handle text without hashtags"},{"id":"147","name":"extractHashtags should handle complex hashtags"},{"id":"148","name":"extractHashtags should handle empty text"},{"id":"149","name":"cleanMarkdown should remove frontmatter"},{"id":"150","name":"cleanMarkdown should remove wikilinks but keep text"},{"id":"151","name":"cleanMarkdown should remove markdown links but keep text"},{"id":"152","name":"cleanMarkdown should remove markdown formatting"},{"id":"153","name":"cleanMarkdown should remove headers"},{"id":"154","name":"cleanMarkdown should clean up extra whitespace"},{"id":"155","name":"generateBreadcrumbs should generate breadcrumbs from file path"},{"id":"156","name":"generateBreadcrumbs should handle root level files"},{"id":"157","name":"generateBreadcrumbs should handle deeply nested files"},{"id":"158","name":"determineContentType should detect MOC content type"},{"id":"159","name":"determineContentType should detect article content type"},{"id":"160","name":"determineContentType should detect conversation content type"},{"id":"161","name":"determineContentType should detect book-note content type"},{"id":"162","name":"determineContentType should detect template content type"},{"id":"163","name":"determineContentType should use frontmatter type if available"},{"id":"164","name":"determineContentType should default to note type"}],"source":"import { describe, it, expect } from \"vitest\";\nimport {\n  normalize,\n  createContentHash,\n  normalizeVector,\n  cosineSimilarity,\n  estimateTokens,\n  extractWikilinks,\n  extractHashtags,\n  cleanMarkdown,\n  generateBreadcrumbs,\n  determineContentType,\n} from \"../../src/lib/utils.js\";\n\ndescribe(\"normalize\", () => {\n  it(\"should normalize basic text\", () => {\n    const input = \"  Hello   World  \";\n    const expected = \"Hello World\";\n    expect(normalize(input)).toBe(expected);\n  });\n});\n\ndescribe(\"createContentHash\", () => {\n  it(\"should create consistent hashes for same content\", () => {\n    const content1 = \"Hello World\";\n    const content2 = \"Hello World\";\n    expect(createContentHash(content1)).toBe(createContentHash(content2));\n  });\n});\n\ndescribe(\"normalizeVector\", () => {\n  it(\"should normalize a vector to unit length\", () => {\n    const vector = [3, 4]; // Should normalize to [0.6, 0.8]\n    const normalized = normalizeVector(vector);\n    const magnitude = Math.sqrt(normalized.reduce((sum, x) => sum + x * x, 0));\n    expect(magnitude).toBeCloseTo(1.0, 10);\n  });\n});\n\ndescribe(\"cosineSimilarity\", () => {\n  it(\"should calculate similarity between identical vectors\", () => {\n    const vec = [1, 2, 3];\n    expect(cosineSimilarity(vec, vec)).toBeCloseTo(1.0, 10);\n  });\n});\n\ndescribe(\"estimateTokens\", () => {\n  it(\"should estimate tokens based on word count\", () => {\n    const text = \"This is a test sentence\";\n    const words = text.split(/\\s+/).length; // 5 words\n    const expectedTokens = Math.ceil(words / 0.75); // ceil(5 / 0.75) = 7\n    expect(estimateTokens(text)).toBe(expectedTokens);\n  });\n\n  it(\"should handle empty text\", () => {\n    expect(estimateTokens(\"\")).toBe(2); // Empty string splits to [\"\"] which has length 1\n  });\n\n  it(\"should handle single word\", () => {\n    expect(estimateTokens(\"word\")).toBe(Math.ceil(1 / 0.75));\n  });\n});\n\ndescribe(\"extractWikilinks\", () => {\n  it(\"should extract wikilinks from text\", () => {\n    const text = \"This is a [[link]] and another [[link2]]\";\n    expect(extractWikilinks(text)).toEqual([\"link\", \"link2\"]);\n  });\n\n  it(\"should remove duplicates\", () => {\n    const text = \"This is a [[link]] and another [[link]]\";\n    expect(extractWikilinks(text)).toEqual([\"link\"]);\n  });\n\n  it(\"should handle text without wikilinks\", () => {\n    const text = \"This is regular text\";\n    expect(extractWikilinks(text)).toEqual([]);\n  });\n\n  it(\"should handle empty text\", () => {\n    expect(extractWikilinks(\"\")).toEqual([]);\n  });\n});\n\ndescribe(\"extractHashtags\", () => {\n  it(\"should extract hashtags from text\", () => {\n    const text = \"This is a #tag and another #tag2\";\n    expect(extractHashtags(text)).toEqual([\"tag\", \"tag2\"]);\n  });\n\n  it(\"should remove duplicates\", () => {\n    const text = \"This is a #tag and another #tag\";\n    expect(extractHashtags(text)).toEqual([\"tag\"]);\n  });\n\n  it(\"should handle text without hashtags\", () => {\n    const text = \"This is regular text\";\n    expect(extractHashtags(text)).toEqual([]);\n  });\n\n  it(\"should handle complex hashtags\", () => {\n    const text = \"#tag_with_underscores #tag-with-dashes #tag123\";\n    expect(extractHashtags(text)).toEqual([\"tag_with_underscores\", \"tag-with-dashes\", \"tag123\"]);\n  });\n\n  it(\"should handle empty text\", () => {\n    expect(extractHashtags(\"\")).toEqual([]);\n  });\n});\n\ndescribe(\"cleanMarkdown\", () => {\n  it(\"should remove frontmatter\", () => {\n    const text = `---\ntitle: Test\n---\nThis is content`;\n    expect(cleanMarkdown(text)).toBe(\"This is content\");\n  });\n\n  it(\"should remove wikilinks but keep text\", () => {\n    const text = \"This is a [[link]] in text\";\n    expect(cleanMarkdown(text)).toBe(\"This is a link in text\");\n  });\n\n  it(\"should remove markdown links but keep text\", () => {\n    const text = \"This is a [link](url) in text\";\n    expect(cleanMarkdown(text)).toBe(\"This is a link in text\");\n  });\n\n  it(\"should remove markdown formatting\", () => {\n    const text = \"*bold* _italic_ `code` ~strikethrough~\";\n    expect(cleanMarkdown(text)).toBe(\"bold italic code strikethrough\");\n  });\n\n  it(\"should remove headers\", () => {\n    const text = \"# Header\\n## Subheader\\nContent\";\n    expect(cleanMarkdown(text)).toBe(\"Header\\nSubheader\\nContent\");\n  });\n\n  it(\"should clean up extra whitespace\", () => {\n    const text = \"Line 1\\n\\n\\nLine 2\";\n    expect(cleanMarkdown(text)).toBe(\"Line 1\\n\\nLine 2\");\n  });\n});\n\ndescribe(\"generateBreadcrumbs\", () => {\n  it(\"should generate breadcrumbs from file path\", () => {\n    const result = generateBreadcrumbs(\"/vault/folder/file.md\", \"/vault\");\n    expect(result).toEqual([\"folder\"]);\n  });\n\n  it(\"should handle root level files\", () => {\n    const result = generateBreadcrumbs(\"/vault/file.md\", \"/vault\");\n    expect(result).toEqual([\"Root\"]);\n  });\n\n  it(\"should handle deeply nested files\", () => {\n    const result = generateBreadcrumbs(\"/vault/a/b/c/file.md\", \"/vault\");\n    expect(result).toEqual([\"a\", \"b\", \"c\"]);\n  });\n});\n\ndescribe(\"determineContentType\", () => {\n  it(\"should detect MOC content type\", () => {\n    const result = determineContentType(\"/vault/MOCs/file.md\", \"/vault\", {});\n    expect(result).toBe(\"moc\");\n  });\n\n  it(\"should detect article content type\", () => {\n    const result = determineContentType(\"/vault/Articles/file.md\", \"/vault\", {});\n    expect(result).toBe(\"article\");\n  });\n\n  it(\"should detect conversation content type\", () => {\n    const result = determineContentType(\"/vault/AIChats/file.md\", \"/vault\", {});\n    expect(result).toBe(\"conversation\");\n  });\n\n  it(\"should detect book-note content type\", () => {\n    const result = determineContentType(\"/vault/Books/file.md\", \"/vault\", {});\n    expect(result).toBe(\"book-note\");\n  });\n\n  it(\"should detect template content type\", () => {\n    const result = determineContentType(\"/vault/templates/file.md\", \"/vault\", {});\n    expect(result).toBe(\"template\");\n  });\n\n  it(\"should use frontmatter type if available\", () => {\n    const result = determineContentType(\"/vault/file.md\", \"/vault\", { type: \"custom\" });\n    expect(result).toBe(\"custom\");\n  });\n\n  it(\"should default to note type\", () => {\n    const result = determineContentType(\"/vault/file.md\", \"/vault\", {});\n    expect(result).toBe(\"note\");\n  });\n});\n"}},"projectRoot":"/Users/drosebrook/Desktop/Projects/obsidian-rag","config":{"$schema":"./node_modules/@stryker-mutator/core/schema/stryker-schema.json","testRunner":"vitest","reporters":["html","clear-text","progress","json"],"coverageAnalysis":"perTest","mutate":["src/lib/**/*.ts","!src/lib/**/*.d.ts","!src/lib/**/index.ts","!src/lib/obsidian-ingest.ts","!src/lib/obsidian-search.ts","!src/lib/processors/pdf-processor.ts","!src/lib/multi-modal.ts","!src/lib/multi-modal-ingest.ts"],"thresholds":{"high":80,"low":30,"break":null},"vitest":{"configFile":"vitest.config.ts"},"maxConcurrentTestRunners":2,"timeoutMS":60000,"timeoutFactor":3,"tempDirName":"stryker-tmp","allowConsoleColors":true,"checkers":[],"checkerNodeArgs":[],"commandRunner":{"command":"npm test"},"clearTextReporter":{"allowColor":true,"allowEmojis":false,"logTests":true,"maxTestsToLog":3,"reportTests":true,"reportMutants":true,"reportScoreTable":true,"skipFull":false},"dashboard":{"baseUrl":"https://dashboard.stryker-mutator.io/api/reports","reportType":"full"},"dryRunOnly":false,"eventReporter":{"baseDir":"reports/mutation/events"},"ignorePatterns":[],"ignoreStatic":false,"incremental":false,"incrementalFile":"reports/stryker-incremental.json","force":false,"fileLogLevel":"off","inPlace":false,"logLevel":"info","maxTestRunnerReuse":0,"mutator":{"plugins":null,"excludedMutations":[]},"plugins":["@stryker-mutator/*"],"appendPlugins":[],"htmlReporter":{"fileName":"reports/mutation/mutation.html"},"jsonReporter":{"fileName":"reports/mutation/mutation.json"},"disableTypeChecks":true,"symlinkNodeModules":true,"cleanTempDir":true,"testRunnerNodeArgs":[],"dryRunTimeoutMinutes":5,"tsconfigFile":"tsconfig.json","warnings":true,"disableBail":false,"allowEmpty":false,"ignorers":[],"concurrency":2,"typescriptChecker":{"prioritizePerformanceOverAccuracy":true}},"framework":{"name":"StrykerJS","version":"8.7.1","branding":{"homepageUrl":"https://stryker-mutator.io","imageUrl":"data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"},"dependencies":{"@stryker-mutator/typescript-checker":"8.7.1","typescript":"5.9.2"}}}