openapi: 3.0.3
info:
  title: Obsidian RAG API
  description: Semantic search and knowledge graph API for Obsidian vaults
  version: 1.0.0
  contact:
    name: Obsidian RAG Team
  license:
    name: MIT

servers:
  - url: http://localhost:3001
    description: Development server
  - url: https://api.obsidian-rag.com
    description: Production server

paths:
  /health:
    get:
      summary: Health check endpoint
      operationId: getHealth
      tags: [Health]
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /search:
    post:
      summary: Perform semantic search across Obsidian vault
      operationId: searchKnowledge
      tags: [Search]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: Search results returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'
        '400':
          description: Invalid search request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /documents/{documentId}:
    get:
      summary: Get detailed information about a specific document
      operationId: getDocument
      tags: [Documents]
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
          description: Document identifier (relative path from vault root)
      responses:
        '200':
          description: Document details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResponse'
        '404':
          description: Document not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /documents/{documentId}/chunks:
    get:
      summary: Get all chunks for a specific document
      operationId: getDocumentChunks
      tags: [Documents]
      parameters:
        - name: documentId
          in: path
          required: true
          schema:
            type: string
          description: Document identifier
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Document chunks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentChunksResponse'

  /ingest:
    post:
      summary: Ingest or re-ingest Obsidian vault content
      operationId: ingestVault
      tags: [Ingestion]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngestionRequest'
      responses:
        '202':
          description: Ingestion started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IngestionResponse'
        '400':
          description: Invalid ingestion request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /analytics:
    get:
      summary: Get vault analytics and insights
      operationId: getAnalytics
      tags: [Analytics]
      responses:
        '200':
          description: Vault analytics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsResponse'

  /stats:
    get:
      summary: Get database and processing statistics
      operationId: getStats
      tags: [Analytics]
      responses:
        '200':
          description: Database statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsResponse'

components:
  schemas:
    # Request Schemas
    SearchRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          minLength: 1
          maxLength: 500
          description: Search query text
        options:
          $ref: '#/components/schemas/SearchOptions'
        pagination:
          type: object
          properties:
            limit:
              type: integer
              minimum: 1
              maximum: 50
              default: 20
            offset:
              type: integer
              minimum: 0
              default: 0

    SearchOptions:
      type: object
      properties:
        limit:
          type: integer
          minimum: 1
          maximum: 50
          default: 20
        minSimilarity:
          type: number
          minimum: 0
          maximum: 1
          default: 0.0
        contentTypes:
          type: array
          items:
            type: string
            enum: [note, moc, article, conversation, template, book-note]
        tags:
          type: array
          items:
            type: string
        folders:
          type: array
          items:
            type: string
        hasWikilinks:
          type: boolean
        dateRange:
          type: object
          properties:
            start:
              type: string
              format: date-time
            end:
              type: string
              format: date-time
        searchMode:
          type: string
          enum: [semantic, hybrid, graph, comprehensive]
          default: comprehensive
        includeRelated:
          type: boolean
          default: true
        maxRelated:
          type: integer
          minimum: 1
          maximum: 10
          default: 3
        graphAugmentation:
          type: boolean
          default: false
        maxGraphHops:
          type: integer
          minimum: 1
          maximum: 5
          default: 2

    IngestionRequest:
      type: object
      required:
        - vaultPath
      properties:
        vaultPath:
          type: string
          description: Absolute path to Obsidian vault root
        config:
          $ref: '#/components/schemas/IngestionConfig'
        options:
          type: object
          properties:
            force:
              type: boolean
              default: false
              description: Reprocess all files
            incremental:
              type: boolean
              default: true
              description: Only process changed files
            validateOnly:
              type: boolean
              default: false
              description: Just validate without storing

    IngestionConfig:
      type: object
      properties:
        includePatterns:
          type: array
          items:
            type: string
          default: ["**/*.md"]
        excludePatterns:
          type: array
          items:
            type: string
          default: ["**/.obsidian/**", "**/node_modules/**", "**/.git/**"]
        chunking:
          type: object
          properties:
            maxChunkSize:
              type: integer
              minimum: 100
              maximum: 2000
              default: 800
            chunkOverlap:
              type: integer
              minimum: 0
              maximum: 500
              default: 100
            preserveStructure:
              type: boolean
              default: true
            includeContext:
              type: boolean
              default: true
            cleanContent:
              type: boolean
              default: true

    # Response Schemas
    SearchResponse:
      type: object
      required:
        - query
        - results
        - totalFound
        - performance
      properties:
        query:
          type: string
        results:
          type: array
          items:
            $ref: '#/components/schemas/ObsidianSearchResult'
        totalFound:
          type: integer
          minimum: 0
        pagination:
          type: object
          properties:
            limit:
              type: integer
            offset:
              type: integer
            hasMore:
              type: boolean
        facets:
          type: object
          properties:
            contentTypes:
              type: array
              items:
                type: object
                required: [type, count]
                properties:
                  type:
                    type: string
                  count:
                    type: integer
                    minimum: 0
            tags:
              type: array
              items:
                type: object
                required: [tag, count]
                properties:
                  tag:
                    type: string
                  count:
                    type: integer
                    minimum: 0
            folders:
              type: array
              items:
                type: object
                required: [folder, count]
                properties:
                  folder:
                    type: string
                  count:
                    type: integer
                    minimum: 0
            temporal:
              type: array
              items:
                type: object
                required: [period, count]
                properties:
                  period:
                    type: string
                  count:
                    type: integer
                    minimum: 0
        performance:
          type: object
          required: [totalTime, searchTime, processingTime]
          properties:
            totalTime:
              type: number
              minimum: 0
            searchTime:
              type: number
              minimum: 0
            processingTime:
              type: number
              minimum: 0
        graphInsights:
          type: object
          properties:
            queryConcepts:
              type: array
              items:
                type: string
            relatedConcepts:
              type: array
              items:
                type: string
            knowledgeClusters:
              type: array
              items:
                type: object
                required: [name, documents, centrality]
                properties:
                  name:
                    type: string
                  documents:
                    type: array
                    items:
                      type: string
                  centrality:
                    type: number
                    minimum: 0
                    maximum: 1

    ObsidianSearchResult:
      type: object
      required:
        - id
        - text
        - meta
        - cosineSimilarity
        - rank
      properties:
        id:
          type: string
        text:
          type: string
        meta:
          type: object
          required: [section, contentType]
          properties:
            section:
              type: string
            contentType:
              type: string
            breadcrumbs:
              type: array
              items:
                type: string
        cosineSimilarity:
          type: number
          minimum: 0
          maximum: 1
        rank:
          type: integer
          minimum: 1
        obsidianMeta:
          type: object
          properties:
            fileName:
              type: string
            filePath:
              type: string
            tags:
              type: array
              items:
                type: string
            wikilinks:
              type: array
              items:
                type: string
            frontmatter:
              type: object
            relatedFiles:
              type: array
              items:
                type: string
            backlinks:
              type: array
              items:
                type: string
        highlights:
          type: array
          items:
            type: string
        relatedChunks:
          type: array
          items:
            $ref: '#/components/schemas/SearchResult'
        graphContext:
          type: object
          properties:
            connectedConcepts:
              type: array
              items:
                type: string
            pathsToQuery:
              type: integer
              minimum: 0
            centralityScore:
              type: number
              minimum: 0
              maximum: 1

    SearchResult:
      type: object
      required:
        - id
        - text
        - meta
        - cosineSimilarity
        - rank
      properties:
        id:
          type: string
        text:
          type: string
        meta:
          type: object
          required: [section, contentType]
          properties:
            section:
              type: string
            contentType:
              type: string
            breadcrumbs:
              type: array
              items:
                type: string
        cosineSimilarity:
          type: number
          minimum: 0
          maximum: 1
        rank:
          type: integer
          minimum: 1

    DocumentResponse:
      type: object
      required:
        - document
      properties:
        document:
          $ref: '#/components/schemas/ObsidianDocument'

    ObsidianDocument:
      type: object
      required:
        - id
        - path
        - name
        - content
        - metadata
      properties:
        id:
          type: string
          description: Unique identifier (relative path from vault root)
        path:
          type: string
          description: File system path relative to vault root
        name:
          type: string
          description: Filename without extension
        extension:
          type: string
          enum: [md, canvas]
        content:
          type: string
          description: Raw file content
        frontmatter:
          type: object
          description: Parsed YAML frontmatter
        stats:
          type: object
          required: [wordCount, characterCount, lineCount]
          properties:
            wordCount:
              type: integer
              minimum: 0
            characterCount:
              type: integer
              minimum: 0
            lineCount:
              type: integer
              minimum: 0
            headingCount:
              type: integer
              minimum: 0
            linkCount:
              type: integer
              minimum: 0
            tagCount:
              type: integer
              minimum: 0
        relationships:
          type: object
          required: [wikilinks, tags, backlinks]
          properties:
            wikilinks:
              type: array
              items:
                $ref: '#/components/schemas/Wikilink'
            tags:
              type: array
              items:
                type: string
            backlinks:
              type: array
              items:
                $ref: '#/components/schemas/Backlink'
        metadata:
          type: object
          required: [created, modified, checksum]
          properties:
            created:
              type: string
              format: date-time
            modified:
              type: string
              format: date-time
            checksum:
              type: string
            lastIndexed:
              type: string
              format: date-time
            processingErrors:
              type: array
              items:
                type: string

    Wikilink:
      type: object
      required: [target, type, position]
      properties:
        target:
          type: string
          description: Target document path
        display:
          type: string
          description: Display text (if different from target)
        type:
          type: string
          enum: [document, heading, block]
        position:
          type: object
          required: [line, column, offset]
          properties:
            line:
              type: integer
              minimum: 0
            column:
              type: integer
              minimum: 0
            offset:
              type: integer
              minimum: 0
        context:
          type: string
          description: Context around the link

    Backlink:
      type: object
      required: [source, context, position]
      properties:
        source:
          type: string
          description: Source document that references this document
        context:
          type: string
          description: Context of the reference
        position:
          type: object
          required: [line, column, offset]
          properties:
            line:
              type: integer
              minimum: 0
            column:
              type: integer
              minimum: 0
            offset:
              type: integer
              minimum: 0

    DocumentChunksResponse:
      type: object
      required:
        - documentId
        - chunks
        - total
      properties:
        documentId:
          type: string
        chunks:
          type: array
          items:
            $ref: '#/components/schemas/DocumentChunk'
        total:
          type: integer
          minimum: 0
        pagination:
          type: object
          properties:
            limit:
              type: integer
            offset:
              type: integer
            hasMore:
              type: boolean

    DocumentChunk:
      type: object
      required:
        - id
        - text
        - meta
      properties:
        id:
          type: string
        text:
          type: string
        meta:
          type: object
          required: [section, contentType]
          properties:
            section:
              type: string
            contentType:
              type: string
            breadcrumbs:
              type: array
              items:
                type: string
        embedding:
          type: array
          items:
            type: number

    IngestionResponse:
      type: object
      required:
        - success
        - processed
        - skipped
        - errors
        - details
        - performance
      properties:
        success:
          type: boolean
        processed:
          type: integer
          minimum: 0
        skipped:
          type: integer
          minimum: 0
        errors:
          type: integer
          minimum: 0
        details:
          type: object
          required: [documentsProcessed, documentsSkipped, errors]
          properties:
            documentsProcessed:
              type: array
              items:
                type: string
            documentsSkipped:
              type: array
              items:
                type: string
            errors:
              type: array
              items:
                type: object
                required: [document, error]
                properties:
                  document:
                    type: string
                  error:
                    type: string
        performance:
          type: object
          required: [totalTime, documentsPerSecond, chunksPerSecond]
          properties:
            totalTime:
              type: number
              minimum: 0
            documentsPerSecond:
              type: number
              minimum: 0
            chunksPerSecond:
              type: number
              minimum: 0
        validationResults:
          type: array
          items:
            $ref: '#/components/schemas/ValidationResult'

    ValidationResult:
      type: object
      required:
        - documentId
        - valid
        - errors
        - warnings
        - stats
      properties:
        documentId:
          type: string
        valid:
          type: boolean
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        warnings:
          type: array
          items:
            $ref: '#/components/schemas/ValidationWarning'
        stats:
          type: object
          required: [processingTime, chunksGenerated, embeddingsGenerated]
          properties:
            processingTime:
              type: number
              minimum: 0
            chunksGenerated:
              type: integer
              minimum: 0
            embeddingsGenerated:
              type: integer
              minimum: 0

    ValidationError:
      type: object
      required:
        - code
        - message
        - severity
      properties:
        code:
          type: string
        message:
          type: string
        location:
          type: object
          properties:
            line:
              type: integer
              minimum: 0
            column:
              type: integer
              minimum: 0
            offset:
              type: integer
              minimum: 0
        severity:
          type: string
          enum: [error, warning, info]

    ValidationWarning:
      type: object
      required:
        - code
        - message
        - severity
      properties:
        code:
          type: string
        message:
          type: string
        location:
          type: object
          properties:
            line:
              type: integer
              minimum: 0
            column:
              type: integer
              minimum: 0
            offset:
              type: integer
              minimum: 0
        severity:
          type: string
          enum: [error, warning, info]

    AnalyticsResponse:
      type: object
      required:
        - analytics
        - generated
        - computationTime
      properties:
        analytics:
          $ref: '#/components/schemas/VaultAnalytics'
        generated:
          type: string
          format: date-time
        computationTime:
          type: number
          minimum: 0

    VaultAnalytics:
      type: object
      required:
        - overview
        - contentDistribution
        - networkAnalysis
        - temporalAnalysis
        - qualityMetrics
      properties:
        overview:
          type: object
          required: [totalDocuments, totalWords, totalLinks, totalTags, vaultAge]
          properties:
            totalDocuments:
              type: integer
              minimum: 0
            totalWords:
              type: integer
              minimum: 0
            totalLinks:
              type: integer
              minimum: 0
            totalTags:
              type: integer
              minimum: 0
            vaultAge:
              type: integer
              minimum: 0
        contentDistribution:
          type: object
          required: [byType, byFolder, byTag]
          properties:
            byType:
              type: object
              additionalProperties:
                type: integer
                minimum: 0
            byFolder:
              type: object
              additionalProperties:
                type: integer
                minimum: 0
            byTag:
              type: object
              additionalProperties:
                type: integer
                minimum: 0
        networkAnalysis:
          type: object
          required: [hubDocuments, clusters, orphans, linkHealth]
          properties:
            hubDocuments:
              type: array
              items:
                type: object
                required: [document, connections, centrality]
                properties:
                  document:
                    type: string
                  connections:
                    type: integer
                    minimum: 0
                  centrality:
                    type: number
                    minimum: 0
                    maximum: 1
            clusters:
              type: array
              items:
                type: object
                required: [name, documents, theme, density]
                properties:
                  name:
                    type: string
                  documents:
                    type: array
                    items:
                      type: string
                  theme:
                    type: string
                  density:
                    type: number
                    minimum: 0
                    maximum: 1
            orphans:
              type: array
              items:
                type: string
            linkHealth:
              type: object
              required: [brokenLinks, missingReferences, circularReferences]
              properties:
                brokenLinks:
                  type: integer
                  minimum: 0
                missingReferences:
                  type: integer
                  minimum: 0
                circularReferences:
                  type: integer
                  minimum: 0
        temporalAnalysis:
          type: object
          required: [creationTimeline, modificationTimeline, activityPatterns]
          properties:
            creationTimeline:
              type: array
              items:
                type: object
                required: [period, count]
                properties:
                  period:
                    type: string
                  count:
                    type: integer
                    minimum: 0
            modificationTimeline:
              type: array
              items:
                type: object
                required: [period, count]
                properties:
                  period:
                    type: string
                  count:
                    type: integer
                    minimum: 0
            activityPatterns:
              type: object
              required: [mostActiveDays, mostActiveHours]
              properties:
                mostActiveDays:
                  type: array
                  items:
                    type: string
                mostActiveHours:
                  type: array
                  items:
                    type: integer
                    minimum: 0
                    maximum: 23
        qualityMetrics:
          type: object
          required: [averageDocumentLength, averageLinksPerDocument, tagConsistency, formattingConsistency]
          properties:
            averageDocumentLength:
              type: number
              minimum: 0
            averageLinksPerDocument:
              type: number
              minimum: 0
            tagConsistency:
              type: number
              minimum: 0
              maximum: 1
            formattingConsistency:
              type: number
              minimum: 0
              maximum: 1

    StatsResponse:
      type: object
      required:
        - totalChunks
        - byContentType
        - byFolder
        - tagDistribution
      properties:
        totalChunks:
          type: integer
          minimum: 0
        byContentType:
          type: object
          additionalProperties:
            type: integer
            minimum: 0
        byFolder:
          type: object
          additionalProperties:
            type: integer
            minimum: 0
        tagDistribution:
          type: object
          additionalProperties:
            type: integer
            minimum: 0

    HealthResponse:
      type: object
      required:
        - status
        - timestamp
        - version
        - services
        - metrics
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
        version:
          type: string
        services:
          type: object
          required: [database, embeddings, indexing]
          properties:
            database:
              type: string
              enum: [up, down]
            embeddings:
              type: string
              enum: [up, down]
            indexing:
              type: string
              enum: [up, down]
        metrics:
          type: object
          required: [totalDocuments, totalChunks, lastIngestion, uptime]
          properties:
            totalDocuments:
              type: integer
              minimum: 0
            totalChunks:
              type: integer
              minimum: 0
            lastIngestion:
              type: string
              format: date-time
              nullable: true
            uptime:
              type: number
              minimum: 0

    ErrorResponse:
      type: object
      required:
        - error
        - message
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object
        timestamp:
          type: string
          format: date-time

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
