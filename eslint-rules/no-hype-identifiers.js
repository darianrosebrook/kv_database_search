// const HYPE = /(enhanced|unified|better|new|next|final|copy|revamp|improved)/i;

// // Node.js API methods and standard library functions that should be allowed
// const ALLOWED_APIS = new Set([
//   // Node.js fs methods
//   "copyFile",
//   "copyFileSync",
//   "copyFileAsync",
//   "readFile",
//   "readFileSync",
//   "readFileAsync",
//   "writeFile",
//   "writeFileSync",
//   "writeFileAsync",
//   "appendFile",
//   "appendFileSync",
//   "appendFileAsync",
//   "unlink",
//   "unlinkSync",
//   "unlinkAsync",
//   "mkdir",
//   "mkdirSync",
//   "mkdirAsync",
//   "rmdir",
//   "rmdirSync",
//   "rmdirAsync",
//   "readdir",
//   "readdirSync",
//   "readdirAsync",
//   "stat",
//   "statSync",
//   "statAsync",
//   "lstat",
//   "lstatSync",
//   "lstatAsync",
//   "fstat",
//   "fstatSync",
//   "fstatAsync",
//   "access",
//   "accessSync",
//   "accessAsync",
//   "chmod",
//   "chmodSync",
//   "chmodAsync",
//   "chown",
//   "chownSync",
//   "chownAsync",
//   "utimes",
//   "utimesSync",
//   "utimesAsync",
//   "watch",
//   "watchFile",
//   "unwatchFile",
//   "createReadStream",
//   "createWriteStream",
//   "readStream",
//   "writeStream",
//   "exists",
//   "existsSync",
//   "realpath",
//   "realpathSync",
//   "realpathAsync",
//   "link",
//   "linkSync",
//   "linkAsync",
//   "symlink",
//   "symlinkSync",
//   "symlinkAsync",
//   "readlink",
//   "readlinkSync",
//   "readlinkAsync",
//   "truncate",
//   "truncateSync",
//   "truncateAsync",
//   "ftruncate",
//   "ftruncateSync",
//   "ftruncateAsync",
//   "fdatasync",
//   "fdatasyncSync",
//   "fdatasyncAsync",
//   "fsync",
//   "fsyncSync",
//   "fsyncAsync",
//   "fchmod",
//   "fchmodSync",
//   "fchmodAsync",
//   "fchown",
//   "fchownSync",
//   "fchownAsync",
//   "futimes",
//   "futimesSync",
//   "futimesAsync",
//   "lchmod",
//   "lchmodSync",
//   "lchmodAsync",
//   "lchown",
//   "lchownSync",
//   "lchownAsync",
//   "lutimes",
//   "lutimesSync",
//   "lutimesAsync",
//   "open",
//   "openSync",
//   "openAsync",
//   "close",
//   "closeSync",
//   "closeAsync",
//   "read",
//   "readSync",
//   "readAsync",
//   "write",
//   "writeSync",
//   "writeAsync",
//   "rename",
//   "renameSync",
//   "renameAsync",
//   "ftruncate",
//   "ftruncateSync",
//   "ftruncateAsync",

//   // Node.js path methods
//   "resolve",
//   "normalize",
//   "join",
//   "relative",
//   "dirname",
//   "basename",
//   "extname",
//   "format",
//   "parse",
//   "isAbsolute",
//   "sep",
//   "delimiter",

//   // Node.js url methods
//   "parse",
//   "format",
//   "resolve",
//   "resolveObject",

//   // Node.js crypto methods
//   "createHash",
//   "createHmac",
//   "createCipher",
//   "createDecipher",
//   "createCipheriv",
//   "createDecipheriv",
//   "createSign",
//   "createVerify",
//   "randomBytes",
//   "randomFill",
//   "randomFillSync",
//   "scrypt",
//   "scryptSync",
//   "pbkdf2",
//   "pbkdf2Sync",
//   "generateKeyPair",
//   "generateKeyPairSync",

//   // Node.js stream methods
//   "createReadStream",
//   "createWriteStream",
//   "pipeline",
//   "finished",
//   "Readable",
//   "Writable",
//   "Duplex",
//   "Transform",
//   "PassThrough",

//   // Node.js http methods
//   "createServer",
//   "request",
//   "get",
//   "listen",
//   "close",

//   // Node.js util methods
//   "inspect",
//   "format",
//   "formatWithOptions",
//   "inspect",
//   "isArray",
//   "isBoolean",
//   "isBuffer",
//   "isDate",
//   "isError",
//   "isFunction",
//   "isNull",
//   "isNullOrUndefined",
//   "isNumber",
//   "isObject",
//   "isPrimitive",
//   "isRegExp",
//   "isString",
//   "isSymbol",
//   "isUndefined",
//   "log",
//   "deprecate",
//   "callbackify",
//   "promisify",

//   // Node.js events methods
//   "on",
//   "once",
//   "emit",
//   "removeListener",
//   "removeAllListeners",
//   "listeners",
//   "listenerCount",
//   "eventNames",
//   "setMaxListeners",
//   "getMaxListeners",

//   // Node.js child_process methods
//   "spawn",
//   "exec",
//   "execFile",
//   "fork",
//   "spawnSync",
//   "execSync",
//   "execFileSync",

//   // Node.js os methods
//   "platform",
//   "arch",
//   "cpus",
//   "endianness",
//   "freemem",
//   "homedir",
//   "hostname",
//   "loadavg",
//   "networkInterfaces",
//   "release",
//   "tmpdir",
//   "totalmem",
//   "type",
//   "uptime",
//   "userInfo",
//   "version",
//   "machine",
//   "devNull",
//   "EOL",

//   // Node.js process methods
//   "nextTick",
//   "setImmediate",
//   "clearImmediate",
//   "setTimeout",
//   "clearTimeout",
//   "setInterval",
//   "clearInterval",
//   "exit",
//   "kill",
//   "send",
//   "disconnect",
//   "uncaughtException",
//   "unhandledRejection",
//   "warning",
//   "beforeExit",

//   // Node.js buffer methods
//   "alloc",
//   "allocUnsafe",
//   "allocUnsafeSlow",
//   "from",
//   "isBuffer",
//   "isEncoding",
//   "byteLength",
//   "compare",
//   "concat",
//   "copy",
//   "fill",
//   "includes",
//   "indexOf",
//   "lastIndexOf",
//   "readDoubleBE",
//   "readDoubleLE",
//   "readFloatBE",
//   "readFloatLE",
//   "readInt8",
//   "readInt16BE",
//   "readInt16LE",
//   "readInt32BE",
//   "readInt32LE",
//   "readIntBE",
//   "readIntLE",
//   "readUInt8",
//   "readUInt16BE",
//   "readUInt16LE",
//   "readUInt32BE",
//   "readUInt32LE",
//   "readUIntBE",
//   "readUIntLE",
//   "slice",
//   "subarray",
//   "swap16",
//   "swap32",
//   "swap64",
//   "toJSON",
//   "toString",
//   "write",
//   "writeDoubleBE",
//   "writeDoubleLE",
//   "writeFloatBE",
//   "writeFloatLE",
//   "writeInt8",
//   "writeInt16BE",
//   "writeInt16LE",
//   "writeInt32BE",
//   "writeInt32LE",
//   "writeIntBE",
//   "writeIntLE",
//   "writeUInt8",
//   "writeUInt16BE",
//   "writeUInt16LE",
//   "writeUInt32BE",
//   "writeUInt32LE",
//   "writeUIntBE",
//   "writeUIntLE",

//   // Common web APIs that might be used in Node.js
//   "fetch",
//   "Request",
//   "Response",
//   "Headers",
//   "URL",
//   "URLSearchParams",
//   "FormData",
//   "Blob",
//   "File",
//   "FileReader",
//   "TextEncoder",
//   "TextDecoder",

//   // Common third-party library methods (React, etc.)
//   "createElement",
//   "createContext",
//   "createRef",
//   "forwardRef",
//   "memo",
//   "useState",
//   "useEffect",
//   "useContext",
//   "useReducer",
//   "useCallback",
//   "useMemo",
//   "useRef",
//   "useImperativeHandle",
//   "useLayoutEffect",
//   "useDebugValue",
//   "useDeferredValue",
//   "useId",
//   "useInsertionEffect",
//   "useSyncExternalStore",
//   "useTransition",
//   "startTransition",

//   // Common testing framework methods
//   "describe",
//   "it",
//   "test",
//   "expect",
//   "beforeEach",
//   "afterEach",
//   "beforeAll",
//   "afterAll",
//   "mock",
//   "spyOn",
//   "jest",
//   "vi",
//   "vitest",

//   // Common utility library methods
//   "clone",
//   "cloneDeep",
//   "merge",
//   "mergeWith",
//   "assign",
//   "extend",
//   "pick",
//   "omit",
//   "get",
//   "set",
//   "has",
//   "unset",
//   "update",
//   "defaults",
//   "defaultsDeep",
//   "isEqual",
//   "isEqualWith",
//   "isEmpty",
//   "isNil",
//   "isNull",
//   "isUndefined",
//   "isNumber",
//   "isString",
//   "isBoolean",
//   "isArray",
//   "isObject",
//   "isFunction",
//   "isDate",
//   "isRegExp",
//   "isError",
//   "isSymbol",
//   "isMap",
//   "isSet",
//   "isWeakMap",
//   "isWeakSet",
//   "isArrayBuffer",
//   "isDataView",
//   "isTypedArray",
//   "isBuffer",
//   "isInteger",
//   "isSafeInteger",
//   "isFinite",
//   "isNaN",
//   "isLength",
//   "isPlainObject",
//   "isArguments",
//   "isArrayLike",
//   "isArrayLikeObject",
//   "isElement",
//   "isMatch",
//   "isMatchWith",
//   "isNative",
//   "isTypedArray",
//   "isView",
//   "toArray",
//   "toFinite",
//   "toInteger",
//   "toLength",
//   "toNumber",
//   "toPlainObject",
//   "toSafeInteger",
//   "toString",
//   "toUpper",
//   "toLower",
//   "trim",
//   "trimEnd",
//   "trimStart",
//   "camelCase",
//   "capitalize",
//   "deburr",
//   "kebabCase",
//   "lowerCase",
//   "lowerFirst",
//   "pad",
//   "padEnd",
//   "padStart",
//   "repeat",
//   "replace",
//   "snakeCase",
//   "startCase",
//   "toLower",
//   "toUpper",
//   "trim",
//   "trimEnd",
//   "trimStart",
//   "truncate",
//   "unescape",
//   "upperCase",
//   "upperFirst",
//   "words",
//   "escape",
//   "escapeRegExp",
//   "unescape",
//   "template",
//   "templateSettings",
//   "attempt",
//   "bindAll",
//   "cond",
//   "conforms",
//   "constant",
//   "defaultTo",
//   "flow",
//   "flowRight",
//   "identity",
//   "iteratee",
//   "matches",
//   "matchesProperty",
//   "method",
//   "methodOf",
//   "mixin",
//   "noop",
//   "nthArg",
//   "over",
//   "overEvery",
//   "overSome",
//   "property",
//   "propertyOf",
//   "range",
//   "rangeRight",
//   "stubArray",
//   "stubFalse",
//   "stubObject",
//   "stubString",
//   "stubTrue",
//   "times",
//   "toPath",
//   "uniqueId",
//   "add",
//   "ceil",
//   "divide",
//   "floor",
//   "max",
//   "maxBy",
//   "mean",
//   "meanBy",
//   "min",
//   "minBy",
//   "multiply",
//   "round",
//   "subtract",
//   "sum",
//   "sumBy",
//   "clamp",
//   "inRange",
//   "random",
//   "assignIn",
//   "assignInWith",
//   "assignWith",
//   "at",
//   "create",
//   "defaults",
//   "defaultsDeep",
//   "findKey",
//   "findLastKey",
//   "forIn",
//   "forInRight",
//   "forOwn",
//   "forOwnRight",
//   "functions",
//   "functionsIn",
//   "get",
//   "has",
//   "hasIn",
//   "invert",
//   "invertBy",
//   "invoke",
//   "keys",
//   "keysIn",
//   "mapKeys",
//   "mapValues",
//   "merge",
//   "mergeWith",
//   "omit",
//   "omitBy",
//   "pick",
//   "pickBy",
//   "result",
//   "set",
//   "setWith",
//   "toPairs",
//   "toPairsIn",
//   "transform",
//   "unset",
//   "update",
//   "updateWith",
//   "values",
//   "valuesIn",
//   "chain",
//   "tap",
//   "thru",
//   "commit",
//   "plant",
//   "reverse",
//   "value",
//   "valueOf",
//   "add",
//   "attempt",
//   "bindAll",
//   "cond",
//   "conforms",
//   "constant",
//   "defaultTo",
//   "flow",
//   "flowRight",
//   "identity",
//   "iteratee",
//   "matches",
//   "matchesProperty",
//   "method",
//   "methodOf",
//   "mixin",
//   "noop",
//   "nthArg",
//   "over",
//   "overEvery",
//   "overSome",
//   "property",
//   "propertyOf",
//   "range",
//   "rangeRight",
//   "stubArray",
//   "stubFalse",
//   "stubObject",
//   "stubString",
//   "stubTrue",
//   "times",
//   "toPath",
//   "uniqueId",
//   "add",
//   "ceil",
//   "divide",
//   "floor",
//   "max",
//   "maxBy",
//   "mean",
//   "meanBy",
//   "min",
//   "minBy",
//   "multiply",
//   "round",
//   "subtract",
//   "sum",
//   "sumBy",
//   "clamp",
//   "inRange",
//   "random",
//   "assignIn",
//   "assignInWith",
//   "assignWith",
//   "at",
//   "create",
//   "defaults",
//   "defaultsDeep",
//   "findKey",
//   "findLastKey",
//   "forIn",
//   "forInRight",
//   "forOwn",
//   "forOwnRight",
//   "functions",
//   "functionsIn",
//   "get",
//   "has",
//   "hasIn",
//   "invert",
//   "invertBy",
//   "invoke",
//   "keys",
//   "keysIn",
//   "mapKeys",
//   "mapValues",
//   "merge",
//   "mergeWith",
//   "omit",
//   "omitBy",
//   "pick",
//   "pickBy",
//   "result",
//   "set",
//   "setWith",
//   "toPairs",
//   "toPairsIn",
//   "transform",
//   "unset",
//   "update",
//   "updateWith",
//   "values",
//   "valuesIn",
//   "chain",
//   "tap",
//   "thru",
//   "commit",
//   "plant",
//   "reverse",
//   "value",
//   "valueOf",
// ]);

// export default {
//   name: "no-hype-identifiers",
//   meta: {
//     type: "problem",
//     docs: { description: "Disallow hype adjectives in identifiers" },
//     messages: {
//       hype: "Avoid '{{name}}' in identifiers; use purpose-first naming.",
//     },
//     schema: [],
//   },
//   defaultOptions: [],
//   create(ctx) {
//     function checkName(id) {
//       if (!id || !id.name) return;

//       // Allow standard Node.js APIs and common library methods
//       if (ALLOWED_APIS.has(id.name)) return;

//       // Check if the identifier contains hype words
//       if (HYPE.test(id.name)) {
//         ctx.report({ node: id, messageId: "hype", data: { name: id.name } });
//       }
//     }
//     return {
//       Identifier: checkName,
//       "ExportNamedDeclaration > ExportSpecifier"(node) {
//         checkName(node.exported);
//       },
//     };
//   },
// };
